name: Release bicep and helper

on:
  workflow_dispatch:
    inputs:
      templateRelease:
        description: 'What (existing or NEW) release tag to point the Helper to'
        type: string
        required: true
      createRelease:
        description: 'Create a NEW release with that tag'
        type: boolean
        required: false

env:
  templateRelease: ${{ github.event.inputs.templateRelease }}

jobs:
  SetupWF:
    runs-on: ubuntu-latest
    outputs:
      REACT_APP_TEMPLATERELEASE: ${{ github.event.inputs.templateRelease }}
    steps:
      - name: Reusable workflow
        run: |
          echo "Resuable workflows can't be directly passed ENV/INPUTS (yet)"
          echo "So we need this job to be able to access the value in env.RG"
          echo "see https://github.community/t/reusable-workflow-env-context-not-available-in-jobs-job-id-with/206111"
      - name: Param checking
        run: |
          echo "Targetting Template Release ${{github.event.inputs.templateRelease}}"
  TestWebApp:
    needs: [SetupWF, CreateRelease]
    uses: ./.github/workflows/ghpagesTest.yml
    with:
      REACT_APP_TEMPLATERELEASE: ${{ needs.SetupWF.outputs.REACT_APP_TEMPLATERELEASE }}
      doAzCmdDeployment: true
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  BuildWebApp:
    runs-on: ubuntu-latest
    name: Build Web App
    steps:
      - uses: actions/checkout@v3.3.0

      - name: Job Parameter Checking
        run: |
          echo "GitHub Ref: ${{ github.ref }}"

      - name: Azure Login
        uses: Azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build VM Sku json file
        timeout-minutes: 3
        run: |
          cd postdeploy/scripts
          chmod +x generate-vm-sku-list-v2.sh
          ./generate-vm-sku-list-v2.sh

      - name: Build node app with bicep release
        run: |
          cd helper
          npm install
          REACT_APP_APPINSIGHTS_KEY=${{ secrets.REACT_APP_APPINSIGHTS_KEY}} REACT_APP_TEMPLATERELEASE="${{env.templateRelease}}"  npm run build

      - name: Create GitHub pages release artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: HelperApp
          path: helper/build

  CreateRelease:
    runs-on: ubuntu-latest
    name: Create GitHub Release (bicep)
    if: ${{ github.event.inputs.createRelease == 'true' }}
    steps:
      - uses: actions/checkout@v3.3.0

      - name: Check that the GitHub release does not already exist
        run: |
          GHJSON=$(gh release view ${{env.templateRelease}} --json name) || GHJSON=""

          if [ -z "$GHJSON" ]
          then
                echo "Release not found - great"
          else
                echo "Release already exists - aborting"
                exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Bicep
        shell: pwsh
        run: az bicep install

      - name: Bicep build
        shell: pwsh
        run: |
          #write-output $pwd
          $compiledir=Join-Path -Path $pwd -ChildPath "bicep/compiled"
          write-output $compiledir
          If(!(test-path $compiledir))
          {
                New-Item -ItemType Directory -Force -Path $compiledir
          }
          /home/runner/.azure/bin/bicep build bicep/main.bicep --outdir $compiledir

      - name: Create Bicep release artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: CompiledBicep
          path: bicep/compiled/main.json

      - name: Create GitHub release
        run: |
          GHJSON=$(gh release create ${{env.templateRelease}} 'bicep/compiled/main.json' -p --generate-notes )
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  AddExtraFileArtifacts:
    runs-on: ubuntu-latest
    needs: [CreateRelease]
    strategy:
      matrix:
        files:
        - 'postdeploy/scripts/postdeploy.sh'
        - 'postdeploy/k8smanifests/networkpolicy-deny-all.yml'
        - 'postdeploy/helm/Az-CertManagerIssuer-0.3.0.tgz'
        - 'helper/src/dependencies.json'

    name: Add extra release file-artifacts
    if: ${{ github.event.inputs.createRelease == 'true' }}
    steps:
      - uses: actions/checkout@v3.3.0

      - name: Verify File
        run: cat ${{ matrix.files }}

      - name: Upload Extra Artifacts to GitHub release
        run: |
          echo "Adding Artifact ${{ matrix.files }} to Release ${{env.templateRelease}}"
          gh release upload ${{env.templateRelease}} ${{ matrix.files }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  CreateExtraBicepArtifacts:
    runs-on: ubuntu-latest
    needs: [CreateRelease]
    strategy:
      matrix:
        bicep:
        - 'samples/peered-vnet/main.bicep'
        #Add any extra bicep files for release to this yaml array

    name: Create extra bicep artifacts
    if: ${{ github.event.inputs.createRelease == 'true' }}
    steps:
      - uses: actions/checkout@v3.3.0

      - name: Set better name of artifact
        id: artifactName
        shell: pwsh
        run : |
          $filepath = "${{ matrix.bicep }}"

          echo "Processing artifact $filepath"

          switch ( split-path $filepath )
          {
              #'samples/peered-vnet' { $ARTIFACTNAME = 'sample-peeredvnet.json'    }
              default {  $ARTIFACTNAME = $filepath.replace("/","-").replace('-main.bicep','.bicep').replace('.bicep','.json') }
          }
          echo $ARTIFACTNAME
          echo "ARTIFACTNAME=$ARTIFACTNAME" >> $Env:GITHUB_OUTPUT

      - name: Install Bicep
        run: az bicep install

      - name: Bicep build
        run: |
          filepath="${{ matrix.bicep }}"
          echo "Building bicep file $filepath into ${{ steps.artifactName.outputs.ARTIFACTNAME}}"

          bicep build $filepath --outfile "./${{ steps.artifactName.outputs.ARTIFACTNAME}}"

      - name: Verify Compiled Arm Json
        run: |
          echo "Verifying ${{ steps.artifactName.outputs.ARTIFACTNAME}}"
          cat ${{ steps.artifactName.outputs.ARTIFACTNAME}}

      - name: Upload Extra Artifacts to GitHub release
        run: |
          echo "Adding Artifact ${{ steps.artifactName.outputs.ARTIFACTNAME}} to Release ${{env.templateRelease}}"
          gh release upload ${{env.templateRelease}} "./${{ steps.artifactName.outputs.ARTIFACTNAME}}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  DeployWebAppToCanary:
    runs-on: ubuntu-latest
    name: Deploy Web App to Canary Pages
    if: ${{ always() }}
    needs: [BuildWebApp , CreateRelease, CreateExtraBicepArtifacts, TestWebApp]
    steps:
      - uses: actions/download-artifact@v3.0.2
        with:
          name: HelperApp
          path: helperapp

      #Although we don't need this artifact, if it's missing then we can abort this job
      - uses: actions/download-artifact@v3.0.2
        if: ${{ github.event.inputs.createRelease == 'true' }}
        with:
          name: CompiledBicep
          path: compilebicep

      - name: Deploy to GitHub Pages Canary
        uses: crazy-max/ghaction-github-pages@v3.1.0
        with:
          target_branch: gh-pages-canary
          commit_message: Pages Release. Canary ${{env.templateRelease}}
          build_dir: helperapp
          keep_history: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  DeployWebAppToProd:
    runs-on: ubuntu-latest
    name: Deploy Web App to Prod Pages
    if: ${{ always() && github.ref == 'refs/heads/main'}}
    environment: UI-Deploy-Manual-Approval
    needs: [BuildWebApp , CreateRelease, DeployWebAppToCanary]
    steps:
      - uses: actions/download-artifact@v3.0.2
        with:
          name: HelperApp
          path: helperapp

      #Although we don't need this artifact, if it's missing then we can abort this job
      - uses: actions/download-artifact@v3.0.2
        if: ${{ github.event.inputs.createRelease == 'true' }}
        with:
          name: CompiledBicep
          path: compilebicep

      - name: Deploy to GitHub Pages Prod
        uses: crazy-max/ghaction-github-pages@v3.1.0
        with:
          target_branch: gh-pages
          commit_message: Pages Release. Prod ${{env.templateRelease}}
          build_dir: helperapp
          keep_history: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Demonstrates various troubleshooting steps to check the AKS deployment
# Handy when there's strange errors to chase

name: AKS Troubleshooting Deployment

on:
  workflow_call:
    inputs:
      Environment:
        required: true
        type: string
        description: 'GitHub Environment'
      RG:
        required: true
        type: string
        description: 'Resource Group Name'
      AKSNAME:
        required: true
        type: string
        description: AKS Resource Name'
      AGNAME:
        default: ""
        required: true
        type: string
        description: 'Application Gateway Resource Name'
      LANAME:
        default: ""
        required: true
        type: string
        description: 'Log Analytics Resource Name'
      LAWGUID:
        default: ""
        required: true
        type: string
        description: 'Log Analytics Workspace GUID'
      USERUNCMD:
        default: false
        required: false
        type: boolean
        description: 'Run kubectl commands through RunCmd'

    secrets:
      AZURE_CREDENTIALS:
        required: true

env:
  AKSNAME: "${{ inputs.AKSNAME}}"
  RG: "${{ inputs.RG }}"

jobs:
  Log:
    runs-on: ubuntu-latest
    environment: ${{ inputs.Environment }}
    steps:
      - name: Parameter log
        run: |
          echo "Capturing environment parameters"
          echo "--------------------------------"
          echo "Environment is ${{ inputs.Environment }}"
          echo "Use Run Cmd is ${{ inputs.USERUNCMD }}"
          echo "RG is $RG"
          echo "AKS name is $AKSNAME"
          echo "AGW name is ${{ inputs.AGNAME }}"
          echo "LA name is ${{ inputs.LANAME }}"
          echo "LA workspace guid is ${{ inputs.LAWGUID }}"

  VerifyMonitoring:
    runs-on: ubuntu-latest
    environment: ${{ inputs.Environment }}
    if: always() && inputs.LANAME != '' && inputs.LAWGUID  != ''
    env:
      LANAME: "${{ inputs.LANAME}}"
      LAWGUID: "${{ inputs.LAWGUID}}"
    steps:
      - name: Param check
        run: |
          echo "Environment is ${{ inputs.Environment }}"
          echo "RG is $RG"
          echo "AKS name is $AKSNAME"
          echo "LA name is $LANAME"
          echo "LA workspace guid is $LAWGUID"

      - name: Allow Monitoring extension
        shell: pwsh
        run: az extension add -n log-analytics -y

      - name: Azure Login
        uses: Azure/login@v1.4.6
        with:
          creds:  ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          environment: azurecloud
          allow-no-subscriptions: false

      - name: Log Analytics log table verification
        shell: pwsh
        run: |
          Write-Output "Check for Logs in the Log Analytics ($env:LANAME) Workspace ($env:LAWGUID)"

          $KubeNode = az monitor log-analytics query -w $env:LAWGUID --analytics-query "KubeNodeInventory | count" -o json | ConvertFrom-Json
          Write-Output $KubeNode
          Write-Output $KubeNode[0].Count

          if ($KubeNode[0].Count -eq 0) {
            throw "Log Analytics Workspace table: KubeNodeInventory does not have any data. Check network traffic is not being supressed by firewall egress rules"
          }

          $containers = az monitor log-analytics query -w $env:LAWGUID --analytics-query "ContainerLog | join(KubePodInventory| where TimeGenerated > startofday(ago(1h))) on ContainerID |where TimeGenerated > startofday(ago(10m)) | project TimeGenerated ,Namespace , LogEntrySource , LogEntry | summarize count() by Namespace, LogEntrySource"
          Write-Output $containers

      - name: Flow Logs Deny checks
        shell: pwsh
        continue-on-error: true #The query will fail if NSG flow logs are not being captured
        run: |
          Write-Output "Check for Logs in the Log Analytics ($env:LANAME) Workspace ($env:LAWGUID)"

          $query="AzureNetworkAnalytics_CL |where DeniedInFlows_d > 0 or  DeniedOutFlows_d > 0 |project FlowStartTime_t, NSGRule_s, SourceSystem, FlowType_s, DestIP_s, DestPort_d, Subnet_s"
          Write-Output "Sending Query $query"

          $DenyLogs = az monitor log-analytics query -w $env:LAWGUID --analytics-query $query -o json | ConvertFrom-Json
          Write-Output $DenyLogs

      - name: Flow Logs IP Details Check
        shell: pwsh
        continue-on-error: true #The query will fail if NSG flow logs are not being captured
        run: |
          Write-Output "Check for Logs in the Log Analytics ($env:LANAME) Workspace ($env:LAWGUID)"

          $query="AzureNetworkAnalyticsIPDetails_CL"
          Write-Output "Sending Query $query"

          $Logs = az monitor log-analytics query -w $env:LAWGUID --analytics-query $query -o json | ConvertFrom-Json
          Write-Output $Logs

  CaptureAgicLogs:
    runs-on: ubuntu-latest
    environment: ${{ inputs.Environment }}
    if: always() && inputs.AGNAME != ''
    steps:
      - name: Azure Login
        uses: Azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          environment: azurecloud
          allow-no-subscriptions: false

      - name: AKS Connect
        if: inputs.USERUNCMD == false
        run: az aks get-credentials -n $AKSNAME -g $RG --overwrite-existing

      - name: Kubelogin
        if: inputs.USERUNCMD == false
        env:
          kubeloginversion: 'v0.0.13'
        run: |
          wget https://github.com/Azure/kubelogin/releases/download/${{ env.kubeloginversion }}/kubelogin-linux-amd64.zip
          unzip kubelogin-linux-amd64.zip
          sudo mv bin/linux_amd64/kubelogin /usr/bin
          kubelogin convert-kubeconfig -l azurecli

      - name: Get Agic pod name
        id: agicpodname
        env:
          NAMESP: "kube-system"
          AGICLABEL: "app=ingress-appgw"
          USERUNCMD: ${{ inputs.USERUNCMD }}
        run: |
          NAMESPACEPODS="kubectl get pods -n $NAMESP -l $AGICLABEL -o json"
          echo $NAMESPACEPODS

          if [ "$USERUNCMD" == "true" ];
          then
            echo "Sending command $NAMESPACEPODS to $AKSNAME in $RG";
            cmdOut=$(az aks command invoke -g $RG -n $AKSNAME -o json --command "${NAMESPACEPODS}");
            echo $cmdOut > debug-agic-cmdout.json
            PODS=$(echo $cmdOut | jq -r '.logs')
            echo $PODS > debug-getagicpod-logs.json
          else
            PODS=$($NAMESPACEPODS)
          fi

          APPGWPOD=$(echo $PODS | jq -r '.items[] | select(.metadata.name | test("appgw-")).metadata.name')

          echo "Found AGIC pod name: $APPGWPOD"
          echo "APPGWPOD=$APPGWPOD" >> $GITHUB_OUTPUT

      - name: Describe AGIC Pod
        env:
          NAMESP: "kube-system"
          APPGWPODNAME: ${{ steps.agicpodname.outputs.APPGWPOD}}
          USERUNCMD: ${{ inputs.USERUNCMD }}
        run: |
          DESCRIBEPODCMD="kubectl describe po -n $NAMESP $APPGWPODNAME"

          if [ "$USERUNCMD" == "true" ];
          then
            echo "Sending command $DESCRIBEPODCMD to $AKSNAME in $RG";
            cmdOut=$(az aks command invoke -g $RG -n $AKSNAME -o json --command "${DESCRIBEPODCMD}");
            echo $cmdOut > debug-describe-agic.json
          else
            $DESCRIBEPODCMD > debug-describe-agic.json
          fi

          echo "Grabbing AGIC image version"
          cat debug-describe-agic.json | grep Image:

      - name: Grab full AGIC pod logs
        continue-on-error: true
        env:
          NAMESP: "kube-system"
          APPGWPODNAME: ${{ steps.agicpodname.outputs.APPGWPOD}}
          USERUNCMD: ${{ inputs.USERUNCMD }}
        run: |
          PODLOGSCMD="kubectl logs -n $NAMESP $APPGWPODNAME"

          if [ "$USERUNCMD" == "true" ];
          then
            echo "Sending command $PODLOGSCMD to $AKSNAME in $RG";
            cmdOut=$(az aks command invoke -g $RG -n $AKSNAME -o json --command "${PODLOGSCMD}");
            echo $cmdOut > debug-agic-podlogs.json
            PODLOGS=$(echo $cmdOut | jq -r '.logs')
            echo $PODLOGS > debug-agic-podlogs.txt
          else
            $PODLOGSCMD > debug-agic-podlogs.txt
          fi

          cat debug-agic-podlogs.txt | grep invalid > debug-agic-podlogs-invalid.txt

      - name: Store any generated debug json files as artifacts
        if: always()
        uses: actions/upload-artifact@v3.1.2
        with:
          name: Troubleshooting-AGIC
          path: debug*.*

  CaptureAKSLogs:
    runs-on: ubuntu-latest
    environment: ${{ inputs.Environment }}
    if: always() && inputs.AKSNAME != ''
    steps:
      - name: Param check
        run: |
          echo "Environment is ${{ inputs.Environment }}"
          echo "RG is $RG"
          echo "AKS name is $AKSNAME"
          echo "LA name is ${{ inputs.LANAME }}"
          echo "LA workspace guid is ${{ inputs.LAWGUID }}"

      - name: Azure Login
        uses: Azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          environment: azurecloud
          allow-no-subscriptions: false

      - name: AKS Connect
        if: inputs.USERUNCMD == false
        run: az aks get-credentials -n $AKSNAME -g $RG --overwrite-existing

      - name: Kubelogin
        if: inputs.USERUNCMD == false
        env:
          kubeloginversion: 'v0.0.13'
        run: |
          wget https://github.com/Azure/kubelogin/releases/download/${{ env.kubeloginversion }}/kubelogin-linux-amd64.zip
          unzip kubelogin-linux-amd64.zip
          sudo mv bin/linux_amd64/kubelogin /usr/bin
          kubelogin convert-kubeconfig -l azurecli

      - name: Check Run Command
        if: inputs.USERUNCMD == true
        uses: Azure/cli@v1.0.7
        env:
          AZCLIVERSION: latest
        with:
          azcliversion: ${{ env.AZCLIVERSION }}
          inlineScript: |
            command="kubectl get nodes"
            echo "Sending command $command to AKS"
            cmdOut=$(az aks command invoke -g $RG -n $AKSNAME -o json --command "${command}")
            echo $cmdOut

      - name: Kubectl get event Warnings
        env:
          USERUNCMD: inputs.USERUNCMD
        run: |
          geteventcmd="kubectl get events --sort-by='.metadata.creationTimestamp' -A | grep Warning"

          if [ "$USERUNCMD" != "true" ];
          then
            echo "Grep command not in RunCmd Container. Setting unfiltered command."
            geteventcmd="kubectl get events --sort-by='.metadata.creationTimestamp' -A"
            echo "Sending command $geteventcmd to $AKSNAME in $RG";
            cmdOut=$(az aks command invoke -g $RG -n $AKSNAME -o json --command "${geteventcmd}");
            echo $cmdOut;
          else
            $geteventcmd
          fi

      - name: Check Events for default namespace
        env:
          NAMESP: "default"
          USERUNCMD: inputs.USERUNCMD
        run: |
          geteventcmd="kubectl get events -n $NAMESP"

          if [ "$USERUNCMD" != "true" ];
          then
            echo "Sending command $geteventcmd to $AKSNAME in $RG";
            cmdOut=$(az aks command invoke -g $RG -n $AKSNAME -o json --command "${geteventcmd}");
            echo $cmdOut;
          else
            $geteventcmd
          fi
on: 
  workflow_call:
    inputs:
      RG:
        required: true
        type: string
      AKSNAME:
        required: true
        type: string
      DNSDOMAIN:
        required: true
        type: string
      DNSRG:
        required: true
        type: string
      DNSRECORDNAME:
        required: true
        type: string
      AKVNAME:
        required: true
        type: string
      AGNAME:
        required: true
        type: string
      APPNAME:
        default: "openjdk-demo"
        required: true
        type: string
      DOVERIFYSTEPS:
        default: false
        required: false
        type: boolean
    secrets:
      AZURE_CREDENTIALS:
        required: true

jobs:
  App_Create:
    runs-on: ubuntu-latest
    concurrency: ${{ inputs.AGNAME}} #AppGateway doesn't like concurrent updates
    steps:
      - uses: actions/checkout@v2
      
      - name: Job parameter inspection
        run: |
          echo "RG is: ${{ inputs.RG }}"
          echo "AKS name is ${{ inputs.AKSNAME}}"
          echo "AGNAME is ${{ inputs.AGNAME}}"
          echo "APPNAME is ${{ inputs.APPNAME}}"
          
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: false
          environment: azurecloud
          allow-no-subscriptions: false
          
      - name: Create self signed certs in Key Vault
        env:
          CERTNAMES: '["${{ inputs.APPNAME }}","openjdk-demo-service"]'
        run: |
            RG='${{ inputs.RG }}'
            AKVNAME='${{ inputs.AKVNAME}}'
            
            echo $CERTNAMES | jq -r '.[]' | while read cert; do
             echo "creating $cert"; 
             COMMON_NAME=$cert;
             az keyvault certificate create --vault-name $AKVNAME -n $COMMON_NAME -p "$(az keyvault certificate get-default-policy | sed -e s/CN=CLIGetDefaultPolicy/CN=${COMMON_NAME}/g )";
            done
            
            sleep 2m
            
      - name: Create Root Cert references in AppGW
        env:
          CERTNAMES: '["${{ inputs.APPNAME }}","openjdk-demo-service"]'
        id: AppGwRootCert
        run: |
          AGNAME='${{ inputs.AGNAME}}'
          RG='${{ inputs.RG }}'
          KVNAME='${{ inputs.AKVNAME}}'
          
          #debug
          az network application-gateway show -n $AGNAME -g $RG
          az network application-gateway root-cert list -g $RG --gateway-name $AGNAME --query "[].name"
          
          echo $CERTNAMES | jq -r '.[]' | while read cert; do
             echo "getting id for $cert"; 
             versionedSecretId=$(az keyvault certificate show -n $cert --vault-name $KVNAME --query "sid" -o tsv);
             unversionedSecretId=$(echo $versionedSecretId | cut -d'/' -f-5) # remove the version from the url;
             echo $unversionedSecretId;
             rootcertcmd="az network application-gateway root-cert create --gateway-name $AGNAME  -g $RG -n $cert --keyvault-secret $unversionedSecretId";
             $rootcertcmd || $rootcertcmd --verbose
          done

      - name: Confirm certificates registered in AppGw
        run: |
          AGNAME='${{ inputs.AGNAME}}'
          RG='${{ inputs.RG }}'
          
          az network application-gateway root-cert list -g $RG --gateway-name $AGNAME --query "[].name"

      - name: AKS Connect
        env:
          RG: "${{ inputs.RG }}"
          AKSNAME: "${{ inputs.AKSNAME }}"
        run: |
          az aks get-credentials -n $AKSNAME -g $RG --admin --overwrite-existing
          
      - name: Kubectl
        run: |
          kubectl version
          
      - name: Observe Existing DNSConfig
        env:
          DNSDOMAIN: "${{ inputs.DNSDOMAIN }}"
          DNSRG: "${{ inputs.DNSRG }}"
          RECORDNAME: "${{ inputs.DNSRECORDNAME }}"
        run: |
          az network dns record-set list -g $DNSRG -z $DNSDOMAIN --query "[?name=='$RECORDNAME'][{type:type,fqdn:fqdn,aRecords:aRecords,txtRecords:txtRecords}]"

      - name: Grab some Helm charts to install
        run: |
          git clone https://github.com/Gordonby/minihelm.git helmcharts

      - name: Add a azure-config secret for use with externaldns
        env:
          DNSRESOURCEGROUP: "${{ inputs.DNSRG }}"
          RG: "${{ inputs.RG }}"
          AKSNAME: "${{ inputs.AKSNAME }}"
        run: |
          echo "AKS $AKSNAME"
          echo $DNSRESOURCEGROUP

          KubeletId=$(az aks show -n $AKSNAME -g  $RG --query "identityProfile.kubeletidentity.clientId" -o tsv)
          TenantId=$(az account show --query tenantId -o tsv)
          SubscriptionId=$(az account show --query id -o tsv)

          JSONSECRETPATH="azure.json"
          cat<<EOF>$JSONSECRETPATH
          {
            "userAssignedIdentityID": "$KubeletId",
            "tenantId": "$TenantId",
            "useManagedIdentityExtension": true,
            "subscriptionId": "$SubscriptionId",
            "resourceGroup": "$DNSRESOURCEGROUP"
          }
          EOF
          
          kubectl create secret generic azure-config-file --dry-run=client -o yaml --from-file=azure.json | kubectl apply -f -

      - name: Add external dns config
        env:
          DOMAINFILTER: "${{ inputs.DNSDOMAIN }}"
        run: |
          echo $DOMAINFILTER
          helm upgrade --install externaldns ./helmcharts/samples/externaldns --set externaldns.domainfilter="$DOMAINFILTER"

      - name: Check DNS config
        env:
          DNSDOMAIN:  "${{ inputs.DNSDOMAIN }}"
          DNSRG: "${{ inputs.DNSRG }}"
          RECORDNAME: "${{ inputs.DNSRECORDNAME }}"
        run: |
          az network dns record-set list -g $DNSRG -z $DNSDOMAIN --query "[?name=='$RECORDNAME'][{type:type,fqdn:fqdn,aRecords:aRecords,txtRecords:txtRecords}]"

      - name: Install Cert Manager
        env:
          MANIFESTTESTURL: "https://github.com/jetstack/cert-manager/releases/download/v1.5.3/cert-manager.yaml"
        run: |
          kubectl apply -f $MANIFESTTESTURL
          sleep 1m

      - name: Install ClusterIssuer
        env:
          EMAILAD: "gdogg@microsoft.com"
        run: |
          echo "Email Address for Lets Encrypt: $EMAILAD"
          helm upgrade --install smokecertissuer ./helmcharts/samples/certmanagerissuer --set email=$EMAILAD

      - name: Verify ClusterIssuer
        env:
          EMAILAD: "gdogg@microsoft.com"
        run: |
          sleep 1m          
          kubectl describe clusterissuer letsencrypt-staging

      - name: Install the Java sample app
        env:
          NAMESP: "default"
          CERTNAME: "${{ inputs.APPNAME }}"
          DOMAINSUFFIX: "${{ inputs.DNSDOMAIN }}"
          DOMAINPREFIX: "${{ inputs.APPNAME }}"
          
        run: |
          # REF: https://github.com/khowling/e2e-tls-java-aks
          
          AKSNAME='${{ inputs.AKSNAME}}'
          RG='${{ inputs.RG }}'
          KVNAME='${{ inputs.AKVNAME}}'
          KVNAMELOWER=${KVNAME,,}
          KVTENANT=$(az account show --query tenantId -o tsv)
          AGNAME='${{ inputs.AGNAME}}'
          AKSNAME='${{ inputs.AKSNAME}}'
          DNSNAME=${DOMAINPREFIX}.${DOMAINSUFFIX}

          echo 'Get the identity created from the KeyVaultSecret Addon'
          export CSISECRET_CLIENTID=$(az aks show -g $RG --name $AKSNAME --query addonProfiles.azureKeyvaultSecretsProvider.identity.clientId -o tsv)
          echo $CSISECRET_CLIENTID
          
          helm upgrade --install ${{ inputs.APPNAME }} ./helmcharts/samples/javatlsapp --set nameOverride="${{ inputs.APPNAME }}",csisecrets.vaultname="${KVNAMELOWER}",csisecrets.tenantId="${KVTENANT}",csisecrets.clientId="${CSISECRET_CLIENTID}",dnsname="${DNSNAME}" --dry-run
          helm upgrade --install ${{ inputs.APPNAME }} ./helmcharts/samples/javatlsapp --set nameOverride="${{ inputs.APPNAME }}",csisecrets.vaultname="${KVNAMELOWER}",csisecrets.tenantId="${KVTENANT}",csisecrets.clientId="${CSISECRET_CLIENTID}",dnsname="${DNSNAME}"

      - name: Verify LetsEncrypt Certificate logs
        run: |
          sleep 1m
          kubectl describe cert

      - name: Verify Java App is reachable
        env:
          NAMESP: "default"
          INGNAME: "${{ inputs.APPNAME }}-ingress"
          URLTOHIT: "https://${{ inputs.APPNAME }}.${{ inputs.DNSDOMAIN }}"
        run: |
          sleep 2m #Give everything a chance to work
        
          kubectl get po -n  $NAMESP
          kubectl get svc -n  $NAMESP
          kubectl get ingress -n  $NAMESP
          
          echo "Getting public ip"
          pubId=$(kubectl get ing -n $NAMESP $INGNAME -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "Public ip : $pubId"
          echo "URL to hit: $URLTOHIT"
          
          respcode=$(curl -X GET --insecure --write-out %{http_code} --silent --output /dev/null $URLTOHIT)
          echo $respcode   
          
          #TODO: This is going to need to be rewritten. #loopshambles
          #SSH'ing on the runner shows this works, sometimes it just takes ages
          #Needs to be investigated.
          if [ "$respcode" != "200" ];
          then
              echo "going to need to wait longer i guess?"
              sleep 3m
              
              respcode=$(curl -X GET --insecure --write-out %{http_code} --silent --output /dev/null $URLTOHIT)
              echo $respcode    
              
              if [ "$respcode" != "200" ];
              then
                echo "going to need to wait EVEN longer i guess?  (wtf)"
                sleep 3m
                respcode=$(curl -X GET --insecure --write-out %{http_code} --silent --output /dev/null $URLTOHIT)
                echo $respcode    
                if [ "$respcode" != "200" ];
                then
                  echo "Non 200 response code from app - Raising error"
                  exit 1
                fi
              fi
          fi
          
          curl --insecure $URLTOHIT

      - name: Observe Existing DNSConfig
        if: failed() || ${{ inputs.DOVERIFYSTEPS }}
        env:
          DNSDOMAIN: "${{ inputs.DNSDOMAIN }}"
          DNSRG: "${{ inputs.DNSRG }}"
          RECORDNAME: "${{ inputs.DNSRECORDNAME }}"
        run: |
          az network dns record-set list -g $DNSRG -z $DNSDOMAIN --query "[?name=='$RECORDNAME'][{type:type,fqdn:fqdn,aRecords:aRecords,txtRecords:txtRecords}]"

      - name: Verify Frontend Certificate
        env:
          URLTOHIT: "https://${{ inputs.APPNAME }}.${{ inputs.DNSDOMAIN }}"
        run: |
          curl --insecure -vvI $URLTOHIT 2>&1 | awk 'BEGIN { cert=0 } /^\* SSL connection/ { cert=1 } /^\*/ { if (cert) print }'

      - name: Cleanup app
        env:
          APPNAME: "${{ inputs.APPNAME }}"
        run: helm uninstall $APPNAME

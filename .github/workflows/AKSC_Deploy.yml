name: Deploy AKS-Construction

on:
  workflow_call:
    inputs:
      environment:
        description: 'Which GitHub Environment to deploy to'
        required: false
        type: string
      templateVersion:
        description: 'Template Version'
        required: false
        default: '0.9.2'
        type: string
      rg:
        description: 'Resource Group name'
        required: true
        type: string
      resourceName:
        description: 'Unique name that all your resources will be based on'
        required: true
        type: string
      templateParamFile:
        description: 'Template parameters file'
        required: false
        type: string
      templateParams:
        description: 'Template parameters, space seperated key=value'
        required: false
        default: ''
        type: string
      postScriptParams:
        description: 'Template parameters, comma seperated key=value'
        required: false
        type: string
      postScriptInvokeCommand:
        description: 'Use invoke (run) command for postscript execution (suitable for Private Clusters)'
        required: false
        default: false
        type: boolean
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      USER_OBJECT_ID:
        required: false
      DNS_ZONE_ID:
        required: false
    outputs:
      AKSNAME:
        description: "The AKS Cluster name"
        value: ${{ jobs.Deploy-AKSC.outputs.AKSNAME }}
      ACRNAME:
        description: "The Container Registry name"
        value: ${{ jobs.Deploy-AKSC.outputs.ACRNAME }}

permissions:
  id-token: write
  contents: read

concurrency: "${{ inputs.environment }}-${{ inputs.rg }}"

jobs:
  Deploy-AKSC:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      AKSNAME: ${{ steps.deployAks.outputs.AKSNAME }}
      ACRNAME: ${{ steps.deployAks.outputs.ACRNAME }}
      AKVNAME: ${{ steps.deployAks.outputs.AKVNAME }}
      AGNAME: ${{ steps.deployAks.outputs.AGNAME }}
    steps:
      # Login to Azure
    - uses: azure/login@v1.4.6
      name: Initial Login to Azure to Deploy
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}


    - name: Prepare params (string token replacements)
      id: paramPrep
      env:
        templateParams: "${{ inputs.templateParams}}"
      run: |
        echo "Replacing params with secrets in param string $templateParams"
      
        if [[ "$templateParams" == *"_USER_OBJECT_ID_"* ]]; then
          echo "Token _USER_OBJECT_ID_ found for secret reference replacement"

          if [ -n "${{ secrets.USER_OBJECT_ID }}" ] #Is the secret accessible?
          then
            echo "Substitute _USER_OBJECT_ID_ placeholder value with real guid from secret"
            templateParams=${templateParams//=_USER_OBJECT_ID_/=${{ secrets.USER_OBJECT_ID }}}
          else
            echo "Secret USER_OBJECT_ID not found in environment ${{ inputs.environment }}"
          fi
        fi
        if [[ "$templateParams" == *"_DNS_ZONE_ID_"* ]]; then
          echo "Token _DNS_ZONE_ID_ found for secret reference replacement"

          if [ -n "${{ secrets.DNS_ZONE_ID }}" ] #Is the secret accessible?
          then
            echo "Substitute _DNS_ZONE_ID_ placeholder value with real value from secret"
            templateParams=${templateParams//=_DNS_ZONE_ID_/=${{ secrets.DNS_ZONE_ID }}}
          else
            echo "Secret DNS_ZONE_ID not found in environment ${{ inputs.environment }}"
          fi
        fi

        echo "Setting output param string $templateParams"
        echo "templateParams=$templateParams" >> $GITHUB_OUTPUT

      # Deploy Bicep file
    - name: Deploy Bicep
      id: deployAks
      env:
        templateParams: ${{ steps.paramPrep.outputs.templateParams}} #"${{ inputs.templateParams}}"
      run: |
        echo "Creating deployment ${{ inputs.resourceName }} using params $templateParams and AKSC ${{ inputs.templateVersion }}"
        
        DeployOut=($(az deployment group create -g ${{ inputs.rg }} -n ${{ inputs.resourceName }} --template-uri https://github.com/Azure/AKS-Construction/releases/download/${{ inputs.templateVersion }}/main.json --query "[properties.outputs.aksClusterName.value,properties.outputs.containerRegistryName.value]" -o tsv --parameters ${{ inputs.templateParamFile}} automatedDeployment=true $templateParams))

        aksClusterName=${DeployOut[0]}
        containerRegistryName=${DeployOut[1]}
        keyvaultName=${DeployOut[2]}
        appGatewayName=${DeployOut[3]}

        echo "aksClusterName returned from az deployment = $aksClusterName"
        echo "containerRegistryName returned from az deployment = $containerRegistryName"
        
        echo "AKSNAME=$aksClusterName" >> $GITHUB_OUTPUT
        echo "ACRNAME=$containerRegistryName" >> $GITHUB_OUTPUT
        echo "AKVNAME=$keyvaultName" >> $GITHUB_OUTPUT
        echo "AGNAME=$appGatewayName" >> $GITHUB_OUTPUT

      # Re-Login to Azure if we're using the AKS RUN COMMAND
    - uses: azure/login@v1.4.6
      name: Initial Login to Azure to Deploy
      if: inputs.postScriptParams && inputs.postScriptInvokeCommand == true
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Kubelogin
      if: inputs.postScriptParams && inputs.postScriptInvokeCommand == false
      env:
        kubeloginversion: 'v0.0.20'
      run: |
        az aks get-credentials -n ${{ steps.deployAks.outputs.AKSNAME }} -g ${{ inputs.rg }} --overwrite-existing

        wget https://github.com/Azure/kubelogin/releases/download/${{ env.kubeloginversion }}/kubelogin-linux-amd64.zip
        unzip kubelogin-linux-amd64.zip
        sudo mv bin/linux_amd64/kubelogin /usr/bin
        kubelogin convert-kubeconfig -l azurecli

    - name: Post Deploy
      if: inputs.postScriptParams
      env:
        postScriptParams: "${{ inputs.postScriptParams }}"
      run: |
        if [[ "$postScriptParams" == *"_DNS_ZONE_ID_"* ]]; then
          echo "Token _DNS_ZONE_ID_ found for secret reference replacement"

          if [ -n "${{ secrets.DNS_ZONE_ID }}" ] #Is the secret accessible?
          then
            echo "Substitute _DNS_ZONE_ID_ placeholder value with real value from secret"
            postScriptParams=${postScriptParams//=_DNS_ZONE_ID_/=${{ secrets.DNS_ZONE_ID }}}
          else
            echo "Secret DNS_ZONE_ID not found in environment ${{ inputs.environment }}"
          fi
        fi

        postcmd="curl -sL https://github.com/Azure/AKS-Construction/releases/download/${{ inputs.templateVersion }}/postdeploy.sh | bash -s -- -r https://github.com/Azure/AKS-Construction/releases/download/${{ inputs.templateVersion }} -p KubeletId=$(az aks show -n ${{ steps.deployAks.outputs.AKSNAME }} -g ${{ inputs.rg }} --query identityProfile.kubeletidentity.clientId -o tsv),TenantId=${{ secrets.AZURE_TENANT_ID }},$postScriptParams"

        if ${{ inputs.postScriptInvokeCommand}}; then
          if [ "${{ steps.deployAks.outputs.ACRNAME }}" ]; then
            postcmd="${postcmd},acrName=${{ steps.deployAks.outputs.ACRNAME }}"
          fi
          az aks command invoke -g ${{ inputs.rg }} -n ${{ steps.deployAks.outputs.AKSNAME }}  --command "$postcmd"
        else
          eval $postcmd
        fi

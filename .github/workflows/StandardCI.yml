name: AksStandardCI
# Credential prerequisites
# 1. IAM Owner on the Resource Group you're deploying into (we're making role assignments)
# 2. IAM Owner on the Vnet (we're making role assignments)

on:
  workflow_dispatch:

  push:
    paths:
      - ".github/workflows/StandardCI.yml"
      - "bicep/*"

  pull_request:
    branches: [main]
    paths:
      - "bicep/*"
      - ".github/workflows/StandardCI.yml"

  schedule:
    # At 11:00pm, every Tuesday week
    - cron: "0 23 * * 2"
env:
  RG: "Automation-Actions-AksDeployStanCI"
  ParamFilePath: ".github/workflows_dep/AksDeploy-Basic.parameters.json"
  RESNAME: "AksStan"
  DEPNAME: "Dep${{ github.run_number }}"

jobs:
  Validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Param check
        run: |
          RG='${{ env.RG }}'
          echo "RG is: $RG"

          echo "Param file path is: ${{ env.ParamFilePath }}"
          echo "Resource name is ${{ env.RESNAME }}
          echo "Deployment name is ${{ env.DEPNAME }}

      - name: Dependency check
        shell: pwsh
        run: |
          Write-Output "Checking parameter file existance/contents"
          $paramFilePath="${{ env.ParamFilePath }}"
          Test-Path $paramFilePath

          if (Test-Path $paramFilePath) {
            $paramFileContent=Get-Content $paramFilePath
            Write-Output $paramFileContent
          }

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: false
          environment: azurecloud
          allow-no-subscriptions: false

      - name: Verify Active Deployments
        id: activedeps
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |
            RG='${{ env.RG }}'
            RUNCOUNT=$(az deployment group list -g $RG --query "[?properties.provisioningState=='Running'].[properties.provisioningState, name] | length(@)" -o tsv)
            echo "Active deployments : $RUNCOUNT"

            echo 'Active deployment list'
            az deployment group list -g $RG --query "[?properties.provisioningState=='Running'].[properties.provisioningState, name]"

            #echo 'Verbose deployment list'
            #az deployment group list -g $RG --query "[].[properties.provisioningState, name]"

            echo "::set-output name=RUNCOUNT::$RUNCOUNT" #outputting for conditon

            if [ "$RUNCOUNT" -ne "0" ]
            then
              exit 1
            fi

      - name: Validate AKS
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |
            RG='${{ env.RG }}'
            RESNAME='${{ env.RESNAME }}'
            DEPNAME='Dep${{ github.run_number }}'
            az deployment group validate -f bicep/main.bicep -g $RG -p ${{ env.ParamFilePath }} -p resourceName=$RESNAME --verbose

      - name: What If
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |
            RG='${{ env.RG }}'
            RESNAME='${{ env.RESNAME }}'
            DEPNAME='Dep${{ github.run_number }}'
            az deployment group what-if -f bicep/main.bicep -g $RG -p ${{ env.ParamFilePath }} -p resourceName=$RESNAME --verbose

  Deploy:
    runs-on: ubuntu-latest
    needs: [Validation]
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/develop'
    environment: azurecirgs
    outputs:
      AKSNAME: ${{ steps.deployAks.outputs.AKSNAME}}
    steps:
      - uses: actions/checkout@v2

      - name: Param check
        run: |
          RG='${{ env.RG }}'
          echo "RG is: $RG"

          echo "Param file path is: ${{ env.ParamFilePath }}"
          echo "Resource name is ${{ env.RESNAME }}
          echo "Deployment name is ${{ env.DEPNAME }}

      - name: Dependency check
        shell: pwsh
        run: |
          Write-Output "Checking parameter file existance/contents"
          $paramFilePath="${{ env.ParamFilePath }}"
          Test-Path $paramFilePath

          if (Test-Path $paramFilePath) {
            $paramFileContent=Get-Content $paramFilePath
            Write-Output $paramFileContent
          }

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: false
          environment: azurecloud
          allow-no-subscriptions: false

      - name: Deploy AKS
        id: deployAks
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |
            RG='${{ env.RG }}'
            RESNAME='${{ env.RESNAME }}'
            DEPNAME='Dep${{ github.run_number }}'
            az deployment group create -f bicep/main.bicep -g $RG -p ${{ env.ParamFilePath }} -p resourceName=$RESNAME --name $DEPNAME --verbose

            DEPSTATUS=$(az deployment operation group list --resource-group $RG --name $DEPNAME) #--query "[?properties.provisioningState=='Failed']"
            echo $DEPSTATUS

            #outputs
            AKSNAME=$(az deployment group show -n $DEPNAME -g $RG --query "properties.outputs.aksClusterName.value" -o tsv)
            echo "AKSName returned from az deployment = $AKSNAME"
            echo "::set-output name=AKSNAME::$AKSNAME" #outputting for conditon
            

      - name: Test Control Plane Config
        shell: pwsh
        run: |
          $RG='${{ env.RG }}'
          $AKSNAME='${{ steps.deployAks.outputs.AKSNAME}}'
          $paramFilePath="${{ env.ParamFilePath }}"
          $params = Get-Content $paramFilePath | ConvertFrom-Json

          Write-Output "Checking for User Assigned Identity in $AKSNAME"
          if($params.parameters.custom_vnet.value -eq $true) {
            $aksId=az aks show -n $AKSNAME -g $RG --query "identity.type" -o tsv
            write-output $aksId
            
            if($aksId -eq "UserAssigned"){
              Write-Output "UAI set correctly"
            } else {
              Write-Error "UAI not set properly"}
          }

  WorkloadAdd:
    runs-on: ubuntu-latest
    needs: [Deploy]
    environment: azurecirgs
    outputs:
      SIMWORKLOADIP: ${{ steps.simpleworkloadverify.outputs.SIMWORKLOADIP}}
    steps:
      - uses: actions/checkout@v2
      
      - name: Param check
        run: |
          RG='${{ env.RG }}'
          echo "RG is: $RG"
          
          echo "Param file path is: ${{ env.ParamFilePath }}"
          echo "Resource name is ${{ env.RESNAME }}
          echo "Deployment name is ${{ env.DEPNAME }}
          echo "AKS name is ${{ needs.Deploy.outputs.AKSNAME}}"
          
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          environment: azurecloud
          allow-no-subscriptions: false
          
      - name: AKS Connect
        run: |
          AKSNAME='${{ needs.Deploy.outputs.AKSNAME}}'
          az aks get-credentials -n $AKSNAME -g $RG --admin --overwrite-existing
          
      - name: Kubectl
        run: |
          #sudo az aks install-cli
          kubectl version
          
      - name: Deploy Simple Workload
        env:
          MANIFESTTESTURL: "https://raw.githubusercontent.com/Gordonby/AKS-K8S-Lab-L200/master/azure-vote-all-in-one-redis.yaml"
          NAMESP: "votey"
        run: |
            echo "Creating namespace $NAMESP"
            kubectl create namespace $NAMESP --dry-run=client -o yaml | kubectl apply -f -
          
            echo $MANIFESTTESTURL
            kubectl apply -f $MANIFESTTESTURL -n  $NAMESP
            
      - name: Verify Simple Workload
        id: simpleworkloadverify
        env:
          NAMESP: "votey"
        run: |
          sleep 2m #Give public ip a chance to be allocated
        
          kubectl get po -n  $NAMESP
          kubectl get svc -n  $NAMESP       
                    
          pubIp=$(kubectl get svc -n $NAMESP -o jsonpath='{.items[*].status.loadBalancer.ingress[0].ip}')
          echo $pubIp
          echo "::set-output name=SIMWORKLOADIP::$pubIp" #outputting for conditon
            
          curl $pubIp   
          
#      - name: Delete Simple Workload
#        env:
#          MANIFESTTESTURL: "https://raw.githubusercontent.com/Gordonby/AKS-K8S-Lab-L200/master/azure-vote-all-in-one-redis.yaml"
#          NAMESP: "votey"
#        run: |
#          kubectl delete -f $MANIFESTTESTURL -n  $NAMESP

  WorkloadTests:
    runs-on: ubuntu-latest
    needs: [Deploy,WorkloadAdd]
    environment: azurecirgs
    steps:
      - uses: actions/checkout@v2
      
      - name: Param check
        run: |
          RG='${{ env.RG }}'
          echo "RG is: $RG"
          
          #echo "SIMWORKLOADIP name is ${{ needs.Deploy.outputs.AKSNAME}}"
          echo "SIMWORKLOADIP name is ${{ needs.WorkloadAdd.outputs.SIMWORKLOADIP}}"
          echo "AKS name is ${{ needs.Deploy.outputs.AKSNAME}}"
          
      
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.3.0
        with:
          target: 'http://${{ needs.WorkloadAdd.outputs.SIMWORKLOADIP}}'


      - name: Check for High Priority Zap Alerts
        shell: pwsh
        run: |
          Write-Output "Check for Zap Json file"
          Test-Path report_json.json
          
          $zap = get-content report_json.json | ConvertFrom-Json
          Write-Output $zap
          
          $highAlerts = $zap.site.alerts | Where-Object {$_.riskcode -eq 3}
          $mediumAlerts = $zap.site.alerts | Where-Object {$_.riskcode -eq 2}

          #Define to suit your business.
          #I'm going high, so my CI tests pass, but usually you'd set this to 0
          $HighThreshold = 5
          $MediumThreshold = 10

          #raise error if high alerts are over threshold
          if ($highAlerts.count -gt $HighThreshold) {
              Write-Output "High Alerts Found"
              $highAlerts | Where-Object { Write-Output $_.alert }
              throw "High Alerts Found"
          }

          #raise error if medium alerts are over threshold
          if ($mediumAlerts.count -gt $MediumThreshold) {
            Write-Output "Medium Alerts Found"
            $highAlerts | Where-Object { Write-Output $_.alert }
            throw "Medium Alerts Found"
          }


#      - uses: actions/download-artifact@v2
#        with:
#          #name: zap-scan
#          path: zap#
#
#      - name: Display structure of downloaded files
#        run: ls -R#
#
#      - name: Check for Zap file
#        shell: pwsh
#        run: |
#          Write-Output "Check for Zap Json file"
#          Test-Path report_json.json
#          
#          $zap = get-content report_json.json | ConvertFrom-Json
#          Write-Output $zap


  Cleanup:
    runs-on: ubuntu-latest
    needs: [Validation, Deploy, WorkloadAdd, WorkloadTests]
    if: github.event_name == 'schedule'
    steps:
      #- uses: actions/checkout@v2

      - name: Param check
        run: |
          RG='${{ env.RG }}'
          echo "RG is: $RG"

          echo "Param file path is: ${{ env.ParamFilePath }}"
          echo "Resource name is ${{ env.RESNAME }}
          echo "Deployment name is ${{ env.DEPNAME }}

      - name: Dependency check
        shell: pwsh
        run: |
          Write-Output "Checking parameter file existance/contents"
          $paramFilePath="${{ env.ParamFilePath }}"
          Test-Path $paramFilePath

          if (Test-Path $paramFilePath) {
            $paramFileContent=Get-Content $paramFilePath
            Write-Output $paramFileContent
          }

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          environment: azurecloud
          allow-no-subscriptions: false

      - name: Install Pwsh modules
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name Az.Accounts
          Install-Module -Name Az.Resources

      - name: Cleanup
        shell: pwsh
        run: |
          $RG='${{ env.RG }}'

          # Get all ARM resources from all resource groups
          $rgToPurge = Get-AzResourceGroup -Name $RG
          try {
            #Remove all but public ip addresses
            Get-AzResource -ResourceGroupName $rgToPurge.ResourceGroupName | ? {$_.ResourceType -ne "Microsoft.Network/publicIPAddresses"} | Remove-AzResource -Force

            #Remove public ip addresses
            Get-AzResource -ResourceGroupName $rgToPurge.ResourceGroupName | ? {$_.ResourceType -eq "Microsoft.Network/publicIPAddresses"} | Remove-AzResource -Force

            #Final run to clean other dependant resources in parent-child graph
            Get-AzResource -ResourceGroupName $rgToPurge.ResourceGroupName | Remove-AzResource -Force
          }
          Catch #we're wanting to suppress failures in this step. If it fails to clean, the nightly automation will catch it.
          {
            write-output error
          }

name: InfraCI - Private cluster
# Credential prerequisites
# 1. IAM Owner on the Resource Group you're deploying into (we're making role assignments)
# 2. IAM Owner on the Vnet (we're making role assignments)

on:
  workflow_dispatch:
    
  push:
    paths: 
      - 'bicep/*'
      
  pull_request:
    branches: [ main ]
    paths: 
      - 'bicep/*'
      - ".github/workflows/ByoVnetPrivateCI.yml"
      
  schedule:
    # At 11:00pm, every Tuesday week
    - cron: '0 23 * * 2'
env:
  RG: 'Automation-Actions-AksDeployCI'
  ParamFilePath: ".github/workflows_dep/AksDeploy-ByoVnetPrivate.parameters.json"
  RESNAME: 'AksPriv'
  DEPNAME: 'DepPriv${{ github.run_number }}'
  AZCLIVERSION: 2.29.2 #Pinning to a specific AZ CLI version
  
concurrency: ci-${{ github.ref }}

jobs:
  Validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Param check
        run: |
          RG='${{ env.RG }}'
          echo "RG is: $RG"
          
          echo "Param file path is: ${{ env.ParamFilePath }}"
          echo "Resource name is ${{ env.RESNAME }}"
          echo "Deployment name is ${{ env.DEPNAME }}"
          echo "EventTrigger name is ${{github.event_name}}"
          echo "Actor name is ${{ github.actor}}"

      - name: Dependency check
        shell: pwsh
        run: |
          Write-Output "Checking parameter file existance/contents"
          $paramFilePath="${{ env.ParamFilePath }}"
          Test-Path $paramFilePath
          
          if (Test-Path $paramFilePath) {
            $paramFileContent=Get-Content $paramFilePath
            Write-Output $paramFileContent
          }
          
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds:  ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: false
          environment: azurecloud
          allow-no-subscriptions: false

      # PSRule does this cool thing where it traverse the parameter file through to the arm template
      # PSRule performs IaC recommendations of the template.
      # https://azure.github.io/PSRule.Rules.Azure/
      - name: PSRule - Analyze Azure parameter file
        uses: Microsoft/ps-rule@main
        continue-on-error: true #Setting this whilst PSRule gets bedded in, in this project
        with:
          modules: 'PSRule.Rules.Azure' 
          inputType: repository
          inputPath: "${{ env.ParamFilePath }}"
          baseline: 'Azure.GA_2021_09'
          prerelease: true
          
      - name: Verify No Active Deployments in RG
        id: activedeps
        uses: Azure/cli@1.0.4
        with:
          azcliversion: ${{ env.AZCLIVERSION }}
          inlineScript: |
            RG='${{ env.RG }}'
            RUNCOUNT=$(az deployment group list -g $RG --query "[?properties.provisioningState=='Running'].[properties.provisioningState, name] | length(@)" -o tsv)
            echo "Active deployments : $RUNCOUNT"
            
            echo 'Active deployment list'
            az deployment group list -g $RG --query "[?properties.provisioningState=='Running'].[properties.provisioningState, name]"
            
            #echo 'Verbose deployment list'
            #az deployment group list -g $RG --query "[].[properties.provisioningState, name]"
            
            echo "::set-output name=RUNCOUNT::$RUNCOUNT" #outputting for conditon
            
            if [ "$RUNCOUNT" -ne "0" ]
            then
              exit 1
            fi
            
      - name: Validate AKS
        uses: Azure/cli@1.0.4
        with:
          azcliversion: ${{ env.AZCLIVERSION }}
          inlineScript: |
            RG='${{ env.RG }}'
            RESNAME='${{ env.RESNAME }}'
            DEPNAME='${{ env.DEPNAME }}'
            az deployment group validate -f bicep/main.bicep -g $RG -p ${{ env.ParamFilePath }} -p resourceName=$RESNAME byoAKSSubnetId=${{ secrets.ByoAksSubnetId }} byoAGWSubnetId=${{ secrets.ByoAgwSubnetId }}  --verbose
            
      - name: What If
        uses: Azure/cli@1.0.4
        with:
          azcliversion: ${{ env.AZCLIVERSION }}
          inlineScript: |
            RG='${{ env.RG }}'
            RESNAME='${{ env.RESNAME }}'
            DEPNAME='${{ env.DEPNAME }}'
            az deployment group what-if -f bicep/main.bicep -g $RG -p ${{ env.ParamFilePath }} -p resourceName=$RESNAME byoAKSSubnetId=${{ secrets.ByoAksSubnetId }} byoAGWSubnetId=${{ secrets.ByoAgwSubnetId }}  --verbose

  Deploy:
    runs-on: ubuntu-latest
    needs: [Validation]
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/develop'
    environment: azurecirgs
    outputs:
      AKSNAME: ${{ steps.deployAks.outputs.AKSNAME}}
      LANAME : ${{ steps.deployAks.outputs.LANAME}}
      LAWGUID : ${{ steps.deployAks.outputs.LAWGUID}}
    steps:
      - uses: actions/checkout@v2

      - name: Param check
        run: |
          RG='${{ env.RG }}'
          echo "RG is: $RG"
          
          echo "Param file path is: ${{ env.ParamFilePath }}"
          echo "Resource name is ${{ env.RESNAME }}"
          echo "Deployment name is ${{ env.DEPNAME }}"

      - name: Dependency check
        shell: pwsh
        run: |
          Write-Output "Checking parameter file existance/contents"
          $paramFilePath="${{ env.ParamFilePath }}"
          Test-Path $paramFilePath
          
          if (Test-Path $paramFilePath) {
            $paramFileContent=Get-Content $paramFilePath
            Write-Output $paramFileContent
          }
          
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds:  ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: false
          environment: azurecloud
          allow-no-subscriptions: false
          
      - name: Start Runner VM
        uses: Azure/cli@1.0.4
        with:
          azcliversion: ${{ env.AZCLIVERSION }}
          inlineScript: |
            #This is used in the next stage, if the VM is stopped we should start otherwise it'll never get picked up
            RunnerRG='Automation-Actions-Runner'
            RunnerVM='GHRunnerWE'

            az vm start --name $RunnerVM --no-wait --resource-group $RunnerRG
            
      - name: Deploy AKS
        id:  deployAks
        uses: Azure/cli@1.0.4
        with:
          azcliversion: ${{ env.AZCLIVERSION }}
          inlineScript: |
            RG='${{ env.RG }}'
            RESNAME='${{ env.RESNAME }}'
            DEPNAME='${{ env.DEPNAME }}'
            az deployment group create -f bicep/main.bicep -g $RG -p ${{ env.ParamFilePath }} -p resourceName=$RESNAME byoAKSSubnetId=${{ secrets.ByoAksSubnetId }} byoAGWSubnetId=${{ secrets.ByoAgwSubnetId }}  --name $DEPNAME --verbose
            
            DEPSTATUS=$(az deployment operation group list --resource-group $RG --name $DEPNAME) #--query "[?properties.provisioningState=='Failed']"
            echo $DEPSTATUS
            
            #outputs
            AKSNAME=$(az deployment group show -n $DEPNAME -g $RG --query "properties.outputs.aksClusterName.value" -o tsv)
            echo "::set-output name=AKSNAME::$AKSNAME" #outputting for conditon
            
            AGNAME=$(az deployment group show -n $DEPNAME -g $RG --query "properties.outputs.applicationGatewayName.value" -o tsv)
            echo "::set-output name=AGNAME::$AGNAME" #outputting for conditon
            
            LANAME=$(az deployment group show -n $DEPNAME -g $RG --query "properties.outputs.logAnalyticsName.value" -o tsv)
            echo "::set-output name=LANAME::$LANAME" #outputting for conditon
            
            LAWGUID=$(az deployment group show -n $DEPNAME -g $RG --query "properties.outputs.logAnalyticsGuid.value" -o tsv)
            echo "::set-output name=LAWGUID::$LAWGUID" #outputting for conditon
            
            
      - name: Enable AGIC Addon
        uses: Azure/cli@1.0.4
        with:
          azcliversion: ${{ env.AZCLIVERSION }}
          inlineScript: |          
            RG='${{ env.RG }}'
            AKSNAME='${{ steps.deployAks.outputs.AKSNAME}}'
            AGNAME='${{ steps.deployAks.outputs.AGNAME}}'
            
            echo "AKS $AKSNAME"
            echo "AG $AGNAME"
            
            echo "Checking if ingressApplicationGateway is enabled"
            AGICEnabled=$(az aks show -n $AKSNAME -g  $RG --query "addonProfiles.ingressApplicationGateway.enabled")
            echo "AGICEnabled = $AGICEnabled"
            
            if [ "$AGICEnabled" != "true" ];
            then
                az aks enable-addons -n $AKSNAME -g $RG -a ingress-appgw --appgw-id $(az network application-gateway show -g $RG -n $AGNAME --query id -o tsv)
            fi
            
      - name: Fast alerting experience
        uses: Azure/cli@1.0.4
        with:
          azcliversion: ${{ env.AZCLIVERSION }}
          inlineScript: |          
            RG='${{ env.RG }}'
            AKSNAME='${{ steps.deployAks.outputs.AKSNAME}}'
            LANAME='${{ steps.deployAks.outputs.AGNAME}}'
            
            echo "AKS $AKSNAME"
            echo "LA $LANAME"
            
            if [ "true" == "true" ];
            then
                AKSRESID=$(az aks show -g $RG  -n $AKSNAME --query id -o tsv)
                LAID=$(az aks show -g $RG -n $AKSNAME --query "[addonProfiles.omsagent.identity.clientId]" -o tsv)
                az role assignment create  --assignee-object-id $LAID --assignee-principal-type "ServicePrincipal" --scope $AKSRESID --role "Monitoring Metrics Publisher"
            fi

  WorkloadAdd:
    runs-on: [self-hosted, linux]
    needs: [Deploy]
    environment: azurecirgs
    steps:
      - uses: actions/checkout@v2

      - name: Param check
        run: |
          RG='${{ env.RG }}'
          echo "RG is: $RG"
          
          echo "Param file path is: ${{ env.ParamFilePath }}"
          echo "Resource name is ${{ env.RESNAME }}"
          echo "Deployment name is ${{ env.DEPNAME }}"
          echo "AKS name is ${{ needs.Deploy.outputs.AKSNAME}}"
          
          whoami
          
          az version

      - name: Azure Login MSI
        run: |
          az login --identity

      - name: AKS Connect
        run: |
          AKSNAME='${{ needs.Deploy.outputs.AKSNAME}}'
          az aks get-credentials -n $AKSNAME -g $RG --admin --overwrite-existing
          
      - name: Kubectl
        run: |
          #sudo az aks install-cli
          kubectl version
          
      - name: Deploy AGIC Public Facing Workload
        env:
          MANIFESTTESTURL: "https://raw.githubusercontent.com/Gordonby/Snippets/master/AKS/Azure-Vote-Labelled-ILB-AGIC-NetPolicy.yaml"
          NAMESP: "default"
        run: |
          kubectl create namespace $NAMESP --dry-run=client -o yaml | kubectl apply -f -
          
          echo $MANIFESTTESTURL
          kubectl apply -f $MANIFESTTESTURL -n  $NAMESP

          kubectl get po -n  $NAMESP
          kubectl get svc -n  $NAMESP
          kubectl get ingress -n  $NAMESP
          
      - name: Verify AGIC Public Facing Workload
        env:
          NAMESP: "default"
        run: |
          sleep 2m #Give everything a chance to work
        
          kubectl get po -n  $NAMESP
          kubectl get svc -n  $NAMESP
          kubectl get ingress -n  $NAMESP
          
          pubIp=$(kubectl get ing -n $NAMESP -o jsonpath='{.items[*].status.loadBalancer.ingress[0].ip}')
          echo $pubIp
          
          curl -o /dev/null -s -w "%{http_code}\n" $pubIp
          curl $pubIp       
          
      - name: Delete AGIC Public Facing Workload
        env:
          MANIFESTTESTURL: "https://raw.githubusercontent.com/Gordonby/Snippets/master/AKS/Azure-Vote-Labelled-ILB-AGIC-NetPolicy.yaml"
          NAMESP: "default"
        run: |
          kubectl delete -f $MANIFESTTESTURL -n  $NAMESP

      - name: Deploy AGIC Private Workload
        env:
          MANIFESTTESTURL: "https://raw.githubusercontent.com/Gordonby/Snippets/master/AKS/Azure-Vote-Labelled-ILB-AgicPrivate-NetPolicy.yaml"
          NAMESP: "default"
        run: |
          kubectl create -f $MANIFESTTESTURL -n  $NAMESP
          
      - name: Verify AGIC Private Workload
        env:
          NAMESP: "default"
        run: |
          sleep 2m #Give everything a chance to work
        
          kubectl get po -n  $NAMESP
          kubectl get svc -n  $NAMESP
          kubectl get ingress -n  $NAMESP
          
          echo "Getting private ip"
          privIp=$(kubectl get ing -n $NAMESP -o jsonpath='{.items[*].status.loadBalancer.ingress[0].ip}')
          echo "Private ip : $privIp"
          
          respcode=$(curl -o /dev/null -s -w "%{http_code}\n" $privIp)
          echo $respcode   
          
          #TODO: This is going to need to be rewritten. #loopshambles
          #SSH'ing on the runner shows this works, sometimes it just takes ages
          #Needs to be investigated.
          if [ "$respcode" != "200" ];
          then
              echo "going to need to wait longer i guess?"
              sleep 3m
              
              respcode=$(curl -o /dev/null -s -w "%{http_code}\n" $privIp)
              echo $respcode    
              
              if [ "$respcode" != "200" ];
              then
                echo "going to need to wait EVEN longer i guess?  (wtf)"
                sleep 6m

                respcode=$(curl -o /dev/null -s -w "%{http_code}\n" $privIp)
                echo $respcode    

                if [ "$respcode" != "200" ];
                then
                  echo "Non 200 response code from app - Raising error"
                  exit 1
                fi
              fi
          fi
          
          curl $privIp

  AppTests:
    runs-on: ubuntu-latest
    needs: [Deploy, WorkloadAdd]
    steps:
      - name: Param check
        run: |
          RG='${{ env.RG }}'
          echo "RG is: $RG"
          
          echo "Param file path is: ${{ env.ParamFilePath }}"
          echo "Resource name is ${{ env.RESNAME }}"
          echo "Deployment name is ${{ env.DEPNAME }}"
          echo "LA name is ${{ needs.Deploy.outputs.LANAME}}"

      - name: Application Insights log verification
        shell: pwsh
        run: |
          Write-Output "Check for Logs in the Log Analytics Workspace"
          $LANAME='${{ needs.Deploy.outputs.LANAME}}'
          $AKSNAME='${{ needs.Deploy.outputs.AKSNAME}}'
          
          #if LANAME != null
    
  InfraTests:
    runs-on: ubuntu-latest
    needs: [Deploy]
    steps:
      - name: Param check
        run: |
          RG='${{ env.RG }}'
          echo "RG is: $RG"
          
          echo "Param file path is: ${{ env.ParamFilePath }}"
          echo "Resource name is ${{ env.RESNAME }}"
          echo "Deployment name is ${{ env.DEPNAME }}"
          echo "LA name is ${{ needs.Deploy.outputs.LANAME}}"
          echo "LA workspace guid is ${{ needs.Deploy.outputs.LAWGUID}}"

      - name: Allow Monitoring extension
        shell: pwsh
        run: |
          az extension add -n log-analytics -y

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds:  ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          environment: azurecloud
          allow-no-subscriptions: false
          
      - name: Log Analytics log table verification
        shell: pwsh
        run: |
          Write-Output "Check for Logs in the Log Analytics Workspace"
          $LANAME='${{ needs.Deploy.outputs.LANAME}}'
          $LAWGUID='${{ needs.Deploy.outputs.LAWGUID}}'
          $AKSNAME='${{ needs.Deploy.outputs.AKSNAME}}'
          
          #$KubeNode = az monitor log-analytics query -w $LAWGUID --analytics-query "KubeNodeInventory | summarize count() by Computer, bin(TimeGenerated, 1h)"
          $KubeNode = az monitor log-analytics query -w $LAWGUID --analytics-query "KubeNodeInventory | count" -o json | ConvertFrom-Json
          Write-Output $KubeNode
          Write-Output $KubeNode[0].Count
          
          if ($KubeNode[0].Count -eq 0) {
            throw "Log Analytics Workspace table: KubeNodeInventory does not have any data. Check network traffic is not being supressed by firewall egress rules"
          }
          
          $containers = az monitor log-analytics query -w $LAWGUID --analytics-query "ContainerLog | join(KubePodInventory| where TimeGenerated > startofday(ago(1h))) on ContainerID |where TimeGenerated > startofday(ago(10m)) | project TimeGenerated ,Namespace , LogEntrySource , LogEntry | summarize count() by Namespace, LogEntrySource"
          Write-Output $containers
          
  Cleanup:
    runs-on: ubuntu-latest
    needs: [Validation, Deploy, WorkloadAdd, InfraTests, AppTests]
    if: github.event_name == 'schedule'
    environment: azurecirgs
    steps:
      - name: Param check
        run: |
          RG='${{ env.RG }}'
          echo "RG is: $RG"
          
          echo "Param file path is: ${{ env.ParamFilePath }}"
          echo "Resource name is ${{ env.RESNAME }}"
          echo "Deployment name is ${{ env.DEPNAME }}"

      - name: Dependency check
        shell: pwsh
        run: |
          Write-Output "Checking parameter file existance/contents"
          $paramFilePath="${{ env.ParamFilePath }}"
          Test-Path $paramFilePath
          
          if (Test-Path $paramFilePath) {
            $paramFileContent=Get-Content $paramFilePath
            Write-Output $paramFileContent
          }
          
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds:  ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          environment: azurecloud
          allow-no-subscriptions: false

      - name: Install Pwsh modules
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name Az.Accounts
          Install-Module -Name Az.Resources
          
      - name: Cleanup
        shell: pwsh
        run: |
          $RG='${{ env.RG }}'

          # Get all ARM resources from all resource groups
          $rgToPurge = Get-AzResourceGroup -Name $RG
          try {
            #Remove all but public ip addresses
            Get-AzResource -ResourceGroupName $rgToPurge.ResourceGroupName | ? {$_.ResourceType -ne "Microsoft.Network/publicIPAddresses"} | Remove-AzResource -Force

            #Remove public ip addresses
            Get-AzResource -ResourceGroupName $rgToPurge.ResourceGroupName | ? {$_.ResourceType -eq "Microsoft.Network/publicIPAddresses"} | Remove-AzResource -Force

            #Final run to clean other dependant resources in parent-child graph
            Get-AzResource -ResourceGroupName $rgToPurge.ResourceGroupName | Remove-AzResource -Force
          }
          Catch #we're wanting to suppress failures in this step. If it fails to clean, the nightly automation will catch it.
          {
            write-output error
          }

name: InfraCI - Private cluster
# Credential prerequisites
# 1. IAM Owner on the Resource Group you're deploying into (we're making role assignments)
# 2. IAM Owner on the Vnet (we're making role assignments)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Which environment to deploy to'
        required: true
        default: "azurecirgs"
        type: environment
      ResourceGroup:
        description: 'Which Resource Group to deploy to'
        default: 'AksBicepAcc-Ci-PrivateCluster'
        type: string
        required: false
      region:
        description: 'Resource Deployment Region'
        default: 'UKWest'
        options:
          - "WestEurope"
          - "NorthEurope"
          - "EastUs"
          - "UKWest"
        type: choice
        required: false
      postDeployDelay:
        description: 'Pause interval, post deployment'
        default: '30s'
        type: string
        required: false
      doWellArchitected:
        description: 'Perform the Well Architected Framework assesment'
        default: false
        type: boolean
        required: false
      doDebugSteps:
        description: 'Run informational steps'
        default: true
        type: boolean
        required: false
      doVerifySteps:
        description: 'Run optional verify steps'
        default: true
        type: boolean
        required: false
      defaultdeny:
        description: 'Default Deny NetworkPolicy?'
        default: true
        type: boolean
        required: false

  push:
    paths:
      - 'bicep/*'

  pull_request:
    branches: [ main ]
    paths:
      - 'bicep/*'
      - ".github/workflows/ByoVnetPrivateCI.yml"

  schedule:
    # At 11:00pm, every Tuesday week
    - cron: '0 23 * * 2'

env:
  ParamFilePath: ".github/workflows_dep/AksDeploy-Private.parameters.json"
  DEPNAME: 'DepPriv${{ github.run_number }}'
  AZCLIVERSION: 2.36.0 #2.30.0 #Pinning to a specific AZ CLI version

concurrency: ci-${{ github.event.inputs.environment }}-${{ github.ref }}

jobs:
  Well_Architected:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    if:  github.event_name == 'pull_request' || github.event.inputs.doWellArchitected == 'true'
    steps:
      - uses: actions/checkout@v2

      # PSRule does this cool thing where it traverse the parameter file through to the arm template
      # PSRule performs IaC recommendations of the template.
      # https://azure.github.io/PSRule.Rules.Azure/
      - name: PSRule - Analyze Azure parameter file
        uses: Microsoft/ps-rule@main
        continue-on-error: true #Setting this whilst PSRule gets bedded in, in this project
        with:
          modules: 'PSRule.Rules.Azure'
          inputType: repository
          inputPath: "${{ env.ParamFilePath }}"

  Validation:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    if: ${{ !github.event.pull_request.head.repo.fork }}
    env: #Default values if GitHub event obj is empty (eg. Initiated by PR)
      RG: 'AksBicepAcc-Ci-PrivateCluster'
      RESNAME: 'Prv'
    outputs:
      RESOURCEGROUP:  ${{ steps.params.outputs.RESOURCEGROUP}}
      REGION: ${{ steps.params.outputs.REGION}}
      RESNAME: ${{ steps.params.outputs.NEWRESNAME}}

    steps:
      - uses: actions/checkout@v2

      - name: Job parameter check
        if: github.event.inputs.doVerifySteps == 'true'
        run: |
          echo "RG is: $RG"
          echo "Param file path is: ${{ env.ParamFilePath }}"
          echo "Resource name is ${{ env.RESNAME }}"
          echo "Deployment name is ${{ env.DEPNAME }}"
          echo "EventTrigger name is ${{github.event_name}}"
          echo "Default Deny is ${{ github.event.inputs.defaultdeny }}"

      - name: Arm Parameter file check
        if: github.event.inputs.doDebugSteps == 'true'
        shell: pwsh
        run: |
          Write-Output "Checking parameter file existance/contents"
          $paramFilePath="${{ env.ParamFilePath }}"
          Test-Path $paramFilePath

          if (Test-Path $paramFilePath) {
            $paramFileContent=Get-Content $paramFilePath
            Write-Output $paramFileContent
          }

      - name: Parameter Value Augmentation
        id: params
        run: |
            if [ -z "${{ github.event.inputs.region }}" ]
            then
              echo "Region parameter not available through GitHub event data, setting default"
              REGION="SwedenCentral"
            else
              echo "Region parameter found in GitHub event (${{ github.event.inputs.region }})"
              REGION="${{ github.event.inputs.region }}"
            fi
            echo $REGION
            echo "::set-output name=REGION::$REGION"

            if [ -z "${{ github.event.inputs.ResourceGroup }}" ]
            then
              echo "ResourceGroup parameter not available through GitHub event data, setting to default"
              echo $RG
              echo "::set-output name=RESOURCEGROUP::$RG"
            else
              echo "Resource Group parameter found in GitHub event (${{ github.event.inputs.ResourceGroup }})"
              echo "::set-output name=RESOURCEGROUP::${{ github.event.inputs.ResourceGroup }}"
            fi

            NEWRESNAME="$RESNAME${REGION:0:3}"
            echo "Setting new Resource Name $NEWRESNAME"
            echo "::set-output name=NEWRESNAME::$NEWRESNAME"

      - name: Azure Login
        uses: Azure/login@v1.4.3
        with:
          creds:  ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: false
          environment: azurecloud
          allow-no-subscriptions: false

      - name: Verify any active Azure Resource Group Deployments #These can mess up our deployment
        if: github.event.inputs.doDebugSteps == 'true'
        id: activedeps
        uses: Azure/cli@v1.0.6
        with:
          azcliversion: ${{ env.AZCLIVERSION }}
          inlineScript: |
            RUNCOUNT=$(az deployment group list -g $RG --query "[?properties.provisioningState=='Running'].[properties.provisioningState, name] | length(@)" -o tsv)
            echo "Active deployments : $RUNCOUNT"

            echo 'Active deployment list'
            az deployment group list -g $RG --query "[?properties.provisioningState=='Running'].[properties.provisioningState, name]"

            #echo 'Verbose deployment list'
            #az deployment group list -g $RG --query "[].[properties.provisioningState, name]"

            echo "::set-output name=RUNCOUNT::$RUNCOUNT" #outputting for conditon

            if [ "$RUNCOUNT" -ne "0" ]
            then
              exit 1
            fi

      - name: Validate Infrastructure deployment
        uses: Azure/cli@v1.0.6
        with:
          azcliversion: ${{ env.AZCLIVERSION }}
          inlineScript: |
            az deployment group validate -f bicep/main.bicep -g $RG -p ${{ env.ParamFilePath }} -p resourceName=${{ steps.params.outputs.NEWRESNAME}} location=${{ steps.params.outputs.REGION}}

      - name: What If
        if: github.event.inputs.doDebugSteps == 'true'
        uses: Azure/cli@v1.0.6
        continue-on-error: ${{ secrets.ISAZCLIWHATIFUNRELIABLE == 'true' }}
        with:
          azcliversion: ${{ env.AZCLIVERSION }}
          inlineScript: |
            az deployment group what-if -f bicep/main.bicep -g $RG -p ${{ env.ParamFilePath }} -p resourceName=${{ steps.params.outputs.NEWRESNAME}} location=${{ steps.params.outputs.REGION}}

  Deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: [Validation]
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/develop' || contains( github.event.pull_request.labels.*.name, 'test-deploy-privateconfig')
    outputs:
      AKSNAME: ${{ steps.deployAks.outputs.AKSNAME}}
      AGNAME: ${{ steps.deployAks.outputs.AGNAME}}
      LANAME : ${{ steps.deployAks.outputs.LANAME}}
      LAWGUID : ${{ steps.deployAks.outputs.LAWGUID}}
    env:
      RG: ${{ needs.Validation.outputs.RESOURCEGROUP }}
      REGION: ${{ needs.Validation.outputs.REGION }}
      RESNAME: ${{ needs.Validation.outputs.RESNAME }}
    steps:
      - uses: actions/checkout@v2

      - name: Job parameter check
        if: github.event.inputs.doVerifySteps == 'true'
        run: |
          echo "RG is: ${{ needs.Validation.outputs.RESOURCEGROUP }}"
          echo "(env)RG is: $RG"
          echo "Region is: ${{ needs.Validation.outputs.REGION }}"
          echo "(env)Region is $REGION"
          echo "Param file path is: ${{ env.ParamFilePath }}"
          echo "Resource name is ${{ env.RESNAME }}"
          echo "Deployment name is ${{ env.DEPNAME }}"

      - name: Parameter file dependency check
        if: github.event.inputs.doDebugSteps == 'true'
        shell: pwsh
        run: |
          Write-Output "Checking parameter file existance/contents"
          $paramFilePath="${{ env.ParamFilePath }}"
          Test-Path $paramFilePath

          if (Test-Path $paramFilePath) {
            $paramFileContent=Get-Content $paramFilePath
            Write-Output $paramFileContent
          }

      - name: Azure Login
        uses: Azure/login@v1.4.3
        with:
          creds:  ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          environment: azurecloud
          allow-no-subscriptions: false

      - name: Deploy Infrastructure
        id:  deployAks
        uses: Azure/cli@v1.0.6
        with:
          azcliversion: ${{ env.AZCLIVERSION }}
          inlineScript: |
            az deployment group create -f bicep/main.bicep -g $RG -p ${{ env.ParamFilePath }} -p resourceName=$RESNAME location=$REGION --name $DEPNAME --verbose

            DEPSTATUS=$(az deployment operation group list --resource-group $RG --name $DEPNAME) #--query "[?properties.provisioningState=='Failed']"
            echo $DEPSTATUS

            #outputs
            AKSNAME=$(az deployment group show -n $DEPNAME -g $RG --query "properties.outputs.aksClusterName.value" -o tsv)
            echo "::set-output name=AKSNAME::$AKSNAME"

            AGNAME=$(az deployment group show -n $DEPNAME -g $RG --query "properties.outputs.applicationGatewayName.value" -o tsv)
            echo "::set-output name=AGNAME::$AGNAME"

            LANAME=$(az deployment group show -n $DEPNAME -g $RG --query "properties.outputs.logAnalyticsName.value" -o tsv)
            echo "::set-output name=LANAME::$LANAME"

            LAWGUID=$(az deployment group show -n $DEPNAME -g $RG --query "properties.outputs.logAnalyticsGuid.value" -o tsv)
            echo "::set-output name=LAWGUID::$LAWGUID"

      - name: Post Deploy Delay
        run: sleep ${{ github.event.inputs.postDeployDelay }}

      - name: Enable AGIC Addon
        uses: Azure/cli@v1.0.6
        with:
          azcliversion: ${{ env.AZCLIVERSION }}
          inlineScript: |
            AKSNAME='${{ steps.deployAks.outputs.AKSNAME}}'
            AGNAME='${{ steps.deployAks.outputs.AGNAME}}'

            echo "AKS $AKSNAME"
            echo "AG $AGNAME"

            #TODO:Check AGNAME value to see if one was created

            echo "Checking if ingressApplicationGateway is enabled"
            AGICEnabled=$(az aks show -n $AKSNAME -g  $RG --query "addonProfiles.ingressApplicationGateway.enabled")
            echo "AGICEnabled = $AGICEnabled"

            if [ "$AGICEnabled" != "true" ];
            then
                az aks enable-addons -n $AKSNAME -g $RG -a ingress-appgw --appgw-id $(az network application-gateway show -g $RG -n $AGNAME --query id -o tsv)
            fi

      - name: Create Default Deny NetworkPolicy
        if: github.event.inputs.defaultdeny == 'true'
        run:
          AKSNAME='${{ steps.deployAks.outputs.AKSNAME}}'

          netpolicycmd="kubectl apply -f https://raw.githubusercontent.com/Azure/Aks-Construction/0.4.3/postdeploy/k8smanifests/networkpolicy-deny-all.yml";
          echo "Sending command $netpolicycmd to $AKSNAME in $RG";
          cmdOut=$(az aks command invoke -g $RG -n $AKSNAME -o json --command "${netpolicycmd}");
          echo $cmdOut;

      - name: Verify Default Deny NetworkPolicy
        if: github.event.inputs.defaultdeny == 'true' && github.event.inputs.doVerifySteps == 'true'
        run:
          AKSNAME='${{ steps.deployAks.outputs.AKSNAME}}'

          netpolicycmd="kubectl get networkpolicy -A";

          echo "Sending command $netpolicycmd to $AKSNAME in $RG";
          cmdOut=$(az aks command invoke -g $RG -n $AKSNAME -o json --command "${netpolicycmd}");
          echo $cmdOut;

  SetupWF:
    runs-on: ubuntu-latest
    needs: [Validation]
    env:
      RG: ${{ needs.Validation.outputs.RESOURCEGROUP }}
    outputs:
      RG: ${{ env.RG }}
      ENVIRONMENT: ${{ steps.CalcEnv.outputs.ENVIRONMENT }}
      #Uninstall: ${{ github.event.inputs.doSmokeTestUninstall }}
    steps:
      - name: Reusable workflow
        run: |
          echo "Resuable workflows can't be directly passed ENV/INPUTS (yet)"
          echo "So we need this job to be able to access the value in env.RG"
          echo "see https://github.community/t/reusable-workflow-env-context-not-available-in-jobs-job-id-with/206111"
      - name: Environment Parse
        id: CalcEnv
        run: |
          echo "${{ github.event.inputs.environment }}"
          GHENV="${{ github.event.inputs.environment }}"
          echo "::set-output name=ENVIRONMENT::$GHENV"

  SmokeTest_KnownGoodApp:
    needs: [SetupWF, Deploy]
    uses: ./.github/workflows/AppDeploy_AzureVote.yml
    with:
      Environment: ${{ needs.SetupWF.outputs.ENVIRONMENT }}
      RG: ${{ needs.SetupWF.outputs.RG }}
      AKSNAME: ${{ needs.Deploy.outputs.AKSNAME}}
      AGNAME: ${{ needs.Deploy.outputs.AGNAME}}
      APPNAME: azure-vote-public
      INGRESSTYPE: "AGIC-Public-Ingress"
      UNINSTALLAFTERVERIFY: false
      FORCEHELMCLEANINSTALL: true
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

  Troubleshoot:
    needs: [Deploy, SmokeTest_KnownGoodApp, SetupWF]
    uses: ./.github/workflows/AksTroubleshooting.yml
    if: always()
    with:
      environment: ${{ github.event.inputs.environment }}
      RG: ${{ needs.SetupWF.outputs.RG }} #Automation-Actions-AksDeployCI #'${{ env.RG }}' There seems to be an issue passing Env variables in reusable workflows
      AKSNAME: ${{needs.Deploy.outputs.AKSNAME}}
      AGNAME: ${{ needs.Deploy.outputs.AGNAME}}
      LANAME: ${{ needs.Deploy.outputs.LANAME}}
      LAWGUID: ${{ needs.Deploy.outputs.LAWGUID}}
      USERUNCMD: true
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

  Infra_Destroy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: [Validation, Deploy, Troubleshoot, SmokeTest_KnownGoodApp, Well_Architected]
    env:
      RG: ${{ needs.Validation.outputs.RESOURCEGROUP }}
    if: github.event_name == 'schedule'
    steps:
      - name: Job parameter check
        if: github.event.inputs.doVerifySteps == 'true'
        run: |
          echo "RG is: $RG"
          echo "Param file path is: ${{ env.ParamFilePath }}"
          echo "Resource name is ${{ env.RESNAME }}"
          echo "Deployment name is ${{ env.DEPNAME }}"

      - name: Azure Login
        uses: Azure/login@v1.4.3
        with:
          creds:  ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          environment: azurecloud
          allow-no-subscriptions: false

      - name: Install Pwsh modules
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name Az.Accounts
          Install-Module -Name Az.Resources

      - name: Cleanup
        shell: pwsh
        run: |
          $RG='${{ env.RG }}'

          # Get all ARM resources from all resource groups
          $rgToPurge = Get-AzResourceGroup -Name $RG
          try {
            #Remove all but public ip addresses
            Get-AzResource -ResourceGroupName $rgToPurge.ResourceGroupName | ? {$_.ResourceType -ne "Microsoft.Network/publicIPAddresses"} | Remove-AzResource -Force

            #Remove public ip addresses
            Get-AzResource -ResourceGroupName $rgToPurge.ResourceGroupName | ? {$_.ResourceType -eq "Microsoft.Network/publicIPAddresses"} | Remove-AzResource -Force

            #Final run to clean other dependant resources in parent-child graph
            Get-AzResource -ResourceGroupName $rgToPurge.ResourceGroupName | Remove-AzResource -Force
          }
          Catch #we're wanting to suppress failures in this step. If it fails to clean, the nightly automation will catch it.
          {
            write-output error
          }

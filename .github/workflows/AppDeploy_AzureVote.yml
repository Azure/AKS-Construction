on: 
  workflow_call:
    inputs:
      RG:
        required: true
        type: string
      AKSNAME:
        required: true
        type: string
      AGNAME:
        required: true
        type: string
      APPNAME:
        default: "azurevote"
        required: true
        type: string
      NAMESPACE:
        default: "default"
        required: true
        type: string
      INGRESSTYPE:
        default: "default"
        required: true
        type: string  # - 'PublicLoadBalancer'/InternalLoadBalancer/AGIC-Public-Ingress/AGIC-Private-Ingress
      UNINSTALLAFTERVERIFY:
        description: 'Uninstall app after tests  [yes|no]'  
        type: boolean
        default: true
    secrets:
      AZURE_CREDENTIALS:
        required: true
        
jobs:
  App_Create:
    runs-on: ubuntu-latest
    concurrency: ${{ inputs.AGNAME}} #AppGateway doesn't like concurrent updates
    steps:
      - uses: actions/checkout@v2
      
      - name: Job parameter inspection
        run: |
          echo "RG is ${{ inputs.RG }}"
          echo "AKS name is ${{ inputs.AKSNAME }}"
          
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: false
          environment: azurecloud
          allow-no-subscriptions: false

      - name: AKS Connect
        env:
          RG: "${{ inputs.RG }}"
          AKSNAME: "${{ inputs.AKSNAME }}"
        run: |
          az aks get-credentials -n $AKSNAME -g $RG --admin --overwrite-existing
          
      - name: Kubectl
        run: |
          #sudo az aks install-cli
          kubectl version

      - name: Grab Helm chart to install
        run: |
          BRANCH='${{ inputs.MINIHELMBRANCH }}'
          echo "$BRANCH"

          if [ -z "$BRANCH" ]
          then
                BRANCH='main'
          fi

          git clone -b $BRANCH https://github.com/Gordonby/minihelm.git helmcharts
          
      - name: Check if App Helm Chart already installed
        env:
          APPNAME: "${{ inputs.APPNAME }}"          
        run: |
          APPINSTALLED=$(helm list --filter ^$APPNAME$ --short)
          if [ -z "$APPINSTALLED" ]
          then
                echo "App not installed"
          else
                echo "App already installed, forcing uninstall"
                helm list --short
                helm uninstall $APPNAME
                sleep 1m
          fi

      - name: Install the Vote app
        env:
          NAMESP: "default"
          APPNAME: "${{ inputs.APPNAME }}" #Using backend cert common name
          DOMAINSUFFIX: "${{ inputs.DNSDOMAIN }}"
          
        run: |
          # REF: https://github.com/khowling/e2e-tls-java-aks
          
          AKSNAME='${{ inputs.AKSNAME}}'
          RG='${{ inputs.RG }}'
          APPNAME='${{ inputs.APPNAME }}'
          AGNAME='${{ inputs.AGNAME}}'
          
          helm upgrade --install $APPNAME ./helmcharts/samples/azurevote-simple --set service.azureLbInternal="false" --dry-run
          helm upgrade --install $APPNAME ./helmcharts/samples/azurevote-simple --set service.azureLbInternal="false"

      - name: Verify App is reachable
        env:
          NAMESP: "default"
          APPNAME: "${{ inputs.APPNAME }}"
        run: |
          echo "Waiting on IP allocation"
          sleep 1m
          
          pubIp=$(kubectl get ing -n $NAMESP azure-vote-ing -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "Public ip : $pubIp"
          
          counter=1
          while [ $counter -le 20 ] && [ "$respcode" != "200" ]
          do
            echo "curl $pubIp [$counter]"
            respcode=$(curl -o /dev/null -s -w "%{http_code}\n" $pubIp)
            echo $respcode   
            if [ "$respcode" != "200" ];
            then
                echo "going to wait another 30s [$counter] [$(date +"%T")]"
                ((counter++))
                sleep 30s
            fi
          done
          
          curl $pubIp

      - name: Cleanup app
        if: inputs.UNINSTALLAFTERVERIFY
        env:
          APPNAME: "${{ inputs.APPNAME }}"
        run: helm uninstall $APPNAME

on: 
  workflow_call:
    inputs:
      RG:
        required: true
        type: string
      AKSNAME:
        required: true
        type: string
      AGNAME:
        required: true
        type: string
      APPNAME:
        default: "azurevote"
        required: true
        type: string
      NAMESPACE:
        default: "default"
        required: true
        type: string
      INGRESSTYPE:
        default: "default"
        required: true
        type: string  # - 'PublicLoadBalancer'/InternalLoadBalancer/AGIC-Public-Ingress/AGIC-Private-Ingress
      UNINSTALLAFTERVERIFY:
        description: 'Uninstall app after tests  [yes|no]'  
        type: boolean
        default: true
    secrets:
      AZURE_CREDENTIALS:
        required: true
        
jobs:
  App_Create:
    runs-on: ubuntu-latest
    concurrency: ${{ inputs.AGNAME}} #AppGateway doesn't like concurrent updates
    steps:
      - uses: actions/checkout@v2
      
      - name: Job parameter inspection
        run: |
          echo "RG is ${{ inputs.RG }}"
          echo "AKS name is ${{ inputs.AKSNAME }}"
          
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: false
          environment: azurecloud
          allow-no-subscriptions: false

      - name: AKS Connect
        env:
          RG: "${{ inputs.RG }}"
          AKSNAME: "${{ inputs.AKSNAME }}"
        run: |
          az aks get-credentials -n $AKSNAME -g $RG --admin --overwrite-existing
          
      - name: Kubectl
        run: |
          #sudo az aks install-cli
          kubectl version

      - name: Grab Helm chart to install
        run: |
          BRANCH='${{ inputs.MINIHELMBRANCH }}'
          echo "$BRANCH"

          if [ -z "$BRANCH" ]
          then
                BRANCH='main'
          fi

          git clone -b $BRANCH https://github.com/Gordonby/minihelm.git helmcharts
          
      - name: Check if App Helm Chart already installed
        env:
          APPNAME: "${{ inputs.APPNAME }}"          
        run: |
          APPINSTALLED=$(helm list --filter ^$APPNAME$ --short)
          if [ -z "$APPINSTALLED" ]
          then
                echo "App not installed"
          else
                echo "App already installed, forcing uninstall"
                helm list --short
                helm uninstall $APPNAME
                sleep 1m
          fi

      - name: Install the Vote app
        env:
          NAMESP: "default"
          APPNAME: "${{ inputs.APPNAME }}" #Using backend cert common name
          DOMAINSUFFIX: "${{ inputs.DNSDOMAIN }}"
          
        run: |
          # REF: https://github.com/khowling/e2e-tls-java-aks
          
          AKSNAME='${{ inputs.AKSNAME}}'
          RG='${{ inputs.RG }}'
          APPNAME='${{ inputs.APPNAME }}'
          AGNAME='${{ inputs.AGNAME}}'
          
          helm upgrade --install $APPNAME ./helmcharts/samples/javatlsappv3 --set nameOverride="${APPNAME}",frontendCertificateSource="${CERTSOURCE}",csisecrets.vaultname="${KVNAMELOWER}",csisecrets.tenantId="${KVTENANT}",csisecrets.clientId="${CSISECRET_CLIENTID}",dnsname="${DNSNAME}",appgw.frontendCertificateName="${APPNAME}-fe",appgw.rootCertificateName="${APPNAME}",letsEncrypt.issuer="${LEISSUER}",letsEncrypt.secretname="${APPNAME}-tls" --dry-run
          helm upgrade --install $APPNAME ./helmcharts/samples/javatlsappv3 --set nameOverride="${APPNAME}",frontendCertificateSource="${CERTSOURCE}",csisecrets.vaultname="${KVNAMELOWER}",csisecrets.tenantId="${KVTENANT}",csisecrets.clientId="${CSISECRET_CLIENTID}",dnsname="${DNSNAME}",appgw.frontendCertificateName="${APPNAME}-fe",appgw.rootCertificateName="${APPNAME}",letsEncrypt.issuer="${LEISSUER},letsEncrypt.secretname="${APPNAME}-tls""

      - name: Verify App is reachable
        env:
          NAMESP: "default"
          APPNAME: "${{ inputs.APPNAME }}"
          URLTOHIT: "https://${{ inputs.APPNAME }}.${{ inputs.DNSDOMAIN }}"
        run: |
          echo "curl $URLTOHIT [$(date +"%T")]"
          curlcommand="curl --connect-timeout 2 --retry 25 --retry-delay 20 --no-keepalive --no-tcp-nodelay -X GET --insecure --write-out %{http_code} --silent --fail --output /dev/null $URLTOHIT -v --trace-time"
          respcode=$($curlcommand || sleep 1m; $curlcommand)
              
          echo $respcode   
          
          curl --insecure $URLTOHIT

      - name: Cleanup app
        if: inputs.UNINSTALLAFTERVERIFY
        env:
          APPNAME: "${{ inputs.APPNAME }}"
        run: helm uninstall $APPNAME

# Demonstrates how to install the Azure Voting app, leveraging the AKS Run Command.
# This works great for private clusters, but also works with regular clusters too.

name: AppDeploy - Azure Vote

on:
  workflow_call:
    inputs:
      Environment:
        required: true
        type: string
      RG:
        required: true
        type: string
      AKSNAME:
        required: true
        type: string
      AGNAME:
        default: ""
        required: true
        type: string
      APPNAME:
        required: true
        type: string
      NAMESPACE:
        default: "default"
        required: false
        type: string
      INGRESSTYPE:
        default: "PublicLoadBalancer" #'PublicLoadBalancer'/InternalLoadBalancer/AGIC-Public-Ingress/AGIC-Private-Ingress
        required: false
        type: string
      UNINSTALLAFTERVERIFY:
        description: 'Uninstall app after verifying it works'
        type: boolean
        default: false
        required: false
      FORCEHELMCLEANINSTALL:
        description: 'If App is already installed, remove explictly before install'
        type: boolean
        default: false
        required: false
      DEBUG:
        description: "Generate optional Debug Artifacts"
        type: boolean
        default: false
        required: false
      HELMPACKAGEURI:
        default: "https://github.com/Gordonby/minihelm/raw/main/samples/AzureVote-0.9.5.tgz"
        required: false
        type: string
        description: "The location of the Helm package"
      CURLRETRIES:
        description: 'How many retry attempts when verifying deployed App Url'
        type: number
        default: 10
        required: false
    secrets:
      AZURE_CREDENTIALS:
        required: true

jobs:
  App_Create:
    runs-on: ubuntu-latest
    environment: ${{ inputs.Environment }}
    concurrency: "Ag-${{ inputs.AGNAME}}" #AppGateway doesn't like concurrent updates
    env:
      APPNAME: "${{ inputs.APPNAME }}"
      NAMESP: "${{ inputs.NAMESPACE }}"
      AKSNAME: "${{ inputs.AKSNAME}}"
      RG: "${{ inputs.RG }}"
    steps:
      - uses: actions/checkout@v2

      - name: Job parameter inspection
        run: |
          echo "Environment is ${{ inputs.Environment }}"
          echo "RG is ${{ inputs.RG }}"
          echo "AKS name is ${{ inputs.AKSNAME }}"

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: false
          environment: azurecloud
          allow-no-subscriptions: false

      - name: Check for and uninstall the Vote app
        if: inputs.FORCEHELMCLEANINSTALL == true
        run: |

          command="helm list --namespace $NAMESP -o json -f $APPNAME"
          echo "Sending command $command to AKS"
          cmdOut=$(az aks command invoke -g $RG -n $AKSNAME -o json --command "${command}")
          echo $cmdOut

          voteAppInstalled=$(echo $cmdOut | jq -r '.logs' | jq 'length')
          echo "voteAppInstalled is $voteAppInstalled"

          if [ $voteAppInstalled -gt 0 ];
          then
            command="helm uninstall --namespace $NAMESP $APPNAME"
            echo "Sending command $command to AKS"
            cmdOut=$(az aks command invoke -g $RG -n $AKSNAME -o json --command "${command}")
            echo $cmdOut

            sleep 20s
          fi

      - name: Install the Vote app
        id: installapp
        env:
          HELMURI: '${{ inputs.HELMPACKAGEURI }}'
        run: |

          #This deployment maps a single input parameter to underlying parameters for the Helm Chart
          echo "${{ inputs.INGRESSTYPE }}"
          case "${{ inputs.INGRESSTYPE }}" in
          PublicLoadBalancer)
            serviceType="LoadBalancer"; privateIp=false; ingress=false ;;
          InternalLoadBalancer)
            serviceType="LoadBalancer"; privateIp=true; ingress=false ;;
          AGIC-Public-Ingress)
            serviceType="ClusterIP"; privateIp=false; ingress=true ;;
          AGIC-Private-Ingress)
            serviceType="ClusterIP"; privateIp=true; ingress=true ;;
          esac

          #Create a list of helm parameters to override
          helmsetparams="ingress.enabled=${ingress},ingress.appGwPrivateIp=$privateIp,front.service.azureLbInternal=$privateIp,front.service.type=\"$serviceType\""

          #Set step outputs, which are used in subsequent steps to ensure the app is working
          if [ $ingress == false ]; then echo "::set-output name=RESTYPE::svc"; else echo "::set-output name=RESTYPE::ing";  fi
          if [ $privateIp == false ]; then echo "::set-output name=ISPUBLIC::true"; else echo "::set-output name=ISPUBLIC::false";  fi

          #Helm Dry Run
          command="helm upgrade --namespace $NAMESP --create-namespace --install $APPNAME $HELMURI --set $helmsetparams --dry-run"
          echo "Sending command $command to AKS"
          cmdOut=$(az aks command invoke -g $RG -n $AKSNAME -o json --command "${command}")
          echo $cmdOut
          if [ "${{ inputs.DEBUG }}" == "true" ]; then echo $cmdOut > debugHelmDryRun.json; fi

          #Helm Install
          command="helm upgrade --namespace $NAMESP --create-namespace --install $APPNAME $HELMURI --set $helmsetparams -o json"
          echo "Sending command $command to AKS"
          cmdOut=$(az aks command invoke -g $RG -n $AKSNAME -o json --command "${command}")
          echo $cmdOut
          if [ "${{ inputs.DEBUG }}" == "true" ]; then echo $cmdOut > debugHelm.json; fi

          #Check Exit code from Run Command
          exitCode=$(echo $cmdOut | jq -r ".exitCode")
          echo $exitCode
          if [ "$exitCode" != "0" ]
          then
            echo "Error, non zero exit code.  $exitCode"
            #The command that executed inside the Run Command returned an error.
            echo $cmdout | jq -r ".logs"
            exit $exitCode
          fi

      - name: Checking deployment
        run: |
          command="kubectl get po -n $NAMESP"
          echo "Sending command $command to AKS"
          az aks command invoke -g $RG -n $AKSNAME -o json --command "${command}" | jq -r ".logs"

          command="kubectl get svc -n $NAMESP"
          echo "Sending command $command to AKS"
          az aks command invoke -g $RG -n $AKSNAME -o json --command "${command}"| jq -r ".logs"

          command="kubectl get ing -n $NAMESP"
          echo "Sending command $command to AKS"
          az aks command invoke -g $RG -n $AKSNAME -o json --command "${command}"| jq -r ".logs"

      - name: Wait for IP
        id: waitforip
        run: |

          #TODO: When the WAIT command is no longer experimental, shift to use that. REF: https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#wait

          echo "Invoking Get ${{ steps.installapp.outputs.RESTYPE}} to retrieve IP for $AKSNAME in $RG"

          counter=1
          while [ $counter -le 10 ]
          do
            command="kubectl get ${{ steps.installapp.outputs.RESTYPE}} $APPNAME -n $NAMESP -ojson"
            echo "Sending command $command to AKS"
            cmdOut=$(az aks command invoke -g $RG -n $AKSNAME -o json --command "${command}")
            echo $cmdOut
            #if [ "${{ inputs.DEBUG }}" == "true" ]; then echo $cmdOut > GetIpRunContainer.json; fi

            ipAddress=$(echo $cmdOut | jq -r '.logs' | jq -r '.status.loadBalancer.ingress[0].ip')
            echo "IPAddress is $ipAddress"

            echo $ipAddress
            if [ "$ipAddress" != "" ];
            then
                break 2
            else
                echo "going to wait another 10s [$counter] [$(date +"%T")]"
                ((counter++))
                sleep 10
            fi
          done

          echo "::set-output name=IPADDRESS::$ipAddress"

      - name: Verify App is publicly reachable (from hosted GitHub runner)
        if: ${{ steps.installapp.outputs.ISPUBLIC}} = 'true'
        run: |
          ipAddress='${{ steps.waitforip.outputs.IPADDRESS}}'

          counter=1
          while [ $counter -le ${{ inputs.CURLRETRIES }} ] && [ "$respcode" != "200" ]
          do
            echo "curl $ipAddress for response code [$counter]"
            respcode=$(curl -o /dev/null -s -w "%{http_code}\n" $ipAddress)
            echo $respcode

            if [ "$respcode" == "200" ] || [ "$respcode" == "200n" ];
            then
                echo "200 response code received after $counter trys"
                break 2
            else
                echo "going to wait another 15s [$counter] [$(date +"%T")]"
                ((counter++))
                sleep 15
            fi
          done

          if [ "$respcode" == "200" ] || [ "$respcode" == "200n" ];
          then
            echo "curl $ipAddress for content [$counter attempts for 200]"
            curl $ipAddress
          else
              echo "$respcode not 200 - failing"
              curl $ipAddress
             exit 1
          fi

      - name: Test App with Playwright
        if: ${{ steps.installapp.outputs.ISPUBLIC}} = 'true'
        env:
          testfile: .github/workflows_dep/playwrighttests/azurevote-catswin.spec.js
        run: |
          ipAddress='${{ steps.waitforip.outputs.IPADDRESS}}'

          export APPIP=$ipAddress

          npx playwright install #https://github.com/microsoft/playwright/issues/4033
          npx playwright install-deps chromium
          npm install -D @playwright/test
          npm i -D playwright-expect
          npx playwright -V
          npx playwright test --browser chromium $testfile --reporter list

      - name: Cleanup app
        if: inputs.UNINSTALLAFTERVERIFY
        run: |
          command="helm uninstall $APPNAME -n $NAMESP"
          echo "Sending command $command to AKS"
          cmdOut=$(az aks command invoke -g $RG -n $AKSNAME -o json --command "${command}")
          echo $cmdOut

      - name: Store any generated debug files as artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: DebugFiles
          path: debug*.json

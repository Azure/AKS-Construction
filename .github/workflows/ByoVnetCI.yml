name: ByoVnetCI
# Credential prerequisites
# 1. IAM Owner on the Resource Group you're deploying into (we're making role assignments)
# 2. IAM Owner on the Vnet (we're making role assignments)

on:
  push:
    paths: 
      - ".github/workflows/ByoVnetCI.yml"
      - ".github/workflows_dep/AksDeploy-ByoVnet.parameters.json"
      - 'bicep/*'
      
  pull_request:
    branches: [ main ]
    paths: 
      - 'bicep/*'
      - ".github/workflows/ByoVnetCI.yml"
      
  schedule:
    # At 11:00pm, every Wednesday week
    - cron: '0 23 * * 3'
    
  workflow_dispatch:

concurrency: ci-${{ github.ref }}

env:
  RG: 'Automation-Actions-AksDeployCI'
  ParamFilePath: ".github/workflows_dep/AksDeploy-ByoVnet.parameters.json"
  RESNAME: 'AksByo'
  DEPNAME: 'Dep${{ github.run_number }}'

jobs:
  Validation:
    runs-on: ubuntu-latest
      
    steps:
      - uses: actions/checkout@v2

      - name: Param check
        run: |
          RG='${{ env.RG }}'
          echo "RG is: $RG"
          
          echo "Param file path is: ${{ env.ParamFilePath }}"
          echo "Resource name is ${{ env.RESNAME }}
          echo "Deployment name is ${{ env.DEPNAME }}
          echo "Ref is ${{ github.ref }}"
          echo "EventTrigger name is ${{github.event_name}}"

      - name: Dependency check
        shell: pwsh
        run: |
          Write-Output "Checking parameter file existance/contents"
          $paramFilePath="${{ env.ParamFilePath }}"
          Test-Path $paramFilePath
          
          if (Test-Path $paramFilePath) {
            $paramFileContent=Get-Content $paramFilePath
            Write-Output $paramFileContent
            
            Write-Output "Test Pulling a param (ingressApplicationGateway)"
            $params=$paramFileContent|ConvertFrom-Json
            Write-Output $params.parameters.ingressApplicationGateway.value
          }
          
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds:  ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: false
          environment: azurecloud
          allow-no-subscriptions: false
          
      - name: Verify Active Deployments
        id: activedeps
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |
            RG='${{ env.RG }}'
            RUNCOUNT=$(az deployment group list -g $RG --query "[?properties.provisioningState=='Running'].[properties.provisioningState, name] | length(@)" -o tsv)
            echo "Active deployments : $RUNCOUNT"
            
            echo 'Active deployment list'
            az deployment group list -g $RG --query "[?properties.provisioningState=='Running'].[properties.provisioningState, name]"
            
            #echo 'Verbose deployment list'
            #az deployment group list -g $RG --query "[].[properties.provisioningState, name]"
            
            echo "::set-output name=RUNCOUNT::$RUNCOUNT" #outputting for conditon
            
      - name: Validate AKS
        uses: Azure/cli@1.0.4
        #if: steps.activedeps.outputs.RUNCOUNT == 0
        with:
          inlineScript: |
            RG='${{ env.RG }}'
            RESNAME='${{ env.RESNAME }}'
            DEPNAME='Dep${{ github.run_number }}'
            az deployment group validate -f bicep/main.bicep -g $RG -p ${{ env.ParamFilePath }} -p resourceName=$RESNAME byoAKSSubnetId=${{ secrets.ByoAksSubnetId }} byoAGWSubnetId=${{ secrets.ByoAgwSubnetId }} --verbose
            

  Deploy:
    runs-on: ubuntu-latest
    needs: [Validation]
    environment: azurecirgs
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v2

      - name: Param check
        run: |
          RG='${{ env.RG }}'
          echo "RG is: $RG"
          
          echo "Param file path is: ${{ env.ParamFilePath }}"
          echo "Resource name is ${{ env.RESNAME }}
          echo "Deployment name is ${{ env.DEPNAME }}
      - name: Dependency check
        shell: pwsh
        run: |
          Write-Output "Checking parameter file existance/contents"
          $paramFilePath="${{ env.ParamFilePath }}"
          Test-Path $paramFilePath
          
          if (Test-Path $paramFilePath) {
            $paramFileContent=Get-Content $paramFilePath
            Write-Output $paramFileContent
          }
          
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds:  ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: false
          environment: azurecloud
          allow-no-subscriptions: false
          
      - name: Deploy AKS
        id:  deployAks
        uses: Azure/cli@1.0.4
        if: steps.activedeps.outputs.RUNCOUNT == 0
        with:
          inlineScript: |
            RG='${{ env.RG }}'
            RESNAME='${{ env.RESNAME }}'
            DEPNAME='Dep${{ github.run_number }}'
            
            az deployment group create -f bicep/main.bicep -g $RG -p ${{ env.ParamFilePath }} -p resourceName=$RESNAME byoAKSSubnetId=${{ secrets.ByoAksSubnetId }} byoAGWSubnetId=${{ secrets.ByoAgwSubnetId }} --name $DEPNAME --verbose
            
            DEPSTATUS=$(az deployment operation group list --resource-group $RG --name $DEPNAME) #--query "[?properties.provisioningState=='Failed']"
            echo $DEPSTATUS
            
            #outputs
            AKSNAME=$(az deployment group show -n $DEPNAME -g $RG --query "properties.outputs.aksClusterName.value" -o tsv)
            echo "::set-output name=AKSNAME::$AKSNAME" #outputting for conditon
            
      - name: AKS Workload
        uses: Azure/cli@1.0.4
        if: success()
        env:
          MANIFESTTESTURL: "https://raw.githubusercontent.com/Gordonby/AKS-K8S-Lab-L200/master/azure-vote-all-in-one-redis.yaml"
        with:
          inlineScript: |
            RG='${{ env.RG }}'
            AKSNAME='${{ steps.deployAks.outputs.AKSNAME}}'
            
            echo $AKSNAME
            az aks get-credentials -n $AKSNAME -g $RG --admin
            
            az aks install-cli
            kubectl version
            
            echo $MANIFESTTESTURL
            kubectl apply -f $MANIFESTTESTURL

            kubectl get po
            kubectl get svc
            kubectl get ingress
            
  Cleanup:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    needs: [Validation, Deploy]
    steps:
      #- uses: actions/checkout@v2

      - name: Param check
        run: |
          RG='${{ env.RG }}'
          echo "RG is: $RG"
          
          echo "Param file path is: ${{ env.ParamFilePath }}"
          echo "Resource name is ${{ env.RESNAME }}
          echo "Deployment name is ${{ env.DEPNAME }}
          
      - name: Dependency check
        shell: pwsh
        run: |
          Write-Output "Checking parameter file existance/contents"
          $paramFilePath="${{ env.ParamFilePath }}"
          Test-Path $paramFilePath
          
          if (Test-Path $paramFilePath) {
            $paramFileContent=Get-Content $paramFilePath
            Write-Output $paramFileContent
          }
          
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds:  ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          environment: azurecloud
          allow-no-subscriptions: false

      - name: Install Pwsh modules
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name Az.Accounts
          Install-Module -Name Az.Resources
          
      - name: Cleanup
        shell: pwsh
        run: |
          $RG='${{ env.RG }}'
          
          # Get all ARM resources from all resource groups
          $rgToPurge = Get-AzResourceGroup -Name $RG

          Write-Output "Purging $rgToPurge"

          $rgResources = Get-AzResource -ResourceGroupName $rgToPurge
          Write-Output "$($rgResources.length) resources to remove from $rgToPurge"

          try {
            #Remove all but public ip addresses
            $rgResources | ? {$_.ResourceType -ne "Microsoft.Network/publicIPAddresses"} | Remove-AzResource -Force

            #Remove public ip addresses
            $rgResources | ? {$_.ResourceType -eq "Microsoft.Network/publicIPAddresses"} | Remove-AzResource -Force

            $rgResources = Get-AzResource -ResourceGroupName $_.ResourceGroupName
            Write-Output "Post check. $($rgResources.length) resources left to remove from $($_.ResourceGroupName)"

            #Final run to clean other dependant resources in parent-child graph
            Get-AzResource -ResourceGroupName $rgToPurge | Remove-AzResource -Force
          }
          Catch #we're wanting to suppress failures in this step. If it fails to clean, the nightly automation will catch it.
          {
            write-output error
          }

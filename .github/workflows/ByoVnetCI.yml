name: InfraCI - ByoVnet cluster
# Credential prerequisites
# 1. IAM Owner on the Resource Group you're deploying into (we're making role assignments)
# 2. IAM Owner on the Vnet (we're making role assignments)

on:
  push:
    paths:
      #- ".github/workflows/ByoVnetCI.yml"
      - ".github/workflows_dep/AksDeploy-ByoVnet.parameters.json"
      - "bicep/*"

  pull_request:
    branches: [main]
    paths:
      - "bicep/*"
      - ".github/workflows/ByoVnetCI.yml"

  #Running on a schedule helps trap issues like Kubernetes versions not being available in the region, or Well Architected recommendations changing
  schedule:
    # At 11:00pm, every Wednesday week
    - cron: "0 23 * * 3"

  workflow_dispatch:
    inputs:
      doWellArchitected:
        description: 'Perform the Well Architected Framework assesment'
        default: 'false'
        type: boolean
        required: false
      doDebugSteps:
        description: 'Run informational steps'
        default: 'true'
        type: boolean
        required: false
      doVerifySteps:
        description: 'Run optional verify steps'
        default: 'true'
        type: boolean
        required: false
      doSmokeTestUninstall:
        description: 'Uninstall smoke test apps after tests'
        default: 'true'
        type: boolean
        required: false
      defaultdeny:
        description: 'Default Deny NetworkPolicy?'
        default: 'false'
        type: boolean
        required: false

concurrency: ci-${{ github.ref }}

env:
  AZCLIVERSION: 2.30.0 #2.29.2 #2.26.0 #latest
  RG: "Automation-Actions-AksDeployCI"
  ParamFilePath: ".github/workflows_dep/AksDeploy-ByoVnet.parameters.json"
  RESNAME: "Byo"
  DEPNAME: "Dep${{ github.run_number }}"
  KVACCESS: "IAM"

jobs:
  Well_Architected:
    runs-on: ubuntu-latest
    if:  github.event_name == 'pull_request' || github.event.inputs.doWellArchitected == 'true'
    steps:
      - uses: actions/checkout@v2

      # PSRule does this cool thing where it traverse the parameter file through to the arm template
      # PSRule performs IaC recommendations of the template.
      # https://azure.github.io/PSRule.Rules.Azure/
      - name: PSRule - Analyze Azure parameter file
        uses: Microsoft/ps-rule@main
        continue-on-error: true #Setting this whilst PSRule gets bedded in, in this project
        with:
          modules: 'PSRule.Rules.Azure'
          inputPath: "${{ env.ParamFilePath }}"
          prerelease: true

  #Pre deployment validation of the parameters + bicep code
  Validation:
    runs-on: ubuntu-latest
    environment: azurecirgs
    if: ${{ !github.event.pull_request.head.repo.fork }}

    steps:
      - uses: actions/checkout@v2

      - name: Job parameter check
        if: github.event.inputs.doDebugSteps == 'true'
        run: |
          RG='${{ env.RG }}'
          echo "RG is: $RG"

          echo "Param file path is: ${{ env.ParamFilePath }}"
          echo "Resource name is ${{ env.RESNAME }}"
          echo "Deployment name is ${{ env.DEPNAME }}"
          echo "Ref is ${{ github.ref }}"
          echo "Ref name is ${{GITHUB.REF_NAME}}"
          echo "EventTrigger name is ${{github.event_name}}"
          echo "PR contains bug :  ${{contains(github.event.pull_request.labels.*.name, 'bug')}}"
          echo "PR labels :  ${{github.event.pull_request.labels.*.name}}"
          echo "AZCLIVERSION is ${{ env.AZCLIVERSION }}"
          echo "doDebugSteps is ${{ github.event.inputs.doDebugSteps }}"
          echo "doVerifySteps is ${{ github.event.inputs.doVerifySteps }}"
          echo "doSmokeTestUninstall is ${{ github.event.inputs.doSmokeTestUninstall }}"

      - name: Arm Parameter file check
        if: github.event.inputs.doVerifySteps == 'true'
        shell: pwsh
        run: |
          Write-Output "Checking parameter file existence/contents"
          $paramFilePath="${{ env.ParamFilePath }}"
          Test-Path $paramFilePath

          if (Test-Path $paramFilePath) {
            $paramFileContent=Get-Content $paramFilePath
            Write-Output $paramFileContent

            Write-Output "Test Pulling a param (ingressApplicationGateway)"
            $params=$paramFileContent|ConvertFrom-Json
            Write-Output $params.parameters.ingressApplicationGateway.value
          }

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          environment: azurecloud
          allow-no-subscriptions: false

      - name: Install Pwsh modules
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name Az.KeyVault -Force

      - name: Verify any active Azure Resource Group Deployments #These can mess up our deployment
        id: activedeps
        if: github.event.inputs.doVerifySteps == 'true'
        uses: Azure/cli@1.0.4
        with:
          azcliversion: ${{ env.AZCLIVERSION }}
          inlineScript: |
            echo "AZ CLI version"
            az version

            RG='${{ env.RG }}'
            RUNCOUNT=$(az deployment group list -g $RG --query "[?properties.provisioningState=='Running'].[properties.provisioningState, name] | length(@)" -o tsv)
            echo "Active deployments : $RUNCOUNT"

            echo 'Active deployment list'
            az deployment group list -g $RG --query "[?properties.provisioningState=='Running'].[properties.provisioningState, name]"

            #echo 'Verbose deployment list'
            #az deployment group list -g $RG --query "[].[properties.provisioningState, name]"

            echo "::set-output name=RUNCOUNT::$RUNCOUNT" #outputting for condition

      - name: Verify AKS Preview Features are available in target Subscription
        if: github.event.inputs.doVerifySteps == 'true'
        shell: pwsh
        run: |
          write-output 'Full list of features of AKS'
          az feature list -o table --query "[?contains(name, 'Microsoft.ContainerService')].{Name:name,State:properties.state}"

          write-output 'Features that are still registering'
          az feature list -o table --query "[?contains(name, 'Microsoft.ContainerService') && properties.state=='Registering'].{Name:name,State:properties.state}"

          write-output 'Checking to ensure no features are still registering'
          #Not going to use JMES as i'm getting a weird error that i don't see locally in powershell
          $aksfeatures = az feature list --query "[?contains(name, 'Microsoft.ContainerService')]" | ConvertFrom-Json
          #$aksfeatures = $allfeatures | Where-Object {$_.Name -like 'Microsoft.ContainerService*'}
          $registeringfeatures = $aksfeatures |  Where-Object {$_.properties.state -eq 'Registering'}

          if ($registeringfeatures.count -gt 0) {
            Write-Error "There are still features registering"
          } else { Write-Output "-- All good, no features in the process of registering" }

          write-output 'Check specific features.'
          $paramFilePath="${{ env.ParamFilePath }}"
          $paramFileContent=Get-Content $paramFilePath
          $params=$paramFileContent|ConvertFrom-Json

          if($params.parameters.upgradeChannel.value -ne $null) {
            $feature='AutoUpgradePreview'
            write-output "-- $feature"
            $featureCsi = $aksfeatures |  Where-Object {$_.name -like "*$feature"}
            $featureCsi.properties.state

            if ($featureCsi.properties.state -ne 'Registered') {
              Write-Ouput $featureCsi
              Write-Error "$feature NOT registered"
            } else { Write-Output "-- Looks like $feature is registered properly" }
          }

          if($params.parameters.azureKeyvaultSecretsProvider.value -eq $true) {
            $feature='AKS-AzureKeyVaultSecretsProvider'
            write-output "-- $feature"
            $featureCsi = $aksfeatures |  Where-Object {$_.name -like "*$feature"}
            $featureCsi.properties.state

            if ($featureCsi.properties.state -ne 'Registered') {
              Write-Ouput $featureCsi
              Write-Error "$feature NOT registered"
            } else { Write-Output "-- Looks like $feature is registered properly" }
          }

      - name: Create Parameter file imperative override string
        uses: Azure/cli@1.0.4
        id: imperitiveparams
        with:
          azcliversion: ${{ env.AZCLIVERSION }}
          inlineScript: |
            RG='${{ env.RG }}'
            PARAMOVERRIDES="resourceName=$RESNAME byoAKSSubnetId=${{ secrets.ByoAksSubnetId }} byoAGWSubnetId=${{ secrets.ByoAgwSubnetId }} dnsZoneId=${{ secrets.DnsIdAzdemocouk }}"
            echo $PARAMOVERRIDES
            echo "::set-output name=PARAMOVERRIDES::$PARAMOVERRIDES"

      - name: Validate Infrastructure deployment
        uses: Azure/cli@1.0.4
        with:
          azcliversion: ${{ env.AZCLIVERSION }}
          inlineScript: |
            RG='${{ env.RG }}'
            RESNAME='${{ env.RESNAME }}'
            DEPNAME='Dep${{ github.run_number }}'
            PARAMS='${{ steps.imperitiveparams.outputs.PARAMOVERRIDES}}'

            echo $PARAMS

            az deployment group validate -f bicep/main.bicep -g $RG -p ${{ env.ParamFilePath }} -p $PARAMS --verbose

      - name: What If (GA edge Az cli version) (has issues)
        uses: Azure/cli@1.0.4
        id: edgeWhatIf
        continue-on-error: true #Setting to true due to bug in the AzureCLI https://github.com/Azure/azure-cli/issues/19850
        with:
          azcliversion: ${{ env.AZCLIVERSION }} #latest
          inlineScript: |
            RG='${{ env.RG }}'
            RESNAME='${{ env.RESNAME }}'
            DEPNAME='${{ env.DEPNAME }}'
            WHATIFPATH='whatif.json'
            PARAMS='${{ steps.imperitiveparams.outputs.PARAMOVERRIDES}}'

            #az deployment group what-if --debug -f bicep/main.bicep -g $RG -p ${{ env.ParamFilePath }} -p resourceName=$RESNAME byoAKSSubnetId=${{ secrets.ByoAksSubnetId }} byoAGWSubnetId=${{ secrets.ByoAgwSubnetId }}

            az deployment group what-if --no-pretty-print -f bicep/main.bicep -g $RG -p ${{ env.ParamFilePath }} -p $PARAMS > $WHATIFPATH

            if [[ -f $WHATIFPATH ]]
            then
                echo "The WhatIf json file was created"
            fi

            cat $WHATIFPATH

            echo "::set-output name=edgeSuccess::true"

      - name: What If (workaround task)
        uses: Azure/cli@1.0.4
        continue-on-error: true #Setting to true due to bug in the AzureCLI https://github.com/Azure/azure-cli/issues/19850
        if: steps.edgeWhatIf.outputs.edgeSuccess != 'true'
        with:
          azcliversion: 2.26.0
          inlineScript: |
            RG='${{ env.RG }}'
            RESNAME='${{ env.RESNAME }}'
            DEPNAME='${{ env.DEPNAME }}'
            WHATIFPATH='whatif.json'
            PARAMS='${{ steps.imperitiveparams.outputs.PARAMOVERRIDES}}'

            az deployment group what-if --no-pretty-print -f bicep/main.bicep -g $RG -p ${{ env.ParamFilePath }} -p $PARAMS > $WHATIFPATH

            if [[ -f $WHATIFPATH ]]
            then
                echo "The WhatIf json file was created"
            fi

            cat $WHATIFPATH

      - name: What If Analysis Output - Parse output
        if: github.event.inputs.doVerifySteps == 'true'
        shell: pwsh
        run: |
          $whatifpath='whatif.json'

          Write-Output "Checking for JSON What-If"
          $whatifexists=Test-Path -path $whatifpath
          Write-Output $whatifexists

          if ($whatifexists) {
            $jsonFileRaw=Get-Content $whatifpath
            Write-Output $jsonFileRaw

            $whatIf=$jsonFileRaw | ConvertFrom-Json

            if ($null -eq $whatIf) {
              Write-Output "What If results are null"
              #We might want to throw an error here, after the whatif bug gets fixed https://github.com/Azure/azure-cli/issues/19850
            } else {
              Write-Output $whatif.changes[0].after.type
            }
          }

      - name: What If Analysis Output - Pester Testing
        shell: pwsh
        run: |
          Write-Output "https://pester.dev/"
          Write-Output "TODO"

      - name: What If Analysis Gaps - Check for Soft deleted KeyVaults
        shell: pwsh
        run: |
          #This is a current gap in the What-If analysis.
          $whatifpath='whatif.json'
          $whatifexists=Test-Path -path $whatifpath

          if ($whatifexists) {
            $whatIf = Get-Content $whatifpath | ConvertFrom-Json

            if ($null -eq $whatIf) {
              Write-Output "What If results are null"
              #We might want to throw an error here, after the whatif bug gets fixed https://github.com/Azure/azure-cli/issues/19850
            } else {
              $paramFilePath="${{ env.ParamFilePath }}"
              $paramFileContent=Get-Content $paramFilePath
              $params=$paramFileContent|ConvertFrom-Json

              if($params.parameters.createKV.value -eq $true) {
                Write-Output "Checking for already existing soft deleted KV"

                #lets do this properly and interrogate the whatif file for the KVNAME
                $kvafter = $whatif.changes | where-object {$_.after.type -eq 'Microsoft.KeyVault/vaults'} | where {$_.changeType -ne 'Ignore'}  | select after
                $vaultname = $kvafter.after.name

                write-output "Looking for KeyVault $vaultname"
                Get-AzKeyVault -InRemovedState | ft

                $deletedKv = Get-AzKeyVault -InRemovedState | where-object {$_.vaultname -eq $vaultname}

                if($deletedKv.length -eq 0) {
                  Write-Output "All is good, soft deleted KV not found in soft deleted list."
                }
                else {
                  Write-Output "Soft deleted KV output"
                  Write-Output $deletedKv.length
                  Write-Output $deletedKv

                  Write-Error "Existing soft deleted Key Vault ($vaultName) Found - Cannot proceed, as deployment will fail"
                }
              }
            }
          }

  Deploy:
    runs-on: ubuntu-latest
    needs: [Validation]
    environment: azurecirgs
    outputs:
      AKSNAME: ${{ steps.deployAks.outputs.AKSNAME}}
      LANAME : ${{ steps.deployAks.outputs.LANAME}}
      LAWGUID : ${{ steps.deployAks.outputs.LAWGUID}}
      AKVNAME : ${{ steps.deployAks.outputs.AKVNAME}}
      ACRNAME : ${{ steps.deployAks.outputs.ACRNAME}}
      AGNAME : ${{ steps.deployAks.outputs.AGNAME}}

    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/develop' || contains( github.event.pull_request.labels.*.name, 'bug')
    steps:
      - uses: actions/checkout@v2

      - name: Job parameter check
        if: github.event.inputs.doDebugSteps == 'true'
        run: |
          RG='${{ env.RG }}'
          echo "RG is: $RG"

          echo "Param file path is: ${{ env.ParamFilePath }}"
          echo "Resource name is ${{ env.RESNAME }}
          echo "Deployment name is ${{ env.DEPNAME }}

      - name: Parameter file dependency check
        if: github.event.inputs.doVerifySteps == 'true'
        shell: pwsh
        run: |
          Write-Output "Checking parameter file existence/contents"
          $paramFilePath="${{ env.ParamFilePath }}"
          Test-Path $paramFilePath

          if (Test-Path $paramFilePath) {
            $paramFileContent=Get-Content $paramFilePath
            Write-Output $paramFileContent
          }

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          environment: azurecloud
          allow-no-subscriptions: false

      - name: Deploy Infrastructure
        id: deployAks
        uses: Azure/cli@1.0.4
        with:
          azcliversion: ${{ env.AZCLIVERSION }}
          inlineScript: |
            RG='${{ env.RG }}'
            RESNAME='${{ env.RESNAME }}'
            DEPNAME='Dep${{ github.run_number }}'
            PARAMS="resourceName=$RESNAME byoAKSSubnetId=${{ secrets.ByoAksSubnetId }} byoAGWSubnetId=${{ secrets.ByoAgwSubnetId }} dnsZoneId=${{ secrets.DnsIdAzdemocouk }}"

            az deployment group create -f bicep/main.bicep -g $RG -p ${{ env.ParamFilePath }} -p $PARAMS --name $DEPNAME --verbose

            DEPSTATUS=$(az deployment operation group list --resource-group $RG --name $DEPNAME) #--query "[?properties.provisioningState=='Failed']"
            echo $DEPSTATUS

            #outputs
            AKSNAME=$(az deployment group show -n $DEPNAME -g $RG --query "properties.outputs.aksClusterName.value" -o tsv)
            echo "::set-output name=AKSNAME::$AKSNAME"

            AGNAME=$(az deployment group show -n $DEPNAME -g $RG --query "properties.outputs.applicationGatewayName.value" -o tsv)
            echo "::set-output name=AGNAME::$AGNAME"

            AKVNAME=$(az deployment group show -n $DEPNAME -g $RG --query "properties.outputs.keyVaultName.value" -o tsv)
            echo "::set-output name=AKVNAME::$AKVNAME"

            LANAME=$(az deployment group show -n $DEPNAME -g $RG --query "properties.outputs.logAnalyticsName.value" -o tsv)
            echo "::set-output name=LANAME::$LANAME" #outputting for conditon

            LAWGUID=$(az deployment group show -n $DEPNAME -g $RG --query "properties.outputs.logAnalyticsGuid.value" -o tsv)
            echo "::set-output name=LAWGUID::$LAWGUID" #outputting for conditon

            ACRNAME=$(az deployment group show -n $DEPNAME -g $RG --query "properties.outputs.containerRegistryName.value" -o tsv)
            echo "::set-output name=ACRNAME::$ACRNAME" #outputting for conditon


      - name: Enable AGIC Addon
        uses: Azure/cli@1.0.4
        if: ${{ needs.Deploy.outputs.AGNAME}} != ''
        with:
          azcliversion: ${{ env.AZCLIVERSION }}
          inlineScript: |
            RG='${{ env.RG }}'
            AKSNAME='${{ steps.deployAks.outputs.AKSNAME}}'
            AGNAME='${{ steps.deployAks.outputs.AGNAME}}'

            echo "AKS $AKSNAME"
            echo "AG $AGNAME"

            echo "Checking if ingressApplicationGateway is enabled"
            AGICEnabled=$(az aks show -n $AKSNAME -g  $RG --query "addonProfiles.ingressApplicationGateway.enabled")
            echo "AGICEnabled = $AGICEnabled"

            if [ "$AGICEnabled" != "true" ];
            then
                az aks enable-addons -n $AKSNAME -g $RG -a ingress-appgw --appgw-id $(az network application-gateway show -g $RG -n $AGNAME --query id -o tsv)
            fi

      - name: Create AGIC role assignments (if not exist)
        if: ${{ needs.Deploy.outputs.AGNAME}} != ''
        continue-on-error: true
        shell: pwsh
        run: |
            $RG='${{ env.RG }}'
            $AKSNAME='${{ steps.deployAks.outputs.AKSNAME}}'
            $AGNAME='${{ steps.deployAks.outputs.AGNAME}}'

            write-output "AKS $AKSNAME"
            write-output "AG $AGNAME"

            write-output "Checking if ingressApplicationGateway is enabled"
            $AGICEnabled=az aks show -n $AKSNAME -g  $RG --query "addonProfiles.ingressApplicationGateway.enabled"
            write-output "AGICEnabled = $AGICEnabled"

            if ($AGICEnabled -eq $true) {
            	$agicobjid=az aks show -g $RG -n $AKSNAME --query "addonProfiles.ingressApplicationGateway.identity.objectId" -o tsv
              az role assignment list --assignee $agicobjid

              $rgScope=az group show -n $RG --query id
              az role assignment create --role Reader --assignee-object-id $agicobjid --assignee-principal-type ServicePrincipal --scope $rgScope

              $agwScope=az network application-gateway show -g $RG -n $AGNAME --query id -o tsv
              az role assignment create --role Contributor --assignee-object-id $agicobjid --assignee-principal-type ServicePrincipal --scope $agwScope

              az role assignment list --assignee $agicobjid
            }
      - name: Create Default Deny NetworkPolicy
        if: github.event.inputs.defaultdeny == 'true'
        run:
          AKSNAME='${{ steps.deployAks.outputs.AKSNAME}}'

          netpolicycmd="kubectl apply -f https://raw.githubusercontent.com/Azure/Aks-Construction/0.4.3/postdeploy/k8smanifests/networkpolicy-deny-all.yml";
          echo "Sending command $netpolicycmd to $AKSNAME in $RG";
          cmdOut=$(az aks command invoke -g $RG -n $AKSNAME -o json --command "${netpolicycmd}");
          echo $cmdOut;

      - name: Verify Default Deny NetworkPolicy
        if: github.event.inputs.defaultdeny == 'true' && github.event.inputs.doVerifySteps == 'true'
        run:
          AKSNAME='${{ steps.deployAks.outputs.AKSNAME}}'

          netpolicycmd="kubectl get networkpolicy -A";

          echo "Sending command $netpolicycmd to $AKSNAME in $RG";
          cmdOut=$(az aks command invoke -g $RG -n $AKSNAME -o json --command "${netpolicycmd}");
          echo $cmdOut;

  ReusableWF:
    runs-on: ubuntu-latest
    outputs:
      RG: ${{ env.RG }}
      Uninstall: ${{ github.event.inputs.doSmokeTestUninstall }}
    steps:
      - name: Dummy step
        run: echo "Resuable workflows can't be directly passed ENV/INPUTS (yet)"
      - name: Explain more
        run: echo "see https://github.community/t/reusable-workflow-env-context-not-available-in-jobs-job-id-with/206111"
      - name: Job parameter inspection
        run: echo ${{ github.event.inputs.doSmokeTestUninstall }}

  Post-Deploy:
    needs: [Deploy, ReusableWF]
    uses: azure/aks-construction/.github/workflows/PostDeploy.yml@0.4.3
    with:
      RG: ${{ needs.ReusableWF.outputs.RG }}
      AKSNAME: ${{needs.Deploy.outputs.AKSNAME}}
      DNSDOMAIN: azdemo.co.uk
      DNSRG: domainssl
      CERTMANAGEREMAIL: "gdogg@microsoft.com"
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

  SmokeTest_SimpleApp:
    needs: [Deploy, ReusableWF]
    uses: azure/aks-construction/.github/workflows/AppDeploy_AzureVote.yml@0.4.2-preview
    with:
      RG: ${{ needs.ReusableWF.outputs.RG }} #Automation-Actions-AksDeployCI #$RG
      AKSNAME: ${{needs.Deploy.outputs.AKSNAME}}
      AGNAME: ${{ needs.Deploy.outputs.AGNAME}}
      APPNAME: avote-public
      INGRESSTYPE: "AGIC-Public-Ingress"
      FORCEHELMCLEANINSTALL: true
      UNINSTALLAFTERVERIFY: ${{ needs.ReusableWF.outputs.Uninstall == 'true' }}
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

  SmokeTest_JavaApp-certmgr:
    needs: [Deploy, ReusableWF, Post-Deploy]
    #uses: azure/aks-construction/.github/workflows/AppDeploy_JavaApp.yml@0.4.2-preview
    uses: azure-samples/java-aks-keyvault-tls/.github/workflows/deployapp.yml@0.9
    with:
      RG: ${{ needs.ReusableWF.outputs.RG }} #Automation-Actions-AksDeployCI #'${{ env.RG }}' There seems to be an issue passing Env variables in reusable workflows
      AKSNAME: ${{needs.Deploy.outputs.AKSNAME}}
      DNSDOMAIN: azdemo.co.uk
      DNSRG: domainssl
      DNSRECORDNAME: openjdk-demo
      AKVNAME: ${{ needs.Deploy.outputs.AKVNAME}}
      AGNAME: ${{ needs.Deploy.outputs.AGNAME}}
      APPNAME: openjdk-demo
      FRONTENDCERTTYPE: certmanager-staging
      FORCEHELMCLEANINSTALL: true
      UNINSTALLAFTERVERIFY: ${{ needs.ReusableWF.outputs.Uninstall == 'true' }}
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

  SmokeTest_JavaApp-appgw:
    needs: [Deploy, ReusableWF, Post-Deploy, SmokeTest_JavaApp-certmgr]
    #uses: azure/aks-construction/.github/workflows/AppDeploy_JavaApp.yml@0.4.2-preview
    uses: azure-samples/java-aks-keyvault-tls/.github/workflows/deployapp.yml@0.9
    with:
      RG: ${{ needs.ReusableWF.outputs.RG }} #Automation-Actions-AksDeployCI #'${{ env.RG }}' There seems to be an issue passing Env variables in reusable workflows
      AKSNAME: ${{needs.Deploy.outputs.AKSNAME}}
      DNSDOMAIN: azdemo.co.uk
      DNSRG: domainssl
      DNSRECORDNAME: openjdk-kvssl
      AKVNAME: ${{ needs.Deploy.outputs.AKVNAME}}
      AGNAME: ${{ needs.Deploy.outputs.AGNAME}}
      APPNAME: openjdk-kvssl
      FRONTENDCERTTYPE: appgw-selfsigned
      FORCEHELMCLEANINSTALL: true
      UNINSTALLAFTERVERIFY: ${{ needs.ReusableWF.outputs.Uninstall == true }}
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

  DeployVerify:
    runs-on: ubuntu-latest
    needs: [Deploy]
    steps:
      - uses: actions/checkout@v2

      - name: Param check
        if: github.event.inputs.doDebugSteps == 'true'
        run: |
          RG='${{ env.RG }}'
          echo "RG is: $RG"

          echo "Param file path is: ${{ env.ParamFilePath }}"
          echo "Resource name is ${{ env.RESNAME }}"
          echo "Deployment name is ${{ env.DEPNAME }}"
          echo "AKS name is ${{ needs.Deploy.outputs.AKSNAME }}"

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          environment: azurecloud
          allow-no-subscriptions: false

      - name: Test Control Plane Config
        shell: pwsh
        run: |
          $RG='${{ env.RG }}'
          $AKSNAME='${{ needs.Deploy.outputs.AKSNAME }}'
          $paramFilePath="${{ env.ParamFilePath }}"
          $params = Get-Content $paramFilePath | ConvertFrom-Json

          Write-Output "Checking for User Assigned Identity"
          if($params.parameters.custom_vnet.value -eq $true) {
            $aksId=az aks show -n $AKSNAME -g $RG --query "identity.type" -o tsv
            write-output $aksId

            if($aksId -eq "UserAssigned"){
              Write-Output "UAI set correctly"
            } else {
              Write-Error "UAI not set properly"}
          }

          Write-Output "Checking for CSI Secrets driver"
          if($params.parameters.azureKeyvaultSecretsProvider.value -eq $true) {
            $csiEnabled=az aks show -n $AKSNAME -g $RG --query "addonProfiles.omsagent.enabled" -o tsv
            write-output $csiEnabled

            if($csiEnabled -eq "true"){
              Write-Output "CSI Secrets driver set correctly"
            } else {
              Write-Error "CSI Secrets driver not set properly"}
          }
          #grep KeyvaultSecretsProvider

  InfraTests:
    runs-on: ubuntu-latest
    needs: [Deploy]
    steps:
      - name: Param check
        if: github.event.inputs.doDebugSteps == 'true'
        run: |
          RG='${{ env.RG }}'
          echo "RG is: $RG"

          echo "Param file path is: ${{ env.ParamFilePath }}"
          echo "Resource name is ${{ env.RESNAME }}"
          echo "Deployment name is ${{ env.DEPNAME }}"
          echo "LA name is ${{ needs.Deploy.outputs.LANAME }}"
          echo "LA workspace guid is ${{ needs.Deploy.outputs.LAWGUID }}"

      - name: Allow Monitoring extension
        shell: pwsh
        run: |
          az extension add -n log-analytics -y

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds:  ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          environment: azurecloud
          allow-no-subscriptions: false

      - name: Log Analytics log table verification
        shell: pwsh
        run: |
          Write-Output "Check for Logs in the Log Analytics Workspace"
          $LANAME='${{ needs.Deploy.outputs.LANAME}}'
          $LAWGUID='${{ needs.Deploy.outputs.LAWGUID}}'
          $AKSNAME='${{ needs.Deploy.outputs.AKSNAME}}'

          #$KubeNode = az monitor log-analytics query -w $LAWGUID --analytics-query "KubeNodeInventory | summarize count() by Computer, bin(TimeGenerated, 1h)"
          $KubeNode = az monitor log-analytics query -w $LAWGUID --analytics-query "KubeNodeInventory | count" -o json | ConvertFrom-Json
          Write-Output $KubeNode
          Write-Output $KubeNode[0].Count

          if ($KubeNode[0].Count -eq 0) {
            throw "Log Analytics Workspace table: KubeNodeInventory does not have any data. Check network traffic is not being supressed by firewall egress rules"
          }

          $containers = az monitor log-analytics query -w $LAWGUID --analytics-query "ContainerLog | join(KubePodInventory| where TimeGenerated > startofday(ago(1h))) on ContainerID |where TimeGenerated > startofday(ago(10m)) | project TimeGenerated ,Namespace , LogEntrySource , LogEntry | summarize count() by Namespace, LogEntrySource"
          Write-Output $containers

  CaptureAgicLogs:
    runs-on: ubuntu-latest
    needs: [Deploy, SmokeTest_JavaApp-certmgr, SmokeTest_JavaApp-appgw, SmokeTest_SimpleApp]
    if: ${{ always() && needs.Deploy.outputs.AGNAME != '' }}
    steps:
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          environment: azurecloud
          allow-no-subscriptions: false

      - name: AKS Connect
        run: |
          AKSNAME='${{ needs.Deploy.outputs.AKSNAME}}'
          az aks get-credentials -n $AKSNAME -g $RG --overwrite-existing

      - name: Kubelogin
        env:
          kubeloginversion: 'v0.0.10'
        run: |
          wget https://github.com/Azure/kubelogin/releases/download/${{ env.kubeloginversion }}/kubelogin-linux-amd64.zip
          unzip kubelogin-linux-amd64.zip
          sudo mv bin/linux_amd64/kubelogin /usr/bin
          kubelogin convert-kubeconfig -l azurecli

      - name: Kubectl get event Warnings
        if: github.event.inputs.doDebugSteps == 'true'
        run: |
          kubectl get events --sort-by='.metadata.creationTimestamp' -A | grep Warning

      - name: Describe AGIC Pod
        env:
          NAMESP: "kube-system"
        run: |
          APPGWPODNAME=$(kubectl get pods -n $NAMESP -o json | jq -r '.items[] | select(.metadata.name | test("appgw-")).metadata.name')
          kubectl describe po -n $NAMESP $APPGWPODNAME

      - name: Grab Invalid AGIC pod logs
        env:
          NAMESP: "kube-system"
        run: |
          APPGWPODNAME=$(kubectl get pods -n $NAMESP -o json | jq -r '.items[] | select(.metadata.name | test("appgw-")).metadata.name')
          kubectl logs -n $NAMESP $APPGWPODNAME | grep Invalid

      - name: Grab full AGIC pod logs
        env:
          NAMESP: "kube-system"
        run: |
          APPGWPODNAME=$(kubectl get pods -n $NAMESP -o json | jq -r '.items[] | select(.metadata.name | test("appgw-")).metadata.name')
          kubectl logs -n $NAMESP $APPGWPODNAME

      - name: Check Events for default namespace
        env:
          NAMESP: "default"
        run: kubectl get events -n $NAMESP

  Infra_Destroy:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    needs: [Validation, Deploy, InfraTests, DeployVerify, SmokeTest_SimpleApp, Well_Architected, CaptureAgicLogs]
    steps:
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          environment: azurecloud
          allow-no-subscriptions: false

      - name: Install Pwsh modules
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name Az.Accounts
          Install-Module -Name Az.Resources

      - name: Cleanup
        shell: pwsh
        run: |
          $RG='${{ env.RG }}'
          # Get all ARM resources from all resource groups
          $rgToPurge = Get-AzResourceGroup -Name $RG
          try {
            #purge any KV's
            Get-AzResource -ResourceGroupName $rgToPurge.ResourceGroupName | ? {$_.ResourceType -eq "Microsoft.KeyVault/vaults"} | Remove-AzKeyVault -force

            #Remove all but public ip addresses
            Get-AzResource -ResourceGroupName $rgToPurge.ResourceGroupName | ? {$_.ResourceType -ne "Microsoft.Network/publicIPAddresses"} | Remove-AzResource -Force

            #Remove public ip addresses
            Get-AzResource -ResourceGroupName $rgToPurge.ResourceGroupName | ? {$_.ResourceType -eq "Microsoft.Network/publicIPAddresses"} | Remove-AzResource -Force

            #Final run to clean other dependant resources in parent-child graph
            Get-AzResource -ResourceGroupName $rgToPurge.ResourceGroupName | Remove-AzResource -Force
          }
          Catch #we're wanting to suppress failures in this step. If it fails to clean, the nightly automation will catch it.
          {
            write-output error
          }

{"version":3,"file":"PropertiesPlugin.js.map","sources":["PropertiesPlugin.js"],"sourcesContent":["/**\r\n* PropertiesPlugin.ts\r\n* @copyright Microsoft 2018\r\n*/\r\nimport { __extends } from \"tslib\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { BreezeChannelIdentifier, PageView, PropertiesPluginIdentifier, createDistributedTraceContextFromTrace } from \"@microsoft/applicationinsights-common\";\r\nimport { BaseTelemetryPlugin, _InternalLogMessage, _logInternalMessage, createProcessTelemetryContext, getNavigator, getSetValue, isNullOrUndefined, objForEachKey } from \"@microsoft/applicationinsights-core-js\";\r\nimport { TelemetryContext } from \"./TelemetryContext\";\r\nimport { _DYN_ACCOUNT_ID, _DYN_APPLY_APPLICATION_CO1, _DYN_APPLY_DEVICE_CONTEXT, _DYN_APPLY_INTERNAL_CONTE5, _DYN_APPLY_LOCATION_CONTE4, _DYN_APPLY_OPERATING_SYST3, _DYN_APPLY_OPERATION_CONT2, _DYN_APPLY_SESSION_CONTEX0, _DYN_APPLY_USER_CONTEXT, _DYN_COOKIE_DOMAIN, _DYN_GET_NEW_ID, _DYN_GET_SESSION_ID, _DYN_GET_TRACE_CTX, _DYN_ID_LENGTH, _DYN_IS_NEW_USER, _DYN_IS_USER_COOKIE_SET, _DYN_NAME_PREFIX, _DYN_SDK_EXTENSION, _DYN_SESSION_COOKIE_POSTF6, _DYN_SESSION_MANAGER, _DYN_TELEMETRY_TRACE, _DYN_UPDATE, _DYN_USER_COOKIE_POSTFIX } from \"./__DynamicConstants\";\r\nvar PropertiesPlugin = /** @class */ (function (_super) {\r\n    __extends(PropertiesPlugin, _super);\r\n    function PropertiesPlugin() {\r\n        var _this = _super.call(this) || this;\r\n        _this.priority = 110;\r\n        _this.identifier = PropertiesPluginIdentifier;\r\n        var _extensionConfig;\r\n        var _distributedTraceCtx;\r\n        var _previousTraceCtx;\r\n        dynamicProto(PropertiesPlugin, _this, function (_self, _base) {\r\n            _initDefaults();\r\n            _self.initialize = function (config, core, extensions, pluginChain) {\r\n                _base.initialize(config, core, extensions, pluginChain);\r\n                _populateDefaults(config);\r\n            };\r\n            /**\r\n             * Add Part A fields to the event\r\n             * @param event The event that needs to be processed\r\n             */\r\n            _self.processTelemetry = function (event, itemCtx) {\r\n                if (isNullOrUndefined(event)) {\r\n                    // TODO(barustum): throw an internal event once we have support for internal logging\r\n                }\r\n                else {\r\n                    itemCtx = _self._getTelCtx(itemCtx);\r\n                    // If the envelope is PageView, reset the internal message count so that we can send internal telemetry for the new page.\r\n                    if (event.name === PageView.envelopeType) {\r\n                        itemCtx.diagLog().resetInternalMessageCount();\r\n                    }\r\n                    var theContext = (_self.context || {});\r\n                    if (theContext.session) {\r\n                        // If customer did not provide custom session id update the session manager\r\n                        if (typeof _self.context.session.id !== \"string\" && theContext[_DYN_SESSION_MANAGER /* @min:%2esessionManager */]) {\r\n                            theContext[_DYN_SESSION_MANAGER /* @min:%2esessionManager */][_DYN_UPDATE /* @min:%2eupdate */]();\r\n                        }\r\n                    }\r\n                    var userCtx = theContext.user;\r\n                    if (userCtx && !userCtx[_DYN_IS_USER_COOKIE_SET /* @min:%2eisUserCookieSet */]) {\r\n                        userCtx[_DYN_UPDATE /* @min:%2eupdate */](theContext.user.id);\r\n                    }\r\n                    _processTelemetryInternal(event, itemCtx);\r\n                    if (userCtx && userCtx[_DYN_IS_NEW_USER /* @min:%2eisNewUser */]) {\r\n                        userCtx[_DYN_IS_NEW_USER /* @min:%2eisNewUser */] = false;\r\n                        var message = new _InternalLogMessage(72 /* _eInternalMessageId.SendBrowserInfoOnUserInit */, ((getNavigator() || {}).userAgent || \"\"));\r\n                        _logInternalMessage(itemCtx.diagLog(), 1 /* eLoggingSeverity.CRITICAL */, message);\r\n                    }\r\n                    _self.processNext(event, itemCtx);\r\n                }\r\n            };\r\n            _self._doTeardown = function (unloadCtx, unloadState) {\r\n                var core = (unloadCtx || {}).core();\r\n                if (core && core[_DYN_GET_TRACE_CTX /* @min:%2egetTraceCtx */]) {\r\n                    var traceCtx = core[_DYN_GET_TRACE_CTX /* @min:%2egetTraceCtx */](false);\r\n                    if (traceCtx === _distributedTraceCtx) {\r\n                        core.setTraceCtx(_previousTraceCtx);\r\n                    }\r\n                }\r\n                _initDefaults();\r\n            };\r\n            function _initDefaults() {\r\n                _extensionConfig = null;\r\n                _distributedTraceCtx = null;\r\n                _previousTraceCtx = null;\r\n            }\r\n            function _populateDefaults(config) {\r\n                var identifier = _self.identifier;\r\n                var core = _self.core;\r\n                var ctx = createProcessTelemetryContext(null, config, core);\r\n                var defaultConfig = PropertiesPlugin.getDefaultConfig();\r\n                _extensionConfig = _extensionConfig || {};\r\n                objForEachKey(defaultConfig, function (field, value) {\r\n                    _extensionConfig[field] = function () { return ctx.getConfig(identifier, field, value()); };\r\n                });\r\n                _previousTraceCtx = core[_DYN_GET_TRACE_CTX /* @min:%2egetTraceCtx */](false);\r\n                _self.context = new TelemetryContext(core, _extensionConfig, _previousTraceCtx);\r\n                _distributedTraceCtx = createDistributedTraceContextFromTrace(_self.context[_DYN_TELEMETRY_TRACE /* @min:%2etelemetryTrace */], _previousTraceCtx);\r\n                core.setTraceCtx(_distributedTraceCtx);\r\n                _self.context.appId = function () {\r\n                    var breezeChannel = core.getPlugin(BreezeChannelIdentifier);\r\n                    return breezeChannel ? breezeChannel.plugin[\"_appId\"] : null;\r\n                };\r\n                // Test hook to allow accessing the internal values -- explicitly not defined as an available property on the class\r\n                _self[\"_extConfig\"] = _extensionConfig;\r\n            }\r\n            function _processTelemetryInternal(evt, itemCtx) {\r\n                // Set Part A fields\r\n                getSetValue(evt, \"tags\", []);\r\n                getSetValue(evt, \"ext\", {});\r\n                var ctx = _self.context;\r\n                ctx[_DYN_APPLY_SESSION_CONTEX0 /* @min:%2eapplySessionContext */](evt, itemCtx);\r\n                ctx[_DYN_APPLY_APPLICATION_CO1 /* @min:%2eapplyApplicationContext */](evt, itemCtx);\r\n                ctx[_DYN_APPLY_DEVICE_CONTEXT /* @min:%2eapplyDeviceContext */](evt, itemCtx);\r\n                ctx[_DYN_APPLY_OPERATION_CONT2 /* @min:%2eapplyOperationContext */](evt, itemCtx);\r\n                ctx[_DYN_APPLY_USER_CONTEXT /* @min:%2eapplyUserContext */](evt, itemCtx);\r\n                ctx[_DYN_APPLY_OPERATING_SYST3 /* @min:%2eapplyOperatingSystemContxt */](evt, itemCtx);\r\n                ctx.applyWebContext(evt, itemCtx);\r\n                ctx[_DYN_APPLY_LOCATION_CONTE4 /* @min:%2eapplyLocationContext */](evt, itemCtx); // legacy tags\r\n                ctx[_DYN_APPLY_INTERNAL_CONTE5 /* @min:%2eapplyInternalContext */](evt, itemCtx); // legacy tags\r\n                ctx.cleanUp(evt, itemCtx);\r\n            }\r\n        });\r\n        return _this;\r\n    }\r\n    PropertiesPlugin.getDefaultConfig = function () {\r\n        var _a;\r\n        var defaultValue;\r\n        var nullValue = null;\r\n        var defaultConfig = (_a = {\r\n                instrumentationKey: function () { return defaultValue; }\r\n            },\r\n            _a[_DYN_ACCOUNT_ID /* @min:accountId */] = function () { return nullValue; },\r\n            _a.sessionRenewalMs = function () { return 30 * 60 * 1000; },\r\n            _a.samplingPercentage = function () { return 100; },\r\n            _a.sessionExpirationMs = function () { return 24 * 60 * 60 * 1000; },\r\n            _a[_DYN_COOKIE_DOMAIN /* @min:cookieDomain */] = function () { return nullValue; },\r\n            _a[_DYN_SDK_EXTENSION /* @min:sdkExtension */] = function () { return nullValue; },\r\n            _a.isBrowserLinkTrackingEnabled = function () { return false; },\r\n            _a.appId = function () { return nullValue; },\r\n            _a[_DYN_GET_SESSION_ID /* @min:getSessionId */] = function () { return nullValue; },\r\n            _a[_DYN_NAME_PREFIX /* @min:namePrefix */] = function () { return defaultValue; },\r\n            _a[_DYN_SESSION_COOKIE_POSTF6 /* @min:sessionCookiePostfix */] = function () { return defaultValue; },\r\n            _a[_DYN_USER_COOKIE_POSTFIX /* @min:userCookiePostfix */] = function () { return defaultValue; },\r\n            _a[_DYN_ID_LENGTH /* @min:idLength */] = function () { return 22; },\r\n            _a[_DYN_GET_NEW_ID /* @min:getNewId */] = function () { return nullValue; },\r\n            _a);\r\n        return defaultConfig;\r\n    };\r\n    PropertiesPlugin.prototype.initialize = function (config, core, extensions, pluginChain) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Add Part A fields to the event\r\n     * @param event The event that needs to be processed\r\n     */\r\n    PropertiesPlugin.prototype.processTelemetry = function (event, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return PropertiesPlugin;\r\n}(BaseTelemetryPlugin));\r\nexport default PropertiesPlugin;\r\n//# sourceMappingURL=PropertiesPlugin.js.map"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA,gFAAkC;AAClgEASM;AACN;AACA;AACA;AACA"}
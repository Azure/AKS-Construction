/**
* TelemetryContext.ts
* @copyright Microsoft 2018
*/
import { IApplication, IDevice, IInternal, ILocation, IOperatingSystem, ISession, ITelemetryTrace, IUserContext, IWeb } from "@microsoft/applicationinsights-common";
import { IAppInsightsCore, IDistributedTraceContext, IProcessTelemetryContext, ITelemetryItem } from "@microsoft/applicationinsights-core-js";
import { _SessionManager } from "./Context/Session";
import { IPropTelemetryContext } from "./Interfaces/IPropTelemetryContext";
import { ITelemetryConfig } from "./Interfaces/ITelemetryConfig";
export declare class TelemetryContext implements IPropTelemetryContext {
    application: IApplication;
    device: IDevice;
    location: ILocation;
    telemetryTrace: ITelemetryTrace;
    user: IUserContext;
    internal: IInternal;
    session: ISession;
    sessionManager: _SessionManager;
    os: IOperatingSystem;
    web: IWeb;
    appId: () => string;
    getSessionId: () => string;
    constructor(core: IAppInsightsCore, defaultConfig: ITelemetryConfig, previousTraceCtx?: IDistributedTraceContext);
    applySessionContext(evt: ITelemetryItem, itemCtx?: IProcessTelemetryContext): void;
    applyOperatingSystemContxt(event: ITelemetryItem, itemCtx?: IProcessTelemetryContext): void;
    applyApplicationContext(event: ITelemetryItem, itemCtx?: IProcessTelemetryContext): void;
    applyDeviceContext(event: ITelemetryItem, itemCtx?: IProcessTelemetryContext): void;
    applyInternalContext(event: ITelemetryItem, itemCtx?: IProcessTelemetryContext): void;
    applyLocationContext(event: ITelemetryItem, itemCtx?: IProcessTelemetryContext): void;
    applyOperationContext(event: ITelemetryItem, itemCtx?: IProcessTelemetryContext): void;
    applyWebContext(event: ITelemetryItem, itemCtx?: IProcessTelemetryContext): void;
    applyUserContext(event: ITelemetryItem, itemCtx?: IProcessTelemetryContext): void;
    cleanUp(event: ITelemetryItem, itemCtx?: IProcessTelemetryContext): void;
}

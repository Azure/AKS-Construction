/*
 * Application Insights JavaScript SDK - Web Analytics, 2.8.9
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


import dynamicProto from "@microsoft/dynamicproto-js";
import { utlCanUseSessionStorage, utlGetSessionStorage, utlRemoveSessionStorage, utlSetSessionStorage } from "@microsoft/applicationinsights-common";
import { _warnToConsole, dateNow, dumpObj, getJSON, hasJSON, objDefineAccessors, throwError } from "@microsoft/applicationinsights-core-js";
import { _DYN_PAGE_VISIT_START_TIM20, _DYN_TRACK_PREVIOUS_PAGE_9 } from "../../__DynamicConstants";
/**
 * Used to track page visit durations
 */
var PageVisitTimeManager = /** @class */ (function () {
    /**
     * Creates a new instance of PageVisitTimeManager
     * @param pageVisitTimeTrackingHandler Delegate that will be called to send telemetry data to AI (when trackPreviousPageVisit is called)
     * @returns {}
     */
    function PageVisitTimeManager(logger, pageVisitTimeTrackingHandler) {
        var prevPageVisitDataKeyName = "prevPageVisitData";
        dynamicProto(PageVisitTimeManager, this, function (_self) {
            _self[_DYN_TRACK_PREVIOUS_PAGE_9 /* @min:%2etrackPreviousPageVisit */] = function (currentPageName, currentPageUrl) {
                try {
                    // Restart timer for new page view
                    var prevPageVisitTimeData = restartPageVisitTimer(currentPageName, currentPageUrl);
                    // If there was a page already being timed, track the visit time for it now.
                    if (prevPageVisitTimeData) {
                        pageVisitTimeTrackingHandler(prevPageVisitTimeData.pageName, prevPageVisitTimeData.pageUrl, prevPageVisitTimeData.pageVisitTime);
                    }
                }
                catch (e) {
                    _warnToConsole(logger, "Auto track page visit time failed, metric will not be collected: " + dumpObj(e));
                }
            };
            /**
             * Stops timing of current page (if exists) and starts timing for duration of visit to pageName
             * @param pageName Name of page to begin timing visit duration
             * @returns {PageVisitData} Page visit data (including duration) of pageName from last call to start or restart, if exists. Null if not.
             */
            function restartPageVisitTimer(pageName, pageUrl) {
                var prevPageVisitData = null;
                try {
                    prevPageVisitData = stopPageVisitTimer();
                    startPageVisitTimer(pageName, pageUrl);
                }
                catch (e) {
                    _warnToConsole(logger, "Call to restart failed: " + dumpObj(e));
                    prevPageVisitData = null;
                }
                return prevPageVisitData;
            }
            /**
             * Starts timing visit duration of pageName
             * @param pageName
             * @returns {}
             */
            function startPageVisitTimer(pageName, pageUrl) {
                try {
                    if (utlCanUseSessionStorage()) {
                        if (utlGetSessionStorage(logger, prevPageVisitDataKeyName) != null) {
                            throwError("Cannot call startPageVisit consecutively without first calling stopPageVisit");
                        }
                        var currPageVisitData = new PageVisitData(pageName, pageUrl);
                        var currPageVisitDataStr = getJSON().stringify(currPageVisitData);
                        utlSetSessionStorage(logger, prevPageVisitDataKeyName, currPageVisitDataStr);
                    }
                }
                catch (e) {
                    // TODO: Remove this catch in next phase, since if start is called twice in a row the exception needs to be propagated out
                    _warnToConsole(logger, "Call to start failed: " + dumpObj(e));
                }
            }
            /**
             * Stops timing of current page, if exists.
             * @returns {PageVisitData} Page visit data (including duration) of pageName from call to start, if exists. Null if not.
             */
            function stopPageVisitTimer() {
                var prevPageVisitData = null;
                try {
                    if (utlCanUseSessionStorage()) {
                        // Define end time of page's visit
                        var pageVisitEndTime = dateNow();
                        // Try to retrieve  page name and start time from session storage
                        var pageVisitDataJsonStr = utlGetSessionStorage(logger, prevPageVisitDataKeyName);
                        if (pageVisitDataJsonStr && hasJSON()) {
                            // if previous page data exists, set end time of visit
                            prevPageVisitData = getJSON().parse(pageVisitDataJsonStr);
                            prevPageVisitData.pageVisitTime = pageVisitEndTime - prevPageVisitData[_DYN_PAGE_VISIT_START_TIM20 /* @min:%2epageVisitStartTime */];
                            // Remove data from storage since we already used it
                            utlRemoveSessionStorage(logger, prevPageVisitDataKeyName);
                        }
                    }
                }
                catch (e) {
                    _warnToConsole(logger, "Stop page visit timer failed: " + dumpObj(e));
                    prevPageVisitData = null;
                }
                return prevPageVisitData;
            }
            // For backward compatibility
            objDefineAccessors(_self, "_logger", function () { return logger; });
            objDefineAccessors(_self, "pageVisitTimeTrackingHandler", function () { return pageVisitTimeTrackingHandler; });
        });
    }
// Removed Stub for PageVisitTimeManager.prototype.trackPreviousPageVisit.
    // This is a workaround for an IE8 bug when using dynamicProto() with classes that don't have any
    // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.
    // this will be removed when ES3 support is dropped.
    PageVisitTimeManager.__ieDyn=1;

    return PageVisitTimeManager;
}());
export { PageVisitTimeManager };
var PageVisitData = /** @class */ (function () {
    function PageVisitData(pageName, pageUrl) {
        this[_DYN_PAGE_VISIT_START_TIM20 /* @min:%2epageVisitStartTime */] = dateNow();
        this.pageName = pageName;
        this.pageUrl = pageUrl;
    }
    return PageVisitData;
}());
export { PageVisitData };
//# sourceMappingURL=PageVisitTimeManager.js.map
/*
 * Application Insights JavaScript SDK - Web Analytics, 2.8.9
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


import dynamicProto from "@microsoft/dynamicproto-js";
import { dateTimeUtilsDuration, msToTimeSpan } from "@microsoft/applicationinsights-common";
import { _throwInternal, getNavigator, getPerformance, safeGetLogger } from "@microsoft/applicationinsights-core-js";
import { _DYN_CONNECT_END, _DYN_DURATION, _DYN_GET_ENTRIES_BY_TYPE, _DYN_GET_PERFORMANCE_TIMI17, _DYN_IS_PERFORMANCE_TIMIN16, _DYN_IS_PERFORMANCE_TIMIN19, _DYN_LENGTH, _DYN_LOAD_EVENT_END, _DYN_NAVIGATION_START, _DYN_POPULATE_PAGE_VIEW_P12, _DYN_REQUEST_START, _DYN_RESPONSE_END, _DYN_RESPONSE_START, _DYN_SHOULD_COLLECT_DURAT18 } from "../../__DynamicConstants";
var MAX_DURATION_ALLOWED = 3600000; // 1h
var botAgentNames = ["googlebot", "adsbot-google", "apis-google", "mediapartners-google"];
function _isPerformanceTimingSupported() {
    var perf = getPerformance();
    return perf && !!perf.timing;
}
function _isPerformanceNavigationTimingSupported() {
    var perf = getPerformance();
    return perf && perf.getEntriesByType && perf.getEntriesByType("navigation")[_DYN_LENGTH /* @min:%2elength */] > 0;
}
function _isPerformanceTimingDataReady() {
    var perf = getPerformance();
    var timing = perf ? perf.timing : 0;
    return timing
        && timing.domainLookupStart > 0
        && timing[_DYN_NAVIGATION_START /* @min:%2enavigationStart */] > 0
        && timing[_DYN_RESPONSE_START /* @min:%2eresponseStart */] > 0
        && timing[_DYN_REQUEST_START /* @min:%2erequestStart */] > 0
        && timing[_DYN_LOAD_EVENT_END /* @min:%2eloadEventEnd */] > 0
        && timing[_DYN_RESPONSE_END /* @min:%2eresponseEnd */] > 0
        && timing[_DYN_CONNECT_END /* @min:%2econnectEnd */] > 0
        && timing.domLoading > 0;
}
function _getPerformanceTiming() {
    if (_isPerformanceTimingSupported()) {
        return getPerformance().timing;
    }
    return null;
}
function _getPerformanceNavigationTiming() {
    if (_isPerformanceNavigationTimingSupported()) {
        return getPerformance()[_DYN_GET_ENTRIES_BY_TYPE /* @min:%2egetEntriesByType */]("navigation")[0];
    }
    return null;
}
/**
* This method tells if given durations should be excluded from collection.
*/
function _shouldCollectDuration() {
    var durations = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        durations[_i] = arguments[_i];
    }
    var _navigator = getNavigator() || {};
    // a full list of Google crawlers user agent strings - https://support.google.com/webmasters/answer/1061943?hl=en
    var userAgent = _navigator.userAgent;
    var isGoogleBot = false;
    if (userAgent) {
        for (var i = 0; i < botAgentNames[_DYN_LENGTH /* @min:%2elength */]; i++) {
            isGoogleBot = isGoogleBot || userAgent.toLowerCase().indexOf(botAgentNames[i]) !== -1;
        }
    }
    if (isGoogleBot) {
        // Don't report durations for GoogleBot, it is returning invalid values in performance.timing API.
        return false;
    }
    else {
        // for other page views, don't report if it's outside of a reasonable range
        for (var i = 0; i < durations[_DYN_LENGTH /* @min:%2elength */]; i++) {
            if (durations[i] < 0 || durations[i] >= MAX_DURATION_ALLOWED) {
                return false;
            }
        }
    }
    return true;
}
/**
 * Class encapsulates sending page view performance telemetry.
 */
var PageViewPerformanceManager = /** @class */ (function () {
    function PageViewPerformanceManager(core) {
        var _this = this;
        var _logger = safeGetLogger(core);
        dynamicProto(PageViewPerformanceManager, this, function (_self) {
            _self[_DYN_POPULATE_PAGE_VIEW_P12 /* @min:%2epopulatePageViewPerformanceEvent */] = function (pageViewPerformance) {
                pageViewPerformance.isValid = false;
                /*
                 * http://www.w3.org/TR/navigation-timing/#processing-model
                 *  |-navigationStart
                 *  |             |-connectEnd
                 *  |             ||-requestStart
                 *  |             ||             |-responseStart
                 *  |             ||             |              |-responseEnd
                 *  |             ||             |              |
                 *  |             ||             |              |         |-loadEventEnd
                 *  |---network---||---request---|---response---|---dom---|
                 *  |--------------------------total----------------------|
                 *
                 *  total = The difference between the load event of the current document is completed and the first recorded timestamp of the performance entry : https://developer.mozilla.org/en-US/docs/Web/Performance/Navigation_and_resource_timings#duration
                 *  network = Redirect time + App Cache + DNS lookup time + TCP connection time
                 *  request = Request time : https://developer.mozilla.org/en-US/docs/Web/Performance/Navigation_and_resource_timings#request_time
                 *  response = Response time
                 *  dom = Document load time : https://html.spec.whatwg.org/multipage/dom.html#document-load-timing-info
                 *      = Document processing time : https://developers.google.com/web/fundamentals/performance/navigation-and-resource-timing/#document_processing
                 *      + Loading time : https://developers.google.com/web/fundamentals/performance/navigation-and-resource-timing/#loading
                 */
                var navigationTiming = _getPerformanceNavigationTiming();
                var timing = _getPerformanceTiming();
                var total = 0;
                var network = 0;
                var request = 0;
                var response = 0;
                var dom = 0;
                if (navigationTiming || timing) {
                    if (navigationTiming) {
                        total = navigationTiming[_DYN_DURATION /* @min:%2eduration */];
                        /**
                         * support both cases:
                         * - startTime is always zero: https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming
                         * - for older browsers where the startTime is not zero
                         */
                        network = navigationTiming.startTime === 0 ? navigationTiming[_DYN_CONNECT_END /* @min:%2econnectEnd */] : dateTimeUtilsDuration(navigationTiming.startTime, navigationTiming[_DYN_CONNECT_END /* @min:%2econnectEnd */]);
                        request = dateTimeUtilsDuration(navigationTiming.requestStart, navigationTiming[_DYN_RESPONSE_START /* @min:%2eresponseStart */]);
                        response = dateTimeUtilsDuration(navigationTiming[_DYN_RESPONSE_START /* @min:%2eresponseStart */], navigationTiming[_DYN_RESPONSE_END /* @min:%2eresponseEnd */]);
                        dom = dateTimeUtilsDuration(navigationTiming.responseEnd, navigationTiming[_DYN_LOAD_EVENT_END /* @min:%2eloadEventEnd */]);
                    }
                    else {
                        total = dateTimeUtilsDuration(timing[_DYN_NAVIGATION_START /* @min:%2enavigationStart */], timing[_DYN_LOAD_EVENT_END /* @min:%2eloadEventEnd */]);
                        network = dateTimeUtilsDuration(timing[_DYN_NAVIGATION_START /* @min:%2enavigationStart */], timing[_DYN_CONNECT_END /* @min:%2econnectEnd */]);
                        request = dateTimeUtilsDuration(timing.requestStart, timing[_DYN_RESPONSE_START /* @min:%2eresponseStart */]);
                        response = dateTimeUtilsDuration(timing[_DYN_RESPONSE_START /* @min:%2eresponseStart */], timing[_DYN_RESPONSE_END /* @min:%2eresponseEnd */]);
                        dom = dateTimeUtilsDuration(timing.responseEnd, timing[_DYN_LOAD_EVENT_END /* @min:%2eloadEventEnd */]);
                    }
                    if (total === 0) {
                        _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 10 /* _eInternalMessageId.ErrorPVCalc */, "error calculating page view performance.", { total: total, network: network, request: request, response: response, dom: dom });
                    }
                    else if (!_this[_DYN_SHOULD_COLLECT_DURAT18 /* @min:%2eshouldCollectDuration */](total, network, request, response, dom)) {
                        _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 45 /* _eInternalMessageId.InvalidDurationValue */, "Invalid page load duration value. Browser perf data won't be sent.", { total: total, network: network, request: request, response: response, dom: dom });
                    }
                    else if (total < Math.floor(network) + Math.floor(request) + Math.floor(response) + Math.floor(dom)) {
                        // some browsers may report individual components incorrectly so that the sum of the parts will be bigger than total PLT
                        // in this case, don't report client performance from this page
                        _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 8 /* _eInternalMessageId.ClientPerformanceMathError */, "client performance math error.", { total: total, network: network, request: request, response: response, dom: dom });
                    }
                    else {
                        pageViewPerformance.durationMs = total;
                        // // convert to timespans
                        pageViewPerformance.perfTotal = pageViewPerformance[_DYN_DURATION /* @min:%2eduration */] = msToTimeSpan(total);
                        pageViewPerformance.networkConnect = msToTimeSpan(network);
                        pageViewPerformance.sentRequest = msToTimeSpan(request);
                        pageViewPerformance.receivedResponse = msToTimeSpan(response);
                        pageViewPerformance.domProcessing = msToTimeSpan(dom);
                        pageViewPerformance.isValid = true;
                    }
                }
            };
            _self[_DYN_GET_PERFORMANCE_TIMI17 /* @min:%2egetPerformanceTiming */] = _getPerformanceTiming;
            _self[_DYN_IS_PERFORMANCE_TIMIN16 /* @min:%2eisPerformanceTimingSupported */] = _isPerformanceTimingSupported;
            _self[_DYN_IS_PERFORMANCE_TIMIN19 /* @min:%2eisPerformanceTimingDataReady */] = _isPerformanceTimingDataReady;
            _self[_DYN_SHOULD_COLLECT_DURAT18 /* @min:%2eshouldCollectDuration */] = _shouldCollectDuration;
        });
    }
// Removed Stub for PageViewPerformanceManager.prototype.populatePageViewPerformanceEvent.
// Removed Stub for PageViewPerformanceManager.prototype.getPerformanceTiming.
// Removed Stub for PageViewPerformanceManager.prototype.isPerformanceTimingSupported.
// Removed Stub for PageViewPerformanceManager.prototype.isPerformanceTimingDataReady.
// Removed Stub for PageViewPerformanceManager.prototype.shouldCollectDuration.
    // This is a workaround for an IE8 bug when using dynamicProto() with classes that don't have any
    // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.
    // this will be removed when ES3 support is dropped.
    PageViewPerformanceManager.__ieDyn=1;

    return PageViewPerformanceManager;
}());
export { PageViewPerformanceManager };
//# sourceMappingURL=PageViewPerformanceManager.js.map
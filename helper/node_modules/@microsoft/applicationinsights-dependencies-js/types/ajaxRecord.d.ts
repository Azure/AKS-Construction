import { IDependencyTelemetry } from "@microsoft/applicationinsights-common";
import { IDiagnosticLogger, IDistributedTraceContext } from "@microsoft/applicationinsights-core-js";
import { _DYN_HEADER_MAP } from "./__DynamicConstants";
export interface IAjaxRecordResponse {
    statusText: string;
    [_DYN_HEADER_MAP]: Object;
    correlationContext: string;
    type?: string;
    responseText?: string;
    response?: Object;
}
interface ITraceCtx {
    traceId: string;
    spanId: string;
    traceFlags: number;
}
export declare class XHRMonitoringState {
    openDone: boolean;
    setRequestHeaderDone: boolean;
    sendDone: boolean;
    abortDone: boolean;
    stateChangeAttached: boolean;
    constructor();
}
export declare class ajaxRecord {
    completed: boolean;
    requestHeadersSize: number;
    requestHeaders: any;
    responseReceivingDuration: number;
    callbackDuration: number;
    ajaxTotalDuration: number;
    aborted: number;
    pageUrl: string;
    requestUrl: string;
    requestSize: number;
    method: string;
    perfMark: PerformanceMark;
    perfTiming: PerformanceResourceTiming;
    perfAttempts?: number;
    async?: boolean;
    errorStatusText?: boolean;
    status: string | number;
    requestSentTime: number;
    responseStartedTime: number;
    responseFinishedTime: number;
    callbackFinishedTime: number;
    endTime: number;
    xhrMonitoringState: XHRMonitoringState;
    clientFailure: number;
    /**
     * The traceId to use for the dependency call
     */
    traceID: string;
    /**
     * The spanId to use for the dependency call
     */
    spanID: string;
    /**
     * The traceFlags to use for the dependency call
     */
    traceFlags?: number;
    /**
     * The trace context to use for reporting the remote dependency call
     */
    eventTraceCtx: ITraceCtx;
    /**
     * The listener assigned context values that will be passed to any dependency initializer
     */
    context?: {
        [key: string]: any;
    };
    constructor(traceId: string, spanId: string, logger: IDiagnosticLogger, traceCtx?: IDistributedTraceContext);
    getAbsoluteUrl(): string;
    getPathName(): string;
    CreateTrackItem(ajaxType: string, enableRequestHeaderTracking: boolean, getResponse: () => IAjaxRecordResponse): IDependencyTelemetry;
    getPartAProps(): {
        [key: string]: any;
    };
}
export {};

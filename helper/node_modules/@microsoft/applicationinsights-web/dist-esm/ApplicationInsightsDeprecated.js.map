{"version":3,"file":"ApplicationInsightsDeprecated.js.map","sources":["ApplicationInsightsDeprecated.js"],"sourcesContent":["import dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { DEFAULT_BREEZE_ENDPOINT, DEFAULT_BREEZE_PATH, ProcessLegacy, stringToBoolOrDefault } from \"@microsoft/applicationinsights-common\";\r\nimport { arrIndexOf, isFunction, proxyAssign, proxyFunctions, throwError } from \"@microsoft/applicationinsights-core-js\";\r\nimport { DfltAjaxCorrelationHeaderExDomains } from \"@microsoft/applicationinsights-dependencies-js\";\r\nimport { STR_ADD_TELEMETRY_INITIALIZER, STR_ADD_TELEMETRY_INITIALIZERS, STR_CLEAR_AUTHENTICATED_USER_CONTEXT, STR_FLUSH, STR_GET_COOKIE_MGR, STR_SET_AUTHENTICATED_USER_CONTEXT, STR_SNIPPET, STR_START_TRACK_EVENT, STR_START_TRACK_PAGE, STR_STOP_TRACK_EVENT, STR_STOP_TRACK_PAGE, STR_TRACK_DEPENDENCY_DATA, STR_TRACK_EVENT, STR_TRACK_EXCEPTION, STR_TRACK_METRIC, STR_TRACK_PAGE_VIEW, STR_TRACK_TRACE } from \"./InternalConstants\";\r\nimport { _DYN_AUTO_TRACK_PAGE_VISI5, _DYN_CONFIG, _DYN_CONTEXT, _DYN_CORRELATION_HEADER_E10, _DYN_DIAGNOSTIC_LOG_INTER4, _DYN_DISABLE_AJAX_TRACKIN6, _DYN_DISABLE_CORRELATION_9, _DYN_DISABLE_EXCEPTION_TR2, _DYN_DISABLE_FLUSH_ON_BEF11, _DYN_DISABLE_TELEMETRY, _DYN_EMIT_LINE_DELIMITED_3, _DYN_ENABLE_CORS_CORRELAT17, _DYN_ENABLE_SESSION_STORA13, _DYN_ENDPOINT_URL, _DYN_IS_BEACON_API_DISABL8, _DYN_IS_BROWSER_LINK_TRAC16, _DYN_IS_COOKIE_USE_DISABL14, _DYN_IS_STORAGE_USE_DISAB15, _DYN_LOAD_APP_INSIGHTS, _DYN_MAX_AJAX_CALLS_PER_V7, _DYN_MAX_BATCH_INTERVAL, _DYN_MAX_BATCH_SIZE_IN_BY1, _DYN_PUSH, _DYN_QUEUE, _DYN_SAMPLING_PERCENTAGE, _DYN_UPDATE_SNIPPET_DEFIN0 } from \"./__DynamicConstants\";\r\n// This is an exclude list of properties that should not be updated during initialization\r\n// They include a combination of private and internal property names\r\nvar _ignoreUpdateSnippetProperties = [\r\n    STR_SNIPPET, \"getDefaultConfig\", \"_hasLegacyInitializers\", \"_queue\", \"_processLegacyInitializers\"\r\n];\r\nfunction getDefaultConfig(config) {\r\n    if (!config) {\r\n        config = {};\r\n    }\r\n    // set default values\r\n    config[_DYN_ENDPOINT_URL /* @min:%2eendpointUrl */] = config[_DYN_ENDPOINT_URL /* @min:%2eendpointUrl */] || DEFAULT_BREEZE_ENDPOINT + DEFAULT_BREEZE_PATH;\r\n    config.sessionRenewalMs = 30 * 60 * 1000;\r\n    config.sessionExpirationMs = 24 * 60 * 60 * 1000;\r\n    config[_DYN_MAX_BATCH_SIZE_IN_BY1 /* @min:%2emaxBatchSizeInBytes */] = config[_DYN_MAX_BATCH_SIZE_IN_BY1 /* @min:%2emaxBatchSizeInBytes */] > 0 ? config[_DYN_MAX_BATCH_SIZE_IN_BY1 /* @min:%2emaxBatchSizeInBytes */] : 102400; // 100kb\r\n    config[_DYN_MAX_BATCH_INTERVAL /* @min:%2emaxBatchInterval */] = !isNaN(config[_DYN_MAX_BATCH_INTERVAL /* @min:%2emaxBatchInterval */]) ? config[_DYN_MAX_BATCH_INTERVAL /* @min:%2emaxBatchInterval */] : 15000;\r\n    config.enableDebug = stringToBoolOrDefault(config.enableDebug);\r\n    config[_DYN_DISABLE_EXCEPTION_TR2 /* @min:%2edisableExceptionTracking */] = stringToBoolOrDefault(config[_DYN_DISABLE_EXCEPTION_TR2 /* @min:%2edisableExceptionTracking */]);\r\n    config[_DYN_DISABLE_TELEMETRY /* @min:%2edisableTelemetry */] = stringToBoolOrDefault(config[_DYN_DISABLE_TELEMETRY /* @min:%2edisableTelemetry */]);\r\n    config.verboseLogging = stringToBoolOrDefault(config.verboseLogging);\r\n    config[_DYN_EMIT_LINE_DELIMITED_3 /* @min:%2eemitLineDelimitedJson */] = stringToBoolOrDefault(config[_DYN_EMIT_LINE_DELIMITED_3 /* @min:%2eemitLineDelimitedJson */]);\r\n    config[_DYN_DIAGNOSTIC_LOG_INTER4 /* @min:%2ediagnosticLogInterval */] = config[_DYN_DIAGNOSTIC_LOG_INTER4 /* @min:%2ediagnosticLogInterval */] || 10000;\r\n    config[_DYN_AUTO_TRACK_PAGE_VISI5 /* @min:%2eautoTrackPageVisitTime */] = stringToBoolOrDefault(config[_DYN_AUTO_TRACK_PAGE_VISI5 /* @min:%2eautoTrackPageVisitTime */]);\r\n    if (isNaN(config[_DYN_SAMPLING_PERCENTAGE /* @min:%2esamplingPercentage */]) || config[_DYN_SAMPLING_PERCENTAGE /* @min:%2esamplingPercentage */] <= 0 || config[_DYN_SAMPLING_PERCENTAGE /* @min:%2esamplingPercentage */] >= 100) {\r\n        config[_DYN_SAMPLING_PERCENTAGE /* @min:%2esamplingPercentage */] = 100;\r\n    }\r\n    config[_DYN_DISABLE_AJAX_TRACKIN6 /* @min:%2edisableAjaxTracking */] = stringToBoolOrDefault(config[_DYN_DISABLE_AJAX_TRACKIN6 /* @min:%2edisableAjaxTracking */]);\r\n    config[_DYN_MAX_AJAX_CALLS_PER_V7 /* @min:%2emaxAjaxCallsPerView */] = !isNaN(config[_DYN_MAX_AJAX_CALLS_PER_V7 /* @min:%2emaxAjaxCallsPerView */]) ? config[_DYN_MAX_AJAX_CALLS_PER_V7 /* @min:%2emaxAjaxCallsPerView */] : 500;\r\n    config[_DYN_IS_BEACON_API_DISABL8 /* @min:%2eisBeaconApiDisabled */] = stringToBoolOrDefault(config[_DYN_IS_BEACON_API_DISABL8 /* @min:%2eisBeaconApiDisabled */], true);\r\n    config[_DYN_DISABLE_CORRELATION_9 /* @min:%2edisableCorrelationHeaders */] = stringToBoolOrDefault(config[_DYN_DISABLE_CORRELATION_9 /* @min:%2edisableCorrelationHeaders */]);\r\n    config[_DYN_CORRELATION_HEADER_E10 /* @min:%2ecorrelationHeaderExcludedDomains */] = config[_DYN_CORRELATION_HEADER_E10 /* @min:%2ecorrelationHeaderExcludedDomains */] || DfltAjaxCorrelationHeaderExDomains;\r\n    config[_DYN_DISABLE_FLUSH_ON_BEF11 /* @min:%2edisableFlushOnBeforeUnload */] = stringToBoolOrDefault(config[_DYN_DISABLE_FLUSH_ON_BEF11 /* @min:%2edisableFlushOnBeforeUnload */]);\r\n    config.disableFlushOnUnload = stringToBoolOrDefault(config.disableFlushOnUnload, config[_DYN_DISABLE_FLUSH_ON_BEF11 /* @min:%2edisableFlushOnBeforeUnload */]);\r\n    config[_DYN_ENABLE_SESSION_STORA13 /* @min:%2eenableSessionStorageBuffer */] = stringToBoolOrDefault(config[_DYN_ENABLE_SESSION_STORA13 /* @min:%2eenableSessionStorageBuffer */], true);\r\n    config.isRetryDisabled = stringToBoolOrDefault(config.isRetryDisabled);\r\n    config[_DYN_IS_COOKIE_USE_DISABL14 /* @min:%2eisCookieUseDisabled */] = stringToBoolOrDefault(config[_DYN_IS_COOKIE_USE_DISABL14 /* @min:%2eisCookieUseDisabled */]);\r\n    config[_DYN_IS_STORAGE_USE_DISAB15 /* @min:%2eisStorageUseDisabled */] = stringToBoolOrDefault(config[_DYN_IS_STORAGE_USE_DISAB15 /* @min:%2eisStorageUseDisabled */]);\r\n    config[_DYN_IS_BROWSER_LINK_TRAC16 /* @min:%2eisBrowserLinkTrackingEnabled */] = stringToBoolOrDefault(config[_DYN_IS_BROWSER_LINK_TRAC16 /* @min:%2eisBrowserLinkTrackingEnabled */]);\r\n    config[_DYN_ENABLE_CORS_CORRELAT17 /* @min:%2eenableCorsCorrelation */] = stringToBoolOrDefault(config[_DYN_ENABLE_CORS_CORRELAT17 /* @min:%2eenableCorsCorrelation */]);\r\n    return config;\r\n}\r\nvar AppInsightsDeprecated = /** @class */ (function () {\r\n    function AppInsightsDeprecated(snippet, appInsightsNew) {\r\n        var _this = this;\r\n        var _hasLegacyInitializers = false;\r\n        var _queue = [];\r\n        var _config;\r\n        dynamicProto(AppInsightsDeprecated, this, function (_self) {\r\n            _config = getDefaultConfig(snippet[_DYN_CONFIG /* @min:%2econfig */]);\r\n            _self[_DYN_CONFIG /* @min:%2econfig */] = _config;\r\n            _self[STR_SNIPPET /* @min:%2esnippet */] = snippet;\r\n            _self.appInsightsNew = appInsightsNew;\r\n            _self[_DYN_CONTEXT /* @min:%2econtext */] = { addTelemetryInitializer: _addTelemetryInitializers.bind(_self) };\r\n            _self[STR_ADD_TELEMETRY_INITIALIZERS /* @min:%2eaddTelemetryInitializers */] = _addTelemetryInitializers;\r\n            function _addTelemetryInitializers(callBack) {\r\n                // Add initializer to current processing only if there is any old telemetry initializer\r\n                if (!_hasLegacyInitializers) {\r\n                    appInsightsNew[STR_ADD_TELEMETRY_INITIALIZER /* @min:%2eaddTelemetryInitializer */](function (item) {\r\n                        _processLegacyInitializers(item); // setup call back for each legacy processor\r\n                    });\r\n                    _hasLegacyInitializers = true;\r\n                }\r\n                _queue[_DYN_PUSH /* @min:%2epush */](callBack);\r\n            }\r\n            proxyFunctions(_self, appInsightsNew, [\r\n                STR_GET_COOKIE_MGR,\r\n                STR_START_TRACK_PAGE,\r\n                STR_STOP_TRACK_PAGE,\r\n                STR_FLUSH,\r\n                STR_START_TRACK_EVENT,\r\n                STR_STOP_TRACK_EVENT\r\n            ]);\r\n            _self[STR_TRACK_PAGE_VIEW /* @min:%2etrackPageView */] = function (name, url, properties, measurements, duration) {\r\n                var telemetry = {\r\n                    name: name,\r\n                    uri: url,\r\n                    properties: properties,\r\n                    measurements: measurements\r\n                };\r\n                // fix for props, measurements, duration\r\n                appInsightsNew[STR_TRACK_PAGE_VIEW /* @min:%2etrackPageView */](telemetry);\r\n            };\r\n            _self[STR_TRACK_EVENT /* @min:%2etrackEvent */] = function (name, properties, measurements) {\r\n                appInsightsNew[STR_TRACK_EVENT /* @min:%2etrackEvent */]({ name: name });\r\n            };\r\n            _self.trackDependency = function (id, method, absoluteUrl, pathName, totalTime, success, resultCode) {\r\n                appInsightsNew[STR_TRACK_DEPENDENCY_DATA /* @min:%2etrackDependencyData */]({\r\n                    id: id,\r\n                    target: absoluteUrl,\r\n                    type: pathName,\r\n                    duration: totalTime,\r\n                    properties: { HttpMethod: method },\r\n                    success: success,\r\n                    responseCode: resultCode\r\n                });\r\n            };\r\n            _self[STR_TRACK_EXCEPTION /* @min:%2etrackException */] = function (exception, handledAt, properties, measurements, severityLevel) {\r\n                appInsightsNew[STR_TRACK_EXCEPTION /* @min:%2etrackException */]({\r\n                    exception: exception\r\n                });\r\n            };\r\n            _self[STR_TRACK_METRIC /* @min:%2etrackMetric */] = function (name, average, sampleCount, min, max, properties) {\r\n                appInsightsNew[STR_TRACK_METRIC /* @min:%2etrackMetric */]({ name: name, average: average, sampleCount: sampleCount, min: min, max: max });\r\n            };\r\n            _self[STR_TRACK_TRACE /* @min:%2etrackTrace */] = function (message, properties, severityLevel) {\r\n                appInsightsNew[STR_TRACK_TRACE /* @min:%2etrackTrace */]({ message: message, severityLevel: severityLevel });\r\n            };\r\n            _self[STR_SET_AUTHENTICATED_USER_CONTEXT /* @min:%2esetAuthenticatedUserContext */] = function (authenticatedUserId, accountId, storeInCookie) {\r\n                appInsightsNew[_DYN_CONTEXT /* @min:%2econtext */].user[STR_SET_AUTHENTICATED_USER_CONTEXT /* @min:%2esetAuthenticatedUserContext */](authenticatedUserId, accountId, storeInCookie);\r\n            };\r\n            _self[STR_CLEAR_AUTHENTICATED_USER_CONTEXT /* @min:%2eclearAuthenticatedUserContext */] = function () {\r\n                appInsightsNew[_DYN_CONTEXT /* @min:%2econtext */].user[STR_CLEAR_AUTHENTICATED_USER_CONTEXT /* @min:%2eclearAuthenticatedUserContext */]();\r\n            };\r\n            _self._onerror = function (message, url, lineNumber, columnNumber, error) {\r\n                appInsightsNew._onerror({ message: message, url: url, lineNumber: lineNumber, columnNumber: columnNumber, error: error });\r\n            };\r\n            _self.downloadAndSetup = function (config) {\r\n                throwError(\"downloadAndSetup not implemented in web SKU\");\r\n            };\r\n            _self[_DYN_UPDATE_SNIPPET_DEFIN0 /* @min:%2eupdateSnippetDefinitions */] = function (snippet) {\r\n                // apply full appInsights to the global instance\r\n                // Note: This must be called before loadAppInsights is called\r\n                proxyAssign(snippet, _this, function (name) {\r\n                    // Not excluding names prefixed with \"_\" as we need to proxy some functions like _onError\r\n                    return name && arrIndexOf(_ignoreUpdateSnippetProperties, name) === -1;\r\n                });\r\n            };\r\n            // note: these are split into methods to enable unit tests\r\n            _self[_DYN_LOAD_APP_INSIGHTS /* @min:%2eloadAppInsights */] = function () {\r\n                // initialize global instance of appInsights\r\n                // var appInsights = new Microsoft.ApplicationInsights.AppInsights(_self.config);\r\n                // implement legacy version of trackPageView for 0.10<\r\n                if (_self[_DYN_CONFIG /* @min:%2econfig */][\"iKey\"]) {\r\n                    var originalTrackPageView_1 = _self[STR_TRACK_PAGE_VIEW /* @min:%2etrackPageView */];\r\n                    _self[STR_TRACK_PAGE_VIEW /* @min:%2etrackPageView */] = function (pagePath, properties, measurements) {\r\n                        originalTrackPageView_1.apply(_self, [null, pagePath, properties, measurements]);\r\n                    };\r\n                }\r\n                // implement legacy pageView interface if it is present in the snippet\r\n                var legacyPageView = \"logPageView\";\r\n                if (isFunction(_self[STR_SNIPPET /* @min:%2esnippet */][legacyPageView])) {\r\n                    _this[legacyPageView] = function (pagePath, properties, measurements) {\r\n                        _self[STR_TRACK_PAGE_VIEW /* @min:%2etrackPageView */](null, pagePath, properties, measurements);\r\n                    };\r\n                }\r\n                // implement legacy event interface if it is present in the snippet\r\n                var legacyEvent = \"logEvent\";\r\n                if (isFunction(_self[STR_SNIPPET /* @min:%2esnippet */][legacyEvent])) {\r\n                    _this[legacyEvent] = function (name, props, measurements) {\r\n                        _self[STR_TRACK_EVENT /* @min:%2etrackEvent */](name, props, measurements);\r\n                    };\r\n                }\r\n                return _this;\r\n            };\r\n            function _processLegacyInitializers(item) {\r\n                // instead of mapping new to legacy and then back again and repeating in channel, attach callback for channel to call\r\n                item.tags[ProcessLegacy] = _queue;\r\n                return item;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n    * The array of telemetry initializers to call before sending each telemetry item.\r\n    */\r\n    AppInsightsDeprecated.prototype.addTelemetryInitializers = function (callBack) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Get the current cookie manager for this instance\r\n     */\r\n    AppInsightsDeprecated.prototype.getCookieMgr = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    AppInsightsDeprecated.prototype.startTrackPage = function (name) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsDeprecated.prototype.stopTrackPage = function (name, url, properties, measurements) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsDeprecated.prototype.trackPageView = function (name, url, properties, measurements, duration) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsDeprecated.prototype.trackEvent = function (name, properties, measurements) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsDeprecated.prototype.trackDependency = function (id, method, absoluteUrl, pathName, totalTime, success, resultCode) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsDeprecated.prototype.trackException = function (exception, handledAt, properties, measurements, severityLevel) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsDeprecated.prototype.trackMetric = function (name, average, sampleCount, min, max, properties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsDeprecated.prototype.trackTrace = function (message, properties, severityLevel) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsDeprecated.prototype.flush = function (async) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsDeprecated.prototype.setAuthenticatedUserContext = function (authenticatedUserId, accountId, storeInCookie) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsDeprecated.prototype.clearAuthenticatedUserContext = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsDeprecated.prototype._onerror = function (message, url, lineNumber, columnNumber, error) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsDeprecated.prototype.startTrackEvent = function (name) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsDeprecated.prototype.stopTrackEvent = function (name, properties, measurements) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsDeprecated.prototype.downloadAndSetup = function (config) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsDeprecated.prototype.updateSnippetDefinitions = function (snippet) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    // note: these are split into methods to enable unit tests\r\n    AppInsightsDeprecated.prototype.loadAppInsights = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return AppInsightsDeprecated;\r\n}());\r\nexport { AppInsightsDeprecated };\r\n//# sourceMappingURL=ApplicationInsightsDeprecated.js.map"],"names":[],"mappingsoEAEM,CAAC;;;;;;iCAC0B;AACjC;AACA;AACA"}
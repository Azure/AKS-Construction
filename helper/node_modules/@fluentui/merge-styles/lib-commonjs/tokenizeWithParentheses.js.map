{"version":3,"file":"tokenizeWithParentheses.js","sourceRoot":"../src/","sources":["tokenizeWithParentheses.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;GAYG;AACH,SAAgB,uBAAuB,CAAC,KAAa;IACnD,IAAM,KAAK,GAAG,EAAE,CAAC;IACjB,IAAI,SAAS,GAAG,CAAC,CAAC;IAClB,IAAI,MAAM,GAAG,CAAC,CAAC;IAEf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACrC,QAAQ,KAAK,CAAC,CAAC,CAAC,EAAE;YAChB,KAAK,GAAG;gBACN,MAAM,EAAE,CAAC;gBACT,MAAM;YACR,KAAK,GAAG;gBACN,IAAI,MAAM,EAAE;oBACV,MAAM,EAAE,CAAC;iBACV;gBACD,MAAM;YACR,KAAK,IAAI,CAAC;YACV,KAAK,GAAG;gBACN,IAAI,CAAC,MAAM,EAAE;oBACX,+CAA+C;oBAC/C,IAAI,CAAC,GAAG,SAAS,EAAE;wBACjB,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;qBAC3C;oBACD,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC;iBACnB;gBACD,MAAM;SACT;KACF;IAED,oBAAoB;IACpB,IAAI,SAAS,GAAG,KAAK,CAAC,MAAM,EAAE;QAC5B,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;KACxC;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAlCD,0DAkCC","sourcesContent":["/**\n * Split a string into tokens separated by whitespace, except all text within parentheses\n * is treated as a single token (whitespace is ignored within parentheses).\n *\n * Unlike String.split(' '), multiple consecutive space characters are collapsed and\n * removed from the returned array (including leading and trailing spaces).\n *\n * For example:\n * `tokenizeWithParentheses(\"3px calc(var(--x) / 2) 9px    0 \")`\n *   => `[\"3px\", \"calc(var(--x) / 2)\", \"9px\", \"0\"]`\n *\n * @returns The array of tokens. Returns an empty array if the string was empty or contained only whitespace.\n */\nexport function tokenizeWithParentheses(value: string): string[] {\n  const parts = [];\n  let partStart = 0;\n  let parens = 0;\n\n  for (let i = 0; i < value.length; i++) {\n    switch (value[i]) {\n      case '(':\n        parens++;\n        break;\n      case ')':\n        if (parens) {\n          parens--;\n        }\n        break;\n      case '\\t':\n      case ' ':\n        if (!parens) {\n          // Add the new part if it's not an empty string\n          if (i > partStart) {\n            parts.push(value.substring(partStart, i));\n          }\n          partStart = i + 1;\n        }\n        break;\n    }\n  }\n\n  // Add the last part\n  if (partStart < value.length) {\n    parts.push(value.substring(partStart));\n  }\n\n  return parts;\n}\n"]}
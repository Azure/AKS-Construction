{"version":3,"file":"Stylesheet.js","sourceRoot":"../src/","sources":["Stylesheet.ts"],"names":[],"mappings":"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","sourcesContent":["import { IStyle } from './IStyle';\n\nexport const InjectionMode = {\n  /**\n   * Avoids style injection, use getRules() to read the styles.\n   */\n  none: 0 as 0,\n\n  /**\n   * Inserts rules using the insertRule api.\n   */\n  insertNode: 1 as 1,\n\n  /**\n   * Appends rules using appendChild.\n   */\n  appendChild: 2 as 2,\n};\n\nexport type InjectionMode = typeof InjectionMode[keyof typeof InjectionMode];\n\n/**\n * CSP settings for the stylesheet\n */\nexport interface ICSPSettings {\n  /**\n   * Nonce to inject into script tag\n   */\n  nonce?: string;\n}\n\n/**\n * Stylesheet config.\n *\n * @public\n */\nexport interface IStyleSheetConfig {\n  /**\n   * Injection mode for how rules are inserted.\n   */\n  injectionMode?: InjectionMode;\n\n  /**\n   * Default 'displayName' to use for a className.\n   * @defaultvalue 'css'\n   */\n  defaultPrefix?: string;\n\n  /**\n   * Defines the default direction of rules for auto-rtlifying things.\n   * While typically this is represented as a DIR attribute in the markup,\n   * the DIR is not enough to control whether padding goes on the left or\n   * right. Use this to set the default direction when rules are registered.\n   */\n  rtl?: boolean;\n\n  /**\n   * Default 'namespace' to attach before the className.\n   */\n  namespace?: string;\n\n  /**\n   * CSP settings\n   */\n  cspSettings?: ICSPSettings;\n\n  /**\n   * Callback executed when a rule is inserted.\n   * @deprecated Use `Stylesheet.onInsertRule` instead.\n   */\n  onInsertRule?: (rule: string) => void;\n\n  /**\n   * Initial value for classnames cache. Key is serialized css rules associated with a classname.\n   */\n  classNameCache?: { [key: string]: string };\n}\n\n/**\n * Representation of Stylesheet used for rehydration.\n */\nexport interface ISerializedStylesheet {\n  classNameToArgs: Stylesheet['_classNameToArgs'];\n  counter: Stylesheet['_counter'];\n  keyToClassName: Stylesheet['_keyToClassName'];\n  preservedRules: Stylesheet['_preservedRules'];\n  rules: Stylesheet['_rules'];\n}\n\nconst STYLESHEET_SETTING = '__stylesheet__';\n/**\n * MSIE 11 doesn't cascade styles based on DOM ordering, but rather on the order that each style node\n * is created. As such, to maintain consistent priority, IE11 should reuse a single style node.\n */\nconst REUSE_STYLE_NODE = typeof navigator !== 'undefined' && /rv:11.0/.test(navigator.userAgent);\n\nlet _global: (Window | {}) & {\n  [STYLESHEET_SETTING]?: Stylesheet;\n  FabricConfig?: {\n    mergeStyles?: IStyleSheetConfig;\n    serializedStylesheet?: ISerializedStylesheet;\n  };\n} = {};\n\n// Grab window.\ntry {\n  _global = window || {};\n} catch {\n  /* leave as blank object */\n}\n\nlet _stylesheet: Stylesheet | undefined;\n\n/**\n * Represents the state of styles registered in the page. Abstracts\n * the surface for adding styles to the stylesheet, exposes helpers\n * for reading the styles registered in server rendered scenarios.\n *\n * @public\n */\nexport class Stylesheet {\n  private _lastStyleElement?: HTMLStyleElement;\n  private _styleElement?: HTMLStyleElement;\n  private _rules: string[] = [];\n  private _preservedRules: string[] = [];\n  private _config: IStyleSheetConfig;\n  private _counter = 0;\n  private _keyToClassName: { [key: string]: string } = {};\n  private _onInsertRuleCallbacks: Function[] = [];\n  private _onResetCallbacks: Function[] = [];\n  private _classNameToArgs: { [key: string]: { args: any; rules: string[] } } = {};\n\n  /**\n   * Gets the singleton instance.\n   */\n  public static getInstance(): Stylesheet {\n    _stylesheet = _global[STYLESHEET_SETTING] as Stylesheet;\n\n    if (!_stylesheet || (_stylesheet._lastStyleElement && _stylesheet._lastStyleElement.ownerDocument !== document)) {\n      const fabricConfig = _global?.FabricConfig || {};\n\n      const stylesheet = new Stylesheet(fabricConfig.mergeStyles, fabricConfig.serializedStylesheet);\n      _stylesheet = stylesheet;\n      _global[STYLESHEET_SETTING] = stylesheet;\n    }\n\n    return _stylesheet;\n  }\n\n  constructor(config?: IStyleSheetConfig, serializedStylesheet?: ISerializedStylesheet) {\n    this._config = {\n      // If there is no document we won't have an element to inject into.\n      injectionMode: typeof document === 'undefined' ? InjectionMode.none : InjectionMode.insertNode,\n      defaultPrefix: 'css',\n      namespace: undefined,\n      cspSettings: undefined,\n      ...config,\n    };\n\n    this._classNameToArgs = serializedStylesheet?.classNameToArgs ?? this._classNameToArgs;\n    this._counter = serializedStylesheet?.counter ?? this._counter;\n    this._keyToClassName = this._config.classNameCache ?? serializedStylesheet?.keyToClassName ?? this._keyToClassName;\n    this._preservedRules = serializedStylesheet?.preservedRules ?? this._preservedRules;\n    this._rules = serializedStylesheet?.rules ?? this._rules;\n  }\n\n  /**\n   * Serializes the Stylesheet instance into a format which allows rehydration on creation.\n   * @returns string representation of `ISerializedStylesheet` interface.\n   */\n  public serialize(): string {\n    return JSON.stringify({\n      classNameToArgs: this._classNameToArgs,\n      counter: this._counter,\n      keyToClassName: this._keyToClassName,\n      preservedRules: this._preservedRules,\n      rules: this._rules,\n    });\n  }\n\n  /**\n   * Configures the stylesheet.\n   */\n  public setConfig(config?: IStyleSheetConfig): void {\n    this._config = {\n      ...this._config,\n      ...config,\n    };\n  }\n\n  /**\n   * Configures a reset callback.\n   *\n   * @param callback - A callback which will be called when the Stylesheet is reset.\n   * @returns function which when called un-registers provided callback.\n   */\n  public onReset(callback: Function): Function {\n    this._onResetCallbacks.push(callback);\n\n    return () => {\n      this._onResetCallbacks = this._onResetCallbacks.filter(cb => cb !== callback);\n    };\n  }\n\n  /**\n   * Configures an insert rule callback.\n   *\n   * @param callback - A callback which will be called when a rule is inserted.\n   * @returns function which when called un-registers provided callback.\n   */\n  public onInsertRule(callback: Function): Function {\n    this._onInsertRuleCallbacks.push(callback);\n\n    return () => {\n      this._onInsertRuleCallbacks = this._onInsertRuleCallbacks.filter(cb => cb !== callback);\n    };\n  }\n\n  /**\n   * Generates a unique classname.\n   *\n   * @param displayName - Optional value to use as a prefix.\n   */\n  public getClassName(displayName?: string): string {\n    const { namespace } = this._config;\n    const prefix = displayName || this._config.defaultPrefix;\n\n    return `${namespace ? namespace + '-' : ''}${prefix}-${this._counter++}`;\n  }\n\n  /**\n   * Used internally to cache information about a class which was\n   * registered with the stylesheet.\n   */\n  public cacheClassName(className: string, key: string, args: IStyle[], rules: string[]): void {\n    this._keyToClassName[key] = className;\n    this._classNameToArgs[className] = {\n      args,\n      rules,\n    };\n  }\n\n  /**\n   * Gets the appropriate classname given a key which was previously\n   * registered using cacheClassName.\n   */\n  public classNameFromKey(key: string): string | undefined {\n    return this._keyToClassName[key];\n  }\n\n  /**\n   * Gets all classnames cache with the stylesheet.\n   */\n  public getClassNameCache(): { [key: string]: string } {\n    return this._keyToClassName;\n  }\n\n  /**\n   * Gets the arguments associated with a given classname which was\n   * previously registered using cacheClassName.\n   */\n  public argsFromClassName(className: string): IStyle[] | undefined {\n    const entry = this._classNameToArgs[className];\n\n    return entry && entry.args;\n  }\n\n  /**\n   * Gets the rules associated with a given classname which was\n   * previously registered using cacheClassName.\n   */\n  public insertedRulesFromClassName(className: string): string[] | undefined {\n    const entry = this._classNameToArgs[className];\n\n    return entry && entry.rules;\n  }\n\n  /**\n   * Inserts a css rule into the stylesheet.\n   * @param preserve - Preserves the rule beyond a reset boundary.\n   */\n  public insertRule(rule: string, preserve?: boolean): void {\n    const { injectionMode } = this._config;\n    const element = injectionMode !== InjectionMode.none ? this._getStyleElement() : undefined;\n\n    if (preserve) {\n      this._preservedRules.push(rule);\n    }\n\n    if (element) {\n      switch (injectionMode) {\n        case InjectionMode.insertNode:\n          const { sheet } = element!;\n\n          try {\n            (sheet as CSSStyleSheet).insertRule(rule, (sheet as CSSStyleSheet).cssRules.length);\n          } catch (e) {\n            // The browser will throw exceptions on unsupported rules (such as a moz prefix in webkit.)\n            // We need to swallow the exceptions for this scenario, otherwise we'd need to filter\n            // which could be slower and bulkier.\n          }\n          break;\n\n        case InjectionMode.appendChild:\n          element.appendChild(document.createTextNode(rule));\n          break;\n      }\n    } else {\n      this._rules.push(rule);\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._config.onInsertRule) {\n      // eslint-disable-next-line deprecation/deprecation\n      this._config.onInsertRule(rule);\n    }\n\n    this._onInsertRuleCallbacks.forEach(callback => callback());\n  }\n\n  /**\n   * Gets all rules registered with the stylesheet; only valid when\n   * using InsertionMode.none.\n   */\n  public getRules(includePreservedRules?: boolean): string {\n    return (includePreservedRules ? this._preservedRules.join('') : '') + this._rules.join('');\n  }\n\n  /**\n   * Resets the internal state of the stylesheet. Only used in server\n   * rendered scenarios where we're using InsertionMode.none.\n   */\n  public reset(): void {\n    this._rules = [];\n    this._counter = 0;\n    this._classNameToArgs = {};\n    this._keyToClassName = {};\n\n    this._onResetCallbacks.forEach(callback => callback());\n  }\n\n  // Forces the regeneration of incoming styles without totally resetting the stylesheet.\n  public resetKeys(): void {\n    this._keyToClassName = {};\n  }\n\n  private _getStyleElement(): HTMLStyleElement | undefined {\n    if (!this._styleElement && typeof document !== 'undefined') {\n      this._styleElement = this._createStyleElement();\n\n      if (!REUSE_STYLE_NODE) {\n        // Reset the style element on the next frame.\n        window.requestAnimationFrame(() => {\n          this._styleElement = undefined;\n        });\n      }\n    }\n    return this._styleElement;\n  }\n\n  private _createStyleElement(): HTMLStyleElement {\n    const head: HTMLHeadElement = document.head;\n    const styleElement = document.createElement('style');\n    let nodeToInsertBefore: Node | null = null;\n\n    styleElement.setAttribute('data-merge-styles', 'true');\n\n    const { cspSettings } = this._config;\n    if (cspSettings) {\n      if (cspSettings.nonce) {\n        styleElement.setAttribute('nonce', cspSettings.nonce);\n      }\n    }\n    if (this._lastStyleElement) {\n      // If the `nextElementSibling` is null, then the insertBefore will act as a regular append.\n      // https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore#Syntax\n      nodeToInsertBefore = this._lastStyleElement.nextElementSibling;\n    } else {\n      const placeholderStyleTag: Element | null = this._findPlaceholderStyleTag();\n\n      if (placeholderStyleTag) {\n        nodeToInsertBefore = placeholderStyleTag.nextElementSibling;\n      } else {\n        nodeToInsertBefore = head.childNodes[0];\n      }\n    }\n\n    head!.insertBefore(styleElement, head!.contains(nodeToInsertBefore) ? nodeToInsertBefore : null);\n    this._lastStyleElement = styleElement;\n\n    return styleElement;\n  }\n\n  private _findPlaceholderStyleTag(): Element | null {\n    const head: HTMLHeadElement = document.head;\n    if (head) {\n      return head.querySelector('style[data-merge-styles]');\n    }\n    return null;\n  }\n}\n"]}
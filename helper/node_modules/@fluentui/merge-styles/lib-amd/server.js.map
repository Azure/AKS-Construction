{"version":3,"file":"server.js","sourceRoot":"../src/","sources":["server.ts"],"names":[],"mappings":";;;;IAEA;;;;OAIG;IACH,SAAgB,YAAY,CAAC,QAAsB,EAAE,SAAkB;QACrE,IAAM,UAAU,GAAG,uBAAU,CAAC,WAAW,EAAE,CAAC;QAE5C,UAAU,CAAC,SAAS,CAAC;YACnB,aAAa,EAAE,0BAAa,CAAC,IAAI;YACjC,SAAS,WAAA;SACV,CAAC,CAAC;QACH,UAAU,CAAC,KAAK,EAAE,CAAC;QAEnB,OAAO;YACL,IAAI,EAAE,QAAQ,EAAE;YAChB,GAAG,EAAE,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC;SAC/B,CAAC;IACJ,CAAC;IAbD,oCAaC","sourcesContent":["import { InjectionMode, Stylesheet } from './Stylesheet';\n\n/**\n * Renders a given string and returns both html and css needed for the html.\n * @param onRender - Function that returns a string.\n * @param namespace - Optional namespace to prepend to css classnames to avoid collisions.\n */\nexport function renderStatic(onRender: () => string, namespace?: string): { html: string; css: string } {\n  const stylesheet = Stylesheet.getInstance();\n\n  stylesheet.setConfig({\n    injectionMode: InjectionMode.none,\n    namespace,\n  });\n  stylesheet.reset();\n\n  return {\n    html: onRender(),\n    css: stylesheet.getRules(true),\n  };\n}\n"]}
{"version":3,"file":"tokenizeWithParentheses.js","sourceRoot":"../src/","sources":["tokenizeWithParentheses.ts"],"names":[],"mappings":";;;;IAAA;;;;;;;;;;;;OAYG;IACH,SAAgB,uBAAuB,CAAC,KAAa;QACnD,IAAM,KAAK,GAAG,EAAE,CAAC;QACjB,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,IAAI,MAAM,GAAG,CAAC,CAAC;QAEf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACrC,QAAQ,KAAK,CAAC,CAAC,CAAC,EAAE;gBAChB,KAAK,GAAG;oBACN,MAAM,EAAE,CAAC;oBACT,MAAM;gBACR,KAAK,GAAG;oBACN,IAAI,MAAM,EAAE;wBACV,MAAM,EAAE,CAAC;qBACV;oBACD,MAAM;gBACR,KAAK,IAAI,CAAC;gBACV,KAAK,GAAG;oBACN,IAAI,CAAC,MAAM,EAAE;wBACX,+CAA+C;wBAC/C,IAAI,CAAC,GAAG,SAAS,EAAE;4BACjB,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;yBAC3C;wBACD,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC;qBACnB;oBACD,MAAM;aACT;SACF;QAED,oBAAoB;QACpB,IAAI,SAAS,GAAG,KAAK,CAAC,MAAM,EAAE;YAC5B,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;SACxC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAlCD,0DAkCC","sourcesContent":["/**\n * Split a string into tokens separated by whitespace, except all text within parentheses\n * is treated as a single token (whitespace is ignored within parentheses).\n *\n * Unlike String.split(' '), multiple consecutive space characters are collapsed and\n * removed from the returned array (including leading and trailing spaces).\n *\n * For example:\n * `tokenizeWithParentheses(\"3px calc(var(--x) / 2) 9px    0 \")`\n *   => `[\"3px\", \"calc(var(--x) / 2)\", \"9px\", \"0\"]`\n *\n * @returns The array of tokens. Returns an empty array if the string was empty or contained only whitespace.\n */\nexport function tokenizeWithParentheses(value: string): string[] {\n  const parts = [];\n  let partStart = 0;\n  let parens = 0;\n\n  for (let i = 0; i < value.length; i++) {\n    switch (value[i]) {\n      case '(':\n        parens++;\n        break;\n      case ')':\n        if (parens) {\n          parens--;\n        }\n        break;\n      case '\\t':\n      case ' ':\n        if (!parens) {\n          // Add the new part if it's not an empty string\n          if (i > partStart) {\n            parts.push(value.substring(partStart, i));\n          }\n          partStart = i + 1;\n        }\n        break;\n    }\n  }\n\n  // Add the last part\n  if (partStart < value.length) {\n    parts.push(value.substring(partStart));\n  }\n\n  return parts;\n}\n"]}
{"version":3,"file":"Slider.types.js","sourceRoot":"../src/","sources":["components/Slider/Slider.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { IStyle, ITheme } from '@fluentui/style-utilities';\nimport type { IStyleFunctionOrObject, IRefObject } from '@fluentui/utilities';\n\n/**\n * {@docCategory Slider}\n */\nexport interface ISlider {\n  value: number | undefined;\n\n  focus: () => void;\n\n  range?: [number, number];\n}\n\n/**\n * {@docCategory Slider}\n */\nexport interface ISliderProps\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'defaultValue' | 'onChange'>,\n    React.RefAttributes<HTMLDivElement> {\n  /**\n   * Optional callback to access the ISlider interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ISlider>;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ISliderStyleProps, ISliderStyles>;\n\n  /**\n   * Theme provided by High-Order Component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Description label of the Slider\n   */\n  label?: string;\n\n  /**\n   * The initial value of the Slider. Use this if you intend for the Slider to be an uncontrolled component.\n   * This value is mutually exclusive to value. Use one or the other.\n   */\n  defaultValue?: number;\n\n  /**\n   * The initial value of the Slider. Use this if you intend to pass in a new value as a result of onChange events.\n   * This value is mutually exclusive to defaultValue. Use one or the other.\n   */\n  value?: number;\n\n  /**\n   * The initial lower value of the Slider is ranged is true. Use this if you intend for the Slider to be an\n   * uncontrolled component. This value is mutually exclusive to lowerValue. Use one or the other.\n   */\n  defaultLowerValue?: number;\n\n  /**\n   * The initial lower value of the Slider is ranged is true. Use this if you intend to pass in a new value as a\n   * result of onChange events. This value is mutually exclusive to defaultLowerValue. Use one or the other.\n   */\n  lowerValue?: number;\n\n  /**\n   * The min value of the Slider\n   * @defaultvalue 0\n   */\n  min?: number;\n\n  /**\n   * The max value of the Slider\n   * @defaultvalue 10\n   */\n  max?: number;\n\n  /**\n   * The difference between the two adjacent values of the Slider\n   * @defaultvalue 1\n   */\n  step?: number;\n\n  /**\n   * Whether to show the value on the right of the Slider.\n   * @defaultvalue true\n   */\n  showValue?: boolean;\n\n  /**\n   * Callback when the value has been changed. This will be called on every individual step;\n   * to only be notified after changes have stopped, use `onChanged` instead.\n   * If `ranged` is true, `value` is the upper value, and `range` contains the lower and upper bounds of the range.\n   */\n  onChange?: (\n    value: number,\n    range?: [number, number],\n    event?: React.MouseEvent | React.TouchEvent | MouseEvent | TouchEvent | React.KeyboardEvent,\n  ) => void;\n\n  /**\n   * Callback on mouse up, touch end, or after key presses have stopped.\n   * To be notified on every individual step, use `onChange` instead.\n   * @param event - Type is `React.MouseEvent | React.TouchEvent | MouseEvent | TouchEvent | React.KeyboardEvent`\n   * (may be corrected in a future major version)\n   */\n  // TODO: fix event type if we release another major version\n  onChanged?: (event: any, value: number, range?: [number, number]) => void;\n\n  /**\n   * A description of the Slider for the benefit of screen readers.\n   */\n  ariaLabel?: string;\n\n  /**\n   * If `ranged` is true, display two thumbs that allow the lower and upper bounds of a range to be selected.\n   * The lower bound is defined by `lowerValue`, and the upper bound is defined by `value`.\n   */\n  ranged?: boolean;\n\n  /**\n   * A text description of the Slider number value for the benefit of screen readers.\n   * This should be used when the Slider number value is not accurately represented by a number.\n   */\n  ariaValueText?: (value: number) => string;\n\n  /**\n   * Whether to render the slider vertically.\n   * @default `false` (render horizontally)\n   */\n  vertical?: boolean;\n\n  /**\n   * Whether to render the Slider as disabled.\n   * @defaultvalue false\n   */\n  disabled?: boolean;\n\n  /**\n   * Whether to decide that thumb will snap to closest value while moving the slider\n   * @defaultvalue false\n   */\n  snapToStep?: boolean;\n\n  /**\n   * Class name to attach to the slider root element.\n   */\n  className?: string;\n\n  /**\n   * Additional props for the actual `role=\"slider\"` (slider box) element.\n   * (Note that this element is not actually a button in the current implementation.)\n   */\n  buttonProps?: React.HTMLAttributes<HTMLButtonElement>;\n\n  /**\n   * Custom formatter for the slider value.\n   */\n  valueFormat?: (value: number) => string;\n\n  /**\n   * Whether to attach the origin of slider to zero. Helpful when the range include negatives.\n   * @defaultvalue false\n   */\n  originFromZero?: boolean;\n}\n\n/**\n * {@docCategory Slider}\n */\nexport type ISliderStyleProps = Required<Pick<ISliderProps, 'theme'>> &\n  Pick<ISliderProps, 'className' | 'disabled' | 'vertical' | 'ranged'> & {\n    showTransitions?: boolean;\n    showValue?: boolean;\n    titleLabelClassName?: string;\n  };\n\n/**\n * {@docCategory Slider}\n */\nexport interface ISliderStyles {\n  /**\n   * Style set for the root element.\n   */\n  root: IStyle;\n\n  /**\n   * Style set for the title label above the slider.\n   */\n  titleLabel: IStyle;\n\n  /**\n   * Style set for the container of the slider.\n   */\n  container: IStyle;\n\n  /**\n   * Style set for the actual box containting interactive elements of the slider.\n   */\n  slideBox: IStyle;\n\n  /**\n   * Style set for element that contains all the lines.\n   */\n  line: IStyle;\n\n  /**\n   * Style set for thumb of the slider.\n   */\n  thumb: IStyle;\n\n  /**\n   * Style set for both active and inactive sections of the line.\n   */\n  lineContainer: IStyle;\n\n  /**\n   * Style set for active portion of the line.\n   */\n  activeSection: IStyle;\n\n  /**\n   * Style set for inactive portion of the line.\n   */\n  inactiveSection: IStyle;\n\n  /**\n   * Style set for value label on right/below of the slider.\n   */\n  valueLabel: IStyle;\n\n  /**\n   * Style set for tick on 0 on number line. This element only shows up when originFromZero prop is true.\n   */\n  zeroTick: IStyle;\n}\n"]}
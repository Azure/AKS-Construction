{"version":3,"file":"Slider.base.js","sourceRoot":"../src/","sources":["components/Slider/Slider.base.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAC;AACjD,OAAO,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AACvC,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAGxC,IAAM,cAAc,GAAG,YAAY,CAAC;AAEpC,MAAM,CAAC,IAAM,UAAU,GAA0C,KAAK,CAAC,UAAU,CAC/E,UAAC,KAAK,EAAE,GAAG;IACT,IAAM,SAAS,GAAG,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IAExC,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;QACzC,gFAAgF;QAChF,WAAW,CAAC;YACV,IAAI,EAAE,cAAc;YACpB,KAAK,OAAA;YACL,iBAAiB,EAAE,EAAE,KAAK,EAAE,cAAc,EAAE;SAC7C,CAAC,CAAC;KACJ;IAED,OAAO,CACL,wCAAS,SAAS,CAAC,IAAI;QACpB,SAAS,IAAI,oBAAC,KAAK,eAAK,SAAS,CAAC,KAAK,EAAI;QAC5C,wCAAS,SAAS,CAAC,SAAS;YACzB,KAAK,CAAC,MAAM;gBACX,CAAC,KAAK,CAAC,QAAQ;oBACb,CAAC,CAAC,SAAS,CAAC,UAAU,IAAI,oBAAC,KAAK,eAAK,SAAS,CAAC,UAAU,EAAI;oBAC7D,CAAC,CAAC,SAAS,CAAC,eAAe,IAAI,oBAAC,KAAK,eAAK,SAAS,CAAC,eAAe,EAAI,CAAC;YAC5E,wCAAS,SAAS,CAAC,SAAS;gBAC1B,wCAAS,SAAS,CAAC,UAAU;oBAC1B,KAAK,CAAC,MAAM,IAAI,yCAAU,SAAS,CAAC,eAAe,EAAI;oBACxD,yCAAU,SAAS,CAAC,KAAK,EAAI;oBAC5B,SAAS,CAAC,QAAQ,IAAI,yCAAU,SAAS,CAAC,QAAQ,EAAI;oBACvD,yCAAU,SAAS,CAAC,mBAAmB,EAAI;oBAC3C,yCAAU,SAAS,CAAC,WAAW,EAAI;oBACnC,yCAAU,SAAS,CAAC,gBAAgB,EAAI,CACpC,CACF;YACL,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,QAAQ;gBAC7B,CAAC,CAAC,SAAS,CAAC,eAAe,IAAI,oBAAC,KAAK,eAAK,SAAS,CAAC,eAAe,EAAI;gBACvE,CAAC,CAAC,SAAS,CAAC,UAAU,IAAI,oBAAC,KAAK,eAAK,SAAS,CAAC,UAAU,EAAI,CAC3D;QACN,oBAAC,UAAU,OAAG,CACV,CACmB,CAAC;AAC9B,CAAC,CACF,CAAC;AACF,UAAU,CAAC,WAAW,GAAG,cAAc,CAAC","sourcesContent":["import * as React from 'react';\nimport { useWarnings } from '@fluentui/react-hooks';\nimport { FocusRects } from '@fluentui/utilities';\nimport { Label } from '../Label/Label';\nimport { useSlider } from './useSlider';\nimport type { ISliderProps } from './Slider.types';\n\nconst COMPONENT_NAME = 'SliderBase';\n\nexport const SliderBase: React.FunctionComponent<ISliderProps> = React.forwardRef<HTMLDivElement, ISliderProps>(\n  (props, ref) => {\n    const slotProps = useSlider(props, ref);\n\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n      useWarnings({\n        name: COMPONENT_NAME,\n        props,\n        mutuallyExclusive: { value: 'defaultValue' },\n      });\n    }\n\n    return (\n      <div {...slotProps.root}>\n        {slotProps && <Label {...slotProps.label} />}\n        <div {...slotProps.container}>\n          {props.ranged &&\n            (props.vertical\n              ? slotProps.valueLabel && <Label {...slotProps.valueLabel} />\n              : slotProps.lowerValueLabel && <Label {...slotProps.lowerValueLabel} />)}\n          <div {...slotProps.sliderBox}>\n            <div {...slotProps.sliderLine}>\n              {props.ranged && <span {...slotProps.lowerValueThumb} />}\n              <span {...slotProps.thumb} />\n              {slotProps.zeroTick && <span {...slotProps.zeroTick} />}\n              <span {...slotProps.bottomInactiveTrack} />\n              <span {...slotProps.activeTrack} />\n              <span {...slotProps.topInactiveTrack} />\n            </div>\n          </div>\n          {props.ranged && props.vertical\n            ? slotProps.lowerValueLabel && <Label {...slotProps.lowerValueLabel} />\n            : slotProps.valueLabel && <Label {...slotProps.valueLabel} />}\n        </div>\n        <FocusRects />\n      </div>\n    ) as React.ReactElement<{}>;\n  },\n);\nSliderBase.displayName = COMPONENT_NAME;\n"]}
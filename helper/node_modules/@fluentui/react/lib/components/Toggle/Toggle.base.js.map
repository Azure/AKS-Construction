{"version":3,"file":"Toggle.base.js","sourceRoot":"../src/","sources":["components/Toggle/Toggle.base.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,oBAAoB,EAAE,KAAK,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACjF,OAAO,EAAE,kBAAkB,EAAE,cAAc,EAAE,eAAe,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AACzG,OAAO,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AAGvC,IAAM,aAAa,GAAG,kBAAkB,EAAoC,CAAC;AAE7E,IAAM,cAAc,GAAG,QAAQ,CAAC;AAEhC,MAAM,CAAC,IAAM,UAAU,GAA0C,KAAK,CAAC,UAAU,CAC/E,UAAC,KAAK,EAAE,YAAY;IAEhB,IAAA,KAqBE,KAAK,GArBa,EAAhB,QAAQ,mBAAG,KAAK,KAAA,EACpB,SAAS,GAoBP,KAAK,UApBE,EACA,iBAAiB,GAmBxB,KAAK,QAnBmB,EAC1B,SAAS,GAkBP,KAAK,UAlBE,EACT,KAiBE,KAAK,eAjBe,EAAtB,cAAc,mBAAG,KAAK,KAAA,EACtB,QAAQ,GAgBN,KAAK,SAhBC,EACR,WAAW,GAeT,KAAK,YAfI,EACX,KAAK,GAcH,KAAK,MAdF;IACL,mDAAmD;IACnD,YAAY,GAYV,KAAK,aAZK,EACZ,OAAO,GAWL,KAAK,QAXA;IACP,mDAAmD;IACnD,WAAW,GAST,KAAK,YATI,EACX,QAAQ,GAQN,KAAK,SARC;IACR,mDAAmD;IACnD,SAAS,GAMP,KAAK,UANE,EACA,aAAa,GAKpB,KAAK,QALe,EACtB,MAAM,GAIJ,KAAK,OAJD,EACN,IAAI,GAGF,KAAK,KAHH,EACJ,MAAM,GAEJ,KAAK,OAFD,EACN,KAAK,GACH,KAAK,MADF,CACG;IAEJ,IAAA,KAAwB,oBAAoB,CAChD,iBAAiB,EACjB,cAAc,EACd,KAAK,CAAC,WAAW,CACf,UAAC,EAAiC,EAAE,SAAkB;QACpD,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAG,EAAE,EAAE,SAAS,CAAC,CAAC;QAC1B,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAG,SAAS,CAAC,CAAC;IACzB,CAAC,EACD,CAAC,QAAQ,EAAE,SAAS,CAAC,CACtB,CACF,EAVM,OAAO,QAAA,EAAE,UAAU,QAUzB,CAAC;IAEF,IAAM,UAAU,GAAG,aAAa,CAAC,MAAO,EAAE;QACxC,KAAK,EAAE,KAAM;QACb,SAAS,WAAA;QACT,QAAQ,UAAA;QACR,OAAO,SAAA;QACP,WAAW,aAAA;QACX,YAAY,EAAE,CAAC,MAAM,IAAI,CAAC,OAAO;KAClC,CAAC,CAAC;IACH,IAAM,YAAY,GAAG,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC;IAC1D,IAAM,EAAE,GAAG,KAAK,CAAC,cAAc,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;IAC3C,IAAM,OAAO,GAAM,EAAE,WAAQ,CAAC;IAC9B,IAAM,WAAW,GAAM,EAAE,eAAY,CAAC;IACtC,IAAM,SAAS,GAAG,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;IAC7C,IAAM,iBAAiB,GAAG,cAAc,CAA0C,KAAK,EAAE,eAAe,EAAE;QACxG,gBAAgB;KACjB,CAAC,CAAC;IAEH,wEAAwE;IACxE,eAAe;IACf,+DAA+D;IAC/D,wBAAwB;IAExB,IAAI,YAAY,GAAuB,SAAS,CAAC;IACjD,IAAI,CAAC,SAAS,IAAI,CAAC,YAAY,EAAE;QAC/B,IAAI,KAAK,EAAE;YACT,YAAY,GAAG,OAAO,CAAC;SACxB;QACD,IAAI,SAAS,IAAI,CAAC,YAAY,EAAE;YAC9B,YAAY,GAAG,WAAW,CAAC;SAC5B;KACF;IAED,IAAM,YAAY,GAAG,KAAK,CAAC,MAAM,CAAoB,IAAI,CAAC,CAAC;IAC3D,aAAa,CAAC,YAAY,CAAC,CAAC;IAC5B,eAAe,CAAC,KAAK,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;IAE9C,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;QACzC,gFAAgF;QAChF,WAAW,CAAC;YACV,IAAI,EAAE,cAAc;YACpB,KAAK,OAAA;YACL,YAAY,EAAE;gBACZ,YAAY,EAAE,SAAS;gBACvB,WAAW,EAAE,WAAW;gBACxB,SAAS,EAAE,UAAU;aACtB;YACD,iBAAiB,EAAE,EAAE,OAAO,EAAE,gBAAgB,EAAE;SACjD,CAAC,CAAC;KACJ;IAED,IAAM,OAAO,GAAG,UAAC,EAAiC;QAChD,IAAI,CAAC,QAAQ,EAAE;YACb,UAAU,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACzB,IAAI,aAAa,EAAE;gBACjB,aAAa,CAAC,EAAE,CAAC,CAAC;aACnB;SACF;IACH,CAAC,CAAC;IAEF,IAAM,SAAS,GAAG;QAChB,IAAI,EAAE;YACJ,SAAS,EAAE,UAAU,CAAC,IAAI;YAC1B,MAAM,EAAE,iBAAiB,CAAC,MAAM;SACjC;QACD,KAAK,EAAE;YACL,QAAQ,EAAE,KAAK;YACf,SAAS,EAAE,UAAU,CAAC,KAAK;YAC3B,OAAO,EAAE,EAAE;YACX,EAAE,EAAE,OAAO;SACZ;QACD,SAAS,EAAE;YACT,SAAS,EAAE,UAAU,CAAC,SAAS;SAChC;QACD,IAAI,wBACC,iBAAiB,KACpB,eAAe,EAAE,QAAQ,EACzB,cAAc,EAAE,OAAO,EACvB,YAAY,EAAE,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,YAAY,EAClD,iBAAiB,EAAE,YAAY,EAC/B,SAAS,EAAE,UAAU,CAAC,IAAI,EAC1B,mBAAmB,EAAE,IAAI,EACzB,iBAAiB,EAAE,IAAI,EACvB,QAAQ,EAAE,QAAQ,EAClB,EAAE,EAAE,EAAE,EACN,OAAO,EAAE,OAAO,EAChB,GAAG,EAAE,YAAY,EACjB,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,EAC5B,IAAI,EAAE,QAAiE,GACxE;QACD,KAAK,EAAE;YACL,SAAS,EAAE,UAAU,CAAC,KAAK;SAC5B;QACD,SAAS,EAAE;YACT,QAAQ,EAAE,SAAS;YACnB,SAAS,EAAE,UAAU,CAAC,IAAI;YAC1B,OAAO,EAAE,EAAE;YACX,EAAE,EAAE,WAAW;SAChB;KACF,CAAC;IAEF,OAAO,CACL,oBAAC,QAAQ,aAAC,GAAG,EAAE,YAAyC,IAAM,SAAS,CAAC,IAAI;QACzE,KAAK,IAAI,oBAAC,KAAK,eAAK,SAAS,CAAC,KAAK,EAAI;QACxC,wCAAS,SAAS,CAAC,SAAS;YAC1B,2CAAY,SAAS,CAAC,IAAI;gBACxB,yCAAU,SAAS,CAAC,KAAK,EAAI,CACtB;YACR,CAAC,CAAC,OAAO,IAAI,MAAM,CAAC,IAAI,OAAO,CAAC,IAAI,oBAAC,KAAK,eAAK,SAAS,CAAC,SAAS,EAAI,CACnE,CACG,CACZ,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,UAAU,CAAC,WAAW,GAAG,cAAc,GAAG,MAAM,CAAC;AAEjD,IAAM,eAAe,GAAG,UACtB,KAAmB,EACnB,SAA8B,EAC9B,eAAyC;IAEzC,KAAK,CAAC,mBAAmB,CACvB,KAAK,CAAC,YAAY,EAClB,cAAM,OAAA,CAAC;QACL,IAAI,OAAO;YACT,OAAO,CAAC,CAAC,SAAS,CAAC;QACrB,CAAC;QACD,KAAK;YACH,IAAI,eAAe,CAAC,OAAO,EAAE;gBAC3B,eAAe,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;aACjC;QACH,CAAC;KACF,CAAC,EATI,CASJ,EACF,CAAC,SAAS,EAAE,eAAe,CAAC,CAC7B,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { useControllableValue, useId, useWarnings } from '@fluentui/react-hooks';\nimport { classNamesFunction, getNativeProps, inputProperties, useFocusRects } from '@fluentui/utilities';\nimport { Label } from '../Label/Label';\nimport type { IToggleProps, IToggleStyleProps, IToggleStyles, IToggle } from './Toggle.types';\n\nconst getClassNames = classNamesFunction<IToggleStyleProps, IToggleStyles>();\n\nconst COMPONENT_NAME = 'Toggle';\n\nexport const ToggleBase: React.FunctionComponent<IToggleProps> = React.forwardRef<HTMLElement, IToggleProps>(\n  (props, forwardedRef) => {\n    const {\n      as: RootType = 'div',\n      ariaLabel,\n      checked: controlledChecked,\n      className,\n      defaultChecked = false,\n      disabled,\n      inlineLabel,\n      label,\n      // eslint-disable-next-line deprecation/deprecation\n      offAriaLabel,\n      offText,\n      // eslint-disable-next-line deprecation/deprecation\n      onAriaLabel,\n      onChange,\n      // eslint-disable-next-line deprecation/deprecation\n      onChanged,\n      onClick: onToggleClick,\n      onText,\n      role,\n      styles,\n      theme,\n    } = props;\n\n    const [checked, setChecked] = useControllableValue(\n      controlledChecked,\n      defaultChecked,\n      React.useCallback(\n        (ev: React.MouseEvent<HTMLElement>, isChecked: boolean) => {\n          onChange?.(ev, isChecked);\n          onChanged?.(isChecked);\n        },\n        [onChange, onChanged],\n      ),\n    );\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      checked,\n      inlineLabel,\n      onOffMissing: !onText && !offText,\n    });\n    const badAriaLabel = checked ? onAriaLabel : offAriaLabel;\n    const id = useId(COMPONENT_NAME, props.id);\n    const labelId = `${id}-label`;\n    const stateTextId = `${id}-stateText`;\n    const stateText = checked ? onText : offText;\n    const toggleNativeProps = getNativeProps<React.HTMLAttributes<HTMLButtonElement>>(props, inputProperties, [\n      'defaultChecked',\n    ]);\n\n    // The following properties take priority for what Narrator should read:\n    // 1. ariaLabel\n    // 2. onAriaLabel (if checked) or offAriaLabel (if not checked)\n    // 3. label, if existent\n\n    let labelledById: string | undefined = undefined;\n    if (!ariaLabel && !badAriaLabel) {\n      if (label) {\n        labelledById = labelId;\n      }\n      if (stateText && !labelledById) {\n        labelledById = stateTextId;\n      }\n    }\n\n    const toggleButton = React.useRef<HTMLButtonElement>(null);\n    useFocusRects(toggleButton);\n    useComponentRef(props, checked, toggleButton);\n\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n      useWarnings({\n        name: COMPONENT_NAME,\n        props,\n        deprecations: {\n          offAriaLabel: undefined,\n          onAriaLabel: 'ariaLabel',\n          onChanged: 'onChange',\n        },\n        mutuallyExclusive: { checked: 'defaultChecked' },\n      });\n    }\n\n    const onClick = (ev: React.MouseEvent<HTMLElement>) => {\n      if (!disabled) {\n        setChecked(!checked, ev);\n        if (onToggleClick) {\n          onToggleClick(ev);\n        }\n      }\n    };\n\n    const slotProps = {\n      root: {\n        className: classNames.root,\n        hidden: toggleNativeProps.hidden,\n      },\n      label: {\n        children: label,\n        className: classNames.label,\n        htmlFor: id,\n        id: labelId,\n      },\n      container: {\n        className: classNames.container,\n      },\n      pill: {\n        ...toggleNativeProps,\n        'aria-disabled': disabled,\n        'aria-checked': checked,\n        'aria-label': ariaLabel ? ariaLabel : badAriaLabel,\n        'aria-labelledby': labelledById,\n        className: classNames.pill,\n        'data-is-focusable': true,\n        'data-ktp-target': true,\n        disabled: disabled,\n        id: id,\n        onClick: onClick,\n        ref: toggleButton,\n        role: role ? role : 'switch',\n        type: 'button' as React.ButtonHTMLAttributes<HTMLButtonElement>['type'],\n      },\n      thumb: {\n        className: classNames.thumb,\n      },\n      stateText: {\n        children: stateText,\n        className: classNames.text,\n        htmlFor: id,\n        id: stateTextId,\n      },\n    };\n\n    return (\n      <RootType ref={forwardedRef as React.Ref<HTMLDivElement>} {...slotProps.root}>\n        {label && <Label {...slotProps.label} />}\n        <div {...slotProps.container}>\n          <button {...slotProps.pill}>\n            <span {...slotProps.thumb} />\n          </button>\n          {((checked && onText) || offText) && <Label {...slotProps.stateText} />}\n        </div>\n      </RootType>\n    );\n  },\n);\n\nToggleBase.displayName = COMPONENT_NAME + 'Base';\n\nconst useComponentRef = (\n  props: IToggleProps,\n  isChecked: boolean | undefined,\n  toggleButtonRef: React.RefObject<IToggle>,\n) => {\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      get checked() {\n        return !!isChecked;\n      },\n      focus() {\n        if (toggleButtonRef.current) {\n          toggleButtonRef.current.focus();\n        }\n      },\n    }),\n    [isChecked, toggleButtonRef],\n  );\n};\n"]}
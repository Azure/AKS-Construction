{"version":3,"file":"Modal.types.js","sourceRoot":"../src/","sources":["components/Modal/Modal.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { ResponsiveMode } from '../../ResponsiveMode';\nimport type { IAccessiblePopupProps } from '../../common/IAccessiblePopupProps';\nimport type { IContextualMenuProps } from '../../ContextualMenu';\nimport type { IFocusTrapZoneProps } from '../../FocusTrapZone';\nimport type { IIconProps } from '../../Icon';\nimport type { ILayerProps } from '../../Layer';\nimport type { IOverlayProps } from '../../Overlay';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport { IPopupProps } from '../Popup/Popup.types';\n\nexport interface IDragOptions {\n  /**\n   * Optional selector for the element where the drag can be initiated. If not supplied when\n   * isDraggable is true dragging can be initiated by the whole contents of the modal\n   */\n  dragHandleSelector?: string;\n\n  /**\n   * IconProps for the icon used to indicate that the dialog is in keyboard move mode\n   */\n  keyboardMoveIconProps?: IIconProps;\n\n  /**\n   * The text to use for the modal move menu item\n   */\n  moveMenuItemText: string;\n\n  /**\n   * The text to use for the modal close menu item\n   */\n  closeMenuItemText: string;\n\n  /**\n   * The Draggable Control Menu so that the draggable zone can be moved via the keyboard\n   */\n  menu: React.FunctionComponent<IContextualMenuProps>;\n\n  /**\n   * Whether the draggable content should be prevented from going off-screen\n   */\n  keepInBounds?: boolean;\n}\n\n/**\n * {@docCategory Modal}\n */\nexport interface IModal {\n  /**\n   * Sets focus on the first focusable, or configured, child in focus trap zone\n   */\n  focus: () => void;\n}\n\n/**\n * {@docCategory Modal}\n */\nexport interface IModalProps extends React.RefAttributes<HTMLDivElement>, IAccessiblePopupProps {\n  children?: React.ReactNode;\n\n  /**\n   * Optional ref to access the `IModal` interface. Use this instead of `ref` for accessing\n   * public API of the component.\n   */\n  componentRef?: IRefObject<IModal>;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IModalStyleProps, IModalStyles>;\n\n  /**\n   * Theme provided by higher-order component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Whether the dialog is displayed.\n   * @default false\n   */\n  isOpen?: boolean;\n\n  /**\n   * Whether the overlay is dark themed.\n   * @default true\n   */\n  isDarkOverlay?: boolean;\n\n  /**\n   * A callback function for when the Modal is dismissed light dismiss, before the animation completes.\n   */\n  onDismiss?: (ev?: React.MouseEvent<HTMLButtonElement | HTMLElement>) => any;\n\n  /**\n   * A callback function which is called after the Modal is dismissed and the animation is complete.\n   */\n  onDismissed?: () => any;\n\n  /**\n   * The specified responsiveMode value for Modal to use.\n   * @default ResponsiveMode.small\n   */\n  responsiveMode?: ResponsiveMode;\n\n  /**\n   * Defines an optional set of props to be passed through to Layer\n   */\n  layerProps?: ILayerProps;\n\n  /**\n   * Defines an optional set of props to be passed through to Overlay\n   */\n  overlay?: IOverlayProps;\n\n  /**\n   * Whether the dialog can be light dismissed by clicking outside the dialog (on the overlay).\n   * @default false\n   */\n  isBlocking?: boolean;\n\n  /**\n   * Whether the dialog should be modeless (e.g. not dismiss when focusing/clicking outside of the dialog).\n   * if true: isBlocking is ignored, there will be no overlay (isDarkOverlay is ignored),\n   * isClickableOutsideFocusTrap is true, and forceFocusInsideTrap is false\n   */\n  isModeless?: boolean;\n\n  /**\n   * Determines the ARIA role of the dialog (alertdialog/dialog)\n   * If this is set, it will override the ARIA role determined by isBlocking and isModeless\n   *\n   * For more information regarding dialogs please see https://w3c.github.io/aria-practices/#alertdialog\n   */\n  isAlert?: boolean;\n\n  /**\n   * Optional class name to be added to the root class\n   */\n  className?: string;\n\n  /**\n   * Optional override for container class\n   */\n  containerClassName?: string;\n\n  /**\n   * Optional override for scrollable content class\n   */\n  scrollableContentClassName?: string;\n\n  /**\n   * A callback function for when the Modal content is mounted on the overlay layer\n   * @deprecated Use `layerProps.onLayerDidMount` instead\n   */\n  onLayerDidMount?: () => void;\n\n  /**\n   * ARIA id for the title of the Modal, if any\n   */\n  titleAriaId?: string;\n\n  /**\n   * ARIA id for the subtitle of the Modal, if any\n   */\n  subtitleAriaId?: string;\n\n  /**\n   * Whether the modal should have top offset fixed once opened and expand from the bottom only\n   * when the content changes dynamically.\n   */\n  topOffsetFixed?: boolean;\n\n  /**\n   * The options to make the modal draggable\n   */\n  dragOptions?: IDragOptions;\n\n  /**\n   * Allow body scroll on content and overlay on touch devices. Changing after mounting has no effect.\n   * @default false\n   */\n  allowTouchBodyScroll?: boolean;\n\n  /**\n   * Puts aria-hidden=true on all non-ancestors of the current modal, for screen readers\n   * (unless `isModeless` is true).\n   * @default true\n   * @deprecated Setting this to `false` is deprecated since it breaks modal behavior for some screen readers.\n   * It will not be supported in future versions of the library (except for modeless modals).\n   */\n  enableAriaHiddenSiblings?: boolean;\n\n  /**\n   * Set of props to customize the `FocusTrapZone` inside of the `Modal`.\n   * @default `{}`\n   */\n  focusTrapZoneProps?: IFocusTrapZoneProps;\n\n  /**\n   * Props to be passed through to Popup\n   */\n  popupProps?: IPopupProps;\n}\n\n/**\n * {@docCategory Modal}\n */\nexport type IModalStyleProps = Required<Pick<IModalProps, 'theme'>> &\n  Pick<\n    IModalProps,\n    'className' | 'containerClassName' | 'scrollableContentClassName' | 'topOffsetFixed' | 'isModeless'\n  > & {\n    /** Modal open state. */\n    isOpen?: boolean;\n    /** Modal visible state. */\n    isVisible?: boolean;\n    /** Modal has been opened state. */\n    hasBeenOpened?: boolean;\n    /** Positioning of modal on first render */\n    modalRectangleTop?: number;\n    /** Classname for layer element */\n    layerClassName?: string;\n    /** Whether this modal is draggable and using the default handler */\n    isDefaultDragHandle?: boolean;\n    /** The windows inner height */\n    windowInnerHeight?: number;\n  };\n\n/**\n * {@docCategory Modal}\n */\nexport interface IModalStyles {\n  root: IStyle;\n  main: IStyle;\n  scrollableContent: IStyle;\n  layer: IStyle;\n  keyboardMoveIconContainer: IStyle;\n  keyboardMoveIcon: IStyle;\n}\n"]}
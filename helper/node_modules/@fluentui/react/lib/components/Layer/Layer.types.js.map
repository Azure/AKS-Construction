{"version":3,"file":"Layer.types.js","sourceRoot":"../src/","sources":["components/Layer/Layer.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { IFabricProps } from '../../Fabric';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\n\n/**\n * {@docCategory Layer}\n */\nexport interface ILayer {}\n\n/**\n * {@docCategory Layer}\n */\nexport interface ILayerProps extends React.HTMLAttributes<HTMLDivElement>, React.RefAttributes<HTMLDivElement> {\n  /**\n   * Optional callback to access the ILayer interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ILayer>;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules\n   */\n  styles?: IStyleFunctionOrObject<ILayerStyleProps, ILayerStyles>;\n\n  /**\n   * Theme provided by HOC.\n   */\n  theme?: ITheme;\n\n  /**\n   * Additional css class to apply to the Layer\n   * @defaultvalue undefined\n   */\n  className?: string;\n\n  /**\n   * Callback for when the layer is mounted.\n   * @deprecated Use `onLayerDidMount`.\n   */\n  onLayerMounted?: () => void;\n\n  /**\n   * Callback for when the layer is mounted.\n   */\n  onLayerDidMount?: () => void;\n\n  /**\n   * Callback for when the layer is unmounted.\n   */\n  onLayerWillUnmount?: () => void;\n\n  /**\n   * The optional id property provided on a LayerHost that this Layer should render within. The LayerHost does\n   * not need to be immediately available but once has been rendered, and if missing, we'll avoid trying\n   * to render the Layer content until the host is available. If an id is not provided, we will render the Layer\n   * content in a fixed position element rendered at the end of the document.\n   */\n  hostId?: string;\n\n  /**\n   * When enabled, Layer allows events to bubble up from Layer content.\n   * Traditionally Layer has not had this behavior. This prop preserves backwards compatibility by\n   * default while allowing users to opt in to the new event bubbling functionality.\n   */\n  eventBubblingEnabled?: boolean;\n\n  /**\n   * Whether the layer should be added as the first child of the host.\n   * If true, the layer will be inserted as the first child of the host\n   * By default, the layer will be appended at the end to the host\n   */\n  insertFirst?: boolean;\n\n  /**\n   * Props bag to forward to the Fabric component to allow customization of its behavior.\n   */\n  fabricProps?: IFabricProps;\n}\n\n/**\n * {@docCategory Layer}\n */\nexport interface ILayerStyleProps {\n  /**\n   * Accept theme prop.\n   */\n  theme: ITheme;\n\n  /**\n   * Accept custom classNames\n   */\n  className?: string;\n\n  /**\n   * Check if Host\n   */\n  isNotHost?: boolean;\n}\n\n/**\n * {@docCategory Layer}\n */\nexport interface ILayerStyles {\n  /**\n   * Style for the root element when fixed.\n   */\n  root?: IStyle;\n  /**\n   * Style for the Fabric component.\n   */\n  content?: IStyle;\n}\n"]}
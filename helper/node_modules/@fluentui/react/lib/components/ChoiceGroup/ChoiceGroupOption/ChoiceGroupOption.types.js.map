{"version":3,"file":"ChoiceGroupOption.types.js","sourceRoot":"../src/","sources":["components/ChoiceGroup/ChoiceGroupOption/ChoiceGroupOption.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { ITheme, IStyle } from '../../../Styling';\nimport type { IRefObject } from '../../../Utilities';\nimport type { IChoiceGroupOption } from '../ChoiceGroup.types';\n\n/**\n * {@docCategory ChoiceGroup}\n */\nexport interface IChoiceGroupOptionProps extends Omit<IChoiceGroupOption, 'key'> {\n  /**\n   * @deprecated Not used.\n   */\n  componentRef?: IRefObject<IChoiceGroupOption>;\n\n  /**\n   * Unique key for the option, set based on `IChoiceGroupOption.key`.\n   */\n  itemKey: string;\n\n  /**\n   * The option key. This will always be provided for callbacks (copied from `itemKey`) but is\n   * optional when manually creating ChoiceGroupOptions.\n   */\n  key?: string;\n\n  /**\n   * Whether or not the option is checked. Set by `ChoiceGroup` based on `selectedKey` or\n   * `defaultSelectedKey` from `IChoiceGroupProps`.\n   */\n  checked?: boolean;\n\n  /**\n   * Callback for the ChoiceGroup creating the option to be notified when the choice has been changed.\n   */\n  onChange?: (\n    evt?: React.FormEvent<HTMLElement | HTMLInputElement>,\n    props?: IChoiceGroupOption & IChoiceGroupOptionProps,\n  ) => void;\n\n  /**\n   * Callback for the ChoiceGroup creating the option to be notified when the choice has received focus.\n   */\n  onFocus?: (\n    ev?: React.FocusEvent<HTMLElement | HTMLInputElement>,\n    props?: IChoiceGroupOption & IChoiceGroupOptionProps,\n  ) => void | undefined;\n\n  /**\n   * Callback for the ChoiceGroup creating the option to be notified when the choice has lost focus.\n   */\n  onBlur?: (ev?: React.FocusEvent<HTMLElement>, props?: IChoiceGroupOption & IChoiceGroupOptionProps) => void;\n\n  /**\n   * Indicates if the ChoiceGroupOption should appear focused, visually\n   */\n  focused?: boolean;\n\n  /**\n   * Theme (provided through customization).\n   */\n  theme?: ITheme;\n\n  /**\n   * If true, an option must be selected in the ChoiceGroup.\n   */\n  required?: boolean;\n\n  /**\n   * This value is used to group each ChoiceGroupOption into the same logical ChoiceGroup\n   */\n  name?: string;\n}\n\n/**\n * Defines props needed to construct styles.\n * {@docCategory ChoiceGroup}\n */\nexport interface IChoiceGroupOptionStyleProps {\n  /** Theme provided by High-Order Component. */\n  theme: ITheme;\n\n  /** Whether the option has an icon. */\n  hasIcon?: boolean;\n\n  /** Whether the option icon is an image. */\n  hasImage?: boolean;\n\n  /** Whether the option is checked or not. */\n  checked?: boolean;\n\n  /** Whether the option is disabled or not. */\n  disabled?: boolean;\n\n  /** Whether the image width or height are higher than `71`. */\n  imageIsLarge?: boolean;\n\n  /**\n   * Image sizes used when `hasImage` or `hasIcon` style props are enabled.\n   * @defaultvalue `{ height: 32, width: 32 }`\n   */\n  imageSize?: { height: number; width: number };\n\n  /** Whether the option is in focus or not. */\n  focused?: boolean;\n}\n\n/**\n * {@docCategory ChoiceGroup}\n */\nexport interface IChoiceGroupOptionStyles {\n  root?: IStyle;\n  choiceFieldWrapper?: IStyle;\n  input?: IStyle;\n  field?: IStyle;\n  innerField?: IStyle;\n  imageWrapper?: IStyle;\n  selectedImageWrapper?: IStyle;\n  iconWrapper?: IStyle;\n  labelWrapper?: IStyle;\n}\n"]}
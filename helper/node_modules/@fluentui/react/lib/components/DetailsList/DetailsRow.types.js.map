{"version":3,"file":"DetailsRow.types.js","sourceRoot":"../src/","sources":["components/DetailsList/DetailsRow.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { DetailsRowBase } from './DetailsRow.base';\nimport { CheckboxVisibility } from './DetailsList.types';\nimport { SelectionMode } from '../../Selection';\nimport { CollapseAllVisibility } from '../GroupedList/GroupedList.types';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { IColumn, IDetailsListProps } from './DetailsList.types';\nimport type { ISelection } from '../../Selection';\nimport type { IDragDropHelper, IDragDropEvents } from '../../DragDrop';\nimport type { IViewport } from '../../utilities/decorators/withViewport';\nimport type { IGroup } from '../GroupedList/GroupedList.types';\nimport type { IBaseProps, IRefObject, IStyleFunctionOrObject, IRenderFunction, IComponentAs } from '../../Utilities';\nimport type { IDetailsRowCheckProps, IDetailsCheckboxProps } from './DetailsRowCheck.types';\nimport type { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport type { IFocusZoneProps } from '../../FocusZone';\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsRow {}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsItemProps {\n  /**\n   * Column metadata\n   */\n  columns?: IColumn[];\n\n  /**\n   * Nesting depth of a grouping\n   */\n  groupNestingDepth?: number;\n\n  /**\n   * How much to indent\n   */\n  indentWidth?: number | undefined;\n\n  /**\n   * Selection from utilities\n   */\n  selection?: ISelection | undefined;\n\n  /**\n   * Selection mode\n   */\n  selectionMode?: SelectionMode | undefined;\n\n  /**\n   * Viewport of the virtualized list\n   *\n   * @deprecated Use `rowWidth` instead\n   */\n  viewport?: IViewport | undefined;\n\n  /**\n   * Checkbox visibility\n   */\n  checkboxVisibility?: CheckboxVisibility | undefined;\n\n  /**\n   * Rules for rendering column cells.\n   */\n  cellStyleProps?: ICellStyleProps;\n\n  /**\n   * Minimum width of the row.\n   *\n   * @defaultvalue 0\n   */\n  rowWidth?: number;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsRowBaseProps\n  extends Pick<IDetailsListProps, 'onRenderItemColumn' | 'getCellValueKey' | 'onRenderField'>,\n    IBaseProps<IDetailsRow>,\n    IDetailsItemProps {\n  /**\n   * Theme provided by styled() function\n   */\n  theme?: ITheme;\n\n  /**\n   * Overriding styles to this row\n   */\n  styles?: IStyleFunctionOrObject<IDetailsRowStyleProps, IDetailsRowStyles>;\n\n  /**\n   * Ref of the component\n   */\n  componentRef?: IRefObject<IDetailsRow>;\n\n  /**\n   * Data source for this component\n   */\n  item: any;\n\n  /**\n   * Index of the collection of items of the DetailsList\n   */\n  itemIndex: number;\n\n  /**\n   * Offset used to calculate the aria-rowindex value based on itemIndex\n   * @defaultvalue 2\n   */\n  flatIndexOffset?: number;\n\n  /**\n   * Whether to render in compact mode\n   */\n  compact?: boolean;\n\n  /**\n   * A list of events to register\n   */\n  eventsToRegister?: { eventName: string; callback: (item?: any, index?: number, event?: any) => void }[];\n\n  /**\n   * Callback for did mount for parent\n   */\n  onDidMount?: (row?: DetailsRowBase) => void;\n\n  /**\n   * Callback for will mount for parent\n   */\n  onWillUnmount?: (row?: DetailsRowBase) => void;\n\n  /**\n   * Callback for rendering a checkbox\n   */\n  onRenderCheck?: (props: IDetailsRowCheckProps) => JSX.Element;\n\n  /**\n   * If provided, can be used to render a custom checkbox\n   */\n  onRenderDetailsCheckbox?: IRenderFunction<IDetailsCheckboxProps>;\n\n  /**\n   * Handling drag and drop events\n   */\n  dragDropEvents?: IDragDropEvents;\n\n  /**\n   * Helper for the drag and drop\n   */\n  dragDropHelper?: IDragDropHelper;\n\n  /**\n   * Collapse all visibility\n   */\n  collapseAllVisibility?: CollapseAllVisibility;\n\n  /**\n   * Callback for getting the row aria label\n   */\n  getRowAriaLabel?: (item: any) => string;\n\n  /**\n   * Callback for getting the row aria description\n   */\n  getRowAriaDescription?: (item: any) => string;\n\n  /**\n   * Callback for getting the row aria-describedby\n   */\n  getRowAriaDescribedBy?: (item: any) => string;\n\n  /**\n   * Check button's aria label\n   */\n  checkButtonAriaLabel?: string;\n\n  /**\n   * Class name for the checkbox cell\n   */\n  checkboxCellClassName?: string;\n\n  /**\n   * DOM element into which to render row field\n   */\n  rowFieldsAs?: IComponentAs<IDetailsRowFieldsProps>;\n\n  /**\n   * Overriding class name\n   */\n  className?: string;\n\n  /** Whether to animate updates */\n  enableUpdateAnimations?: boolean;\n\n  /**\n   * Rerender DetailsRow only when props changed. Might cause regression when depending on external updates.\n   * @defaultvalue false\n   */\n  useReducedRowRenderer?: boolean;\n  /**\n   * Optional pre-rendered content per column. Preferred over onRender or onRenderItemColumn if provided.\n   */\n  cellsByColumn?: {\n    [columnKey: string]: React.ReactNode;\n  };\n\n  /**\n   * Whether to use fast icon and check components. The icons can't be targeted by customization\n   * but are still customizable via class names.\n   * @defaultvalue true\n   */\n  useFastIcons?: boolean;\n\n  /** Role for the row. */\n  role?: string;\n\n  /**\n   * Whether the row is rendered within a grid.\n   * In DetailsList this should be true, and in GroupedList this should be false.\n   */\n  isGridRow?: boolean;\n\n  /**\n   * Id for row\n   */\n  id?: string;\n\n  /**\n   * Group row item belongs to.\n   * When using GroupedList, this needs to be passed in order to calculate\n   * the correct aria-posinset and aria-setsize values.\n   */\n  group?: IGroup;\n\n  /**\n   * Properties to pass to the rows' FocusZone.\n   */\n  focusZoneProps?: IFocusZoneProps;\n\n  /** whether or not row should be rendered in disabled state */\n  disabled?: boolean;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsRowProps extends IDetailsRowBaseProps {\n  /**\n   * Column metadata\n   */\n  columns: IColumn[];\n\n  /**\n   * Selection from utilities\n   */\n  selection: ISelection;\n\n  /**\n   * Selection mode\n   */\n  selectionMode: SelectionMode;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport type IDetailsRowStyleProps = Required<Pick<IDetailsRowProps, 'theme'>> &\n  Pick<IDetailsRowProps, 'disabled'> & {\n    /** Whether the row is selected  */\n    isSelected?: boolean;\n\n    /** Whether there are any rows in the list selected */\n    anySelected?: boolean;\n\n    /** Whether this row can be selected */\n    canSelect?: boolean;\n\n    /** Class name of when this becomes a drop target. */\n    droppingClassName?: string;\n\n    /** Is the checkbox visible */\n    isCheckVisible?: boolean;\n\n    /** Is this a row header */\n    isRowHeader?: boolean;\n\n    /** A class name from the checkbox cell, so proper styling can be targeted */\n    checkboxCellClassName?: string;\n\n    /** CSS class name for the component */\n    className?: string;\n\n    /** Is list in compact mode */\n    compact?: boolean;\n\n    cellStyleProps?: ICellStyleProps;\n\n    /** Whether to animate updates */\n    enableUpdateAnimations?: boolean;\n  };\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface ICellStyleProps {\n  cellLeftPadding: number;\n  cellRightPadding: number;\n  cellExtraRightPadding: number;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsRowStyles {\n  root: IStyle;\n  cell: IStyle;\n  cellAnimation: IStyle;\n  cellUnpadded: IStyle;\n  cellPadded: IStyle;\n  checkCell: IStyle;\n  isRowHeader: IStyle;\n  isMultiline: IStyle;\n  fields: IStyle;\n  cellMeasurer: IStyle;\n  checkCover: IStyle;\n  check: IStyle;\n}\n"]}
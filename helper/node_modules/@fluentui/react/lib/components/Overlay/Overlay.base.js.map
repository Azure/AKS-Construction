{"version":3,"file":"Overlay.base.js","sourceRoot":"../src/","sources":["components/Overlay/Overlay.base.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EACL,kBAAkB,EAClB,cAAc,EACd,aAAa,EACb,gBAAgB,EAChB,iBAAiB,EACjB,sBAAsB,GACvB,MAAM,iBAAiB,CAAC;AAGzB,IAAM,aAAa,GAAG,kBAAkB,EAAsC,CAAC;AAE/E;IAAiC,+BAAkC;IAGjE,qBAAY,KAAoB;QAAhC,YACE,kBAAM,KAAK,CAAC,SAKb;QAHC,sBAAsB,CAAC,KAAI,CAAC,CAAC;QACrB,IAAA,KAAiC,KAAI,CAAC,KAAK,qBAAf,EAA5B,oBAAoB,mBAAG,KAAK,KAAA,CAAgB;QACpD,KAAI,CAAC,qBAAqB,GAAG,oBAAoB,CAAC;;IACpD,CAAC;IAEM,uCAAiB,GAAxB;QACE,CAAC,IAAI,CAAC,qBAAqB,IAAI,iBAAiB,EAAE,CAAC;IACrD,CAAC;IAEM,0CAAoB,GAA3B;QACE,CAAC,IAAI,CAAC,qBAAqB,IAAI,gBAAgB,EAAE,CAAC;IACpD,CAAC;IAEM,4BAAM,GAAb;QACQ,IAAA,KAAqD,IAAI,CAAC,KAAK,EAA/C,MAAM,kBAAA,EAAE,SAAS,eAAA,EAAE,KAAK,WAAA,EAAE,MAAM,YAAe,CAAC;QAEtE,IAAM,QAAQ,GAAG,cAAc,CAAuC,IAAI,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;QAEjG,IAAM,UAAU,GAAG,aAAa,CAAC,MAAO,EAAE;YACxC,KAAK,EAAE,KAAM;YACb,SAAS,WAAA;YACT,MAAM,QAAA;SACP,CAAC,CAAC;QAEH,OAAO,wCAAS,QAAQ,IAAE,SAAS,EAAE,UAAU,CAAC,IAAI,IAAI,CAAC;IAC3D,CAAC;IACH,kBAAC;AAAD,CAAC,AAhCD,CAAiC,KAAK,CAAC,SAAS,GAgC/C","sourcesContent":["import * as React from 'react';\nimport {\n  classNamesFunction,\n  getNativeProps,\n  divProperties,\n  enableBodyScroll,\n  disableBodyScroll,\n  initializeComponentRef,\n} from '../../Utilities';\nimport type { IOverlayProps, IOverlayStyleProps, IOverlayStyles } from './Overlay.types';\n\nconst getClassNames = classNamesFunction<IOverlayStyleProps, IOverlayStyles>();\n\nexport class OverlayBase extends React.Component<IOverlayProps, {}> {\n  private _allowTouchBodyScroll: boolean;\n\n  constructor(props: IOverlayProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    const { allowTouchBodyScroll = false } = this.props;\n    this._allowTouchBodyScroll = allowTouchBodyScroll;\n  }\n\n  public componentDidMount(): void {\n    !this._allowTouchBodyScroll && disableBodyScroll();\n  }\n\n  public componentWillUnmount(): void {\n    !this._allowTouchBodyScroll && enableBodyScroll();\n  }\n\n  public render(): JSX.Element {\n    const { isDarkThemed: isDark, className, theme, styles } = this.props;\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      isDark,\n    });\n\n    return <div {...divProps} className={classNames.root} />;\n  }\n}\n"]}
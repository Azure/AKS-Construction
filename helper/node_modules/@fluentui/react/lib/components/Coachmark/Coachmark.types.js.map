{"version":3,"file":"Coachmark.types.js","sourceRoot":"../src/","sources":["components/Coachmark/Coachmark.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { IPositioningContainerProps } from './PositioningContainer/PositioningContainer.types';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport type { ITeachingBubble } from '../../TeachingBubble';\nimport type { Target } from '@fluentui/react-hooks';\n\n/**\n * {@docCategory Coachmark}\n */\nexport interface ICoachmark {\n  /**\n   * Forces the Coachmark to dismiss\n   */\n  dismiss?: (ev?: Event | React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => void;\n}\n\n/**\n * Coachmark component props\n * {@docCategory Coachmark}\n */\nexport interface ICoachmarkProps extends React.RefAttributes<HTMLDivElement> {\n  /**\n   * Optional callback to access the `ICoachmark` interface. Use this instead of `ref` for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ICoachmark>;\n\n  /**\n   * If provided, additional class name to provide on the root element.\n   */\n  className?: string;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules\n   */\n  styles?: IStyleFunctionOrObject<ICoachmarkStyleProps, ICoachmarkStyles>;\n\n  /**\n   * The target that the Coachmark should try to position itself based on.\n   */\n  target: Target;\n\n  /**\n   * Props to pass to the PositioningContainer component. Specify the `directionalHint` to indicate\n   * on which edge the Coachmark/TeachingBubble should be positioned.\n   * @defaultvalue `{ directionalHint: DirectionalHint.bottomAutoEdge }`\n   */\n  positioningContainerProps?: IPositioningContainerProps;\n\n  /**\n   * Whether or not to force the Coachmark/TeachingBubble content to fit within the window bounds.\n   * @defaultvalue true\n   */\n  isPositionForced?: boolean;\n\n  /**\n   * The starting collapsed state for the Coachmark.\n   * @defaultvalue true\n   * @deprecated Use `isCollapsed` instead.\n   */\n  collapsed?: boolean;\n\n  /**\n   * The starting collapsed state for the Coachmark.\n   * @defaultvalue true\n   */\n  isCollapsed?: boolean;\n\n  /**\n   * The distance in pixels the mouse is located before opening up the Coachmark.\n   * @defaultvalue 10\n   */\n  mouseProximityOffset?: number;\n\n  /**\n   * Callback when the opening animation begins.\n   */\n  onAnimationOpenStart?: () => void;\n\n  /**\n   * Callback when the opening animation completes.\n   */\n  onAnimationOpenEnd?: () => void;\n\n  /**\n   * @deprecated No longer used.\n   */\n  beakWidth?: number;\n\n  /**\n   * @deprecated No longer used.\n   */\n  beakHeight?: number;\n\n  /**\n   * Delay before allowing mouse movements to open the Coachmark.\n   * @defaultvalue 3600\n   */\n  delayBeforeMouseOpen?: number;\n\n  /**\n   * Delay in milliseconds before Coachmark animation appears.\n   * @defaultvalue 0\n   */\n  delayBeforeCoachmarkAnimation?: number;\n\n  /**\n   * Callback to run when the mouse moves.\n   */\n  onMouseMove?: (e: MouseEvent) => void;\n\n  /**\n   * @deprecated No longer used.\n   */\n  width?: number;\n\n  /**\n   * @deprecated No longer used.\n   */\n  height?: number;\n\n  /**\n   * Color of the Coachmark/TeachingBubble.\n   */\n  color?: string;\n\n  /**\n   * Beacon color one.\n   */\n  beaconColorOne?: string;\n\n  /**\n   * Beacon color two.\n   */\n  beaconColorTwo?: string;\n\n  /**\n   * Text for screen reader to announce when Coachmark is displayed\n   */\n  ariaAlertText?: string;\n\n  /**\n   * @deprecated Not used. Coachmark uses `focusFirstChild` utility instead to focus on TeachingBubbleContent.\n   */\n  teachingBubbleRef?: ITeachingBubble;\n\n  /**\n   * ID used for the internal element which contains label text for the Coachmark\n   * (don't render an element with this ID yourself).\n   */\n  ariaLabelledBy?: string;\n\n  /**\n   * ID used for the internal element which contains description text for the Coachmark\n   * (don't render an element with this ID yourself).\n   */\n  ariaDescribedBy?: string;\n\n  /**\n   * Defines the text content for the `ariaLabelledBy` element.\n   * Not used unless `ariaLabelledBy` is also provided.\n   */\n  ariaLabelledByText?: string;\n\n  /**\n   * Defines the text content for the `ariaDescribedBy` element\n   * Not used unless `ariaDescribedBy` is also provided.\n   */\n  ariaDescribedByText?: string;\n\n  /**\n   * If true then the Coachmark will not dismiss when it loses focus\n   * @defaultvalue false\n   */\n  preventDismissOnLostFocus?: boolean;\n\n  /**\n   * If true then the Coachmark beak (arrow pointing towards target) will always be visible as long as\n   * Coachmark is visible\n   * @defaultvalue false\n   */\n  persistentBeak?: boolean;\n\n  /**\n   * If true then focus will not be set to the Coachmark when it mounts. Useful in cases where focus on coachmark\n   * is causing other components in page to dismiss upon losing focus.\n   * @defaultvalue false\n   */\n  preventFocusOnMount?: boolean;\n\n  /**\n   * Callback when the Coachmark tries to close.\n   */\n  onDismiss?: (ev?: Event | React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => void;\n\n  /**\n   * Theme provided by higher order component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Child nodes to render inside the Coachmark dialog\n   */\n  children?: React.ReactNode;\n}\n\n/**\n * The props needed to construct styles.\n * {@docCategory Coachmark}\n */\nexport interface ICoachmarkStyleProps {\n  /**\n   * ClassName to provide on the root style area.\n   */\n  className?: string;\n\n  /**\n   * Current theme.\n   */\n  theme?: ITheme;\n\n  /**\n   * Is the Coachmark collapsed.\n   * @deprecated Use `isCollapsed` instead.\n   */\n  collapsed?: boolean;\n\n  /**\n   * Is the Coachmark collapsed\n   */\n  isCollapsed: boolean;\n\n  /**\n   * Is the component taking measurements\n   */\n  isMeasuring: boolean;\n\n  /**\n   * The height measured before the component has been mounted in pixels\n   */\n  entityHostHeight?: string;\n\n  /**\n   * The width measured in pixels\n   */\n  entityHostWidth?: string;\n\n  /**\n   * Width of the coachmark\n   */\n  width?: string;\n\n  /**\n   * Height of the coachmark\n   */\n  height?: string;\n\n  /**\n   * Color\n   */\n  color?: string;\n\n  /**\n   * Beacon color one\n   */\n  beaconColorOne?: string;\n\n  /**\n   * Beacon color two\n   */\n  beaconColorTwo?: string;\n\n  /**\n   * Transform origin for teaching bubble content\n   */\n  transformOrigin?: string;\n\n  /**\n   * Delay time for the animation to start\n   */\n  delayBeforeCoachmarkAnimation?: string;\n}\n\n/**\n * Represents the stylable areas of the control.\n * {@docCategory Coachmark}\n */\nexport interface ICoachmarkStyles {\n  /**\n   * Style for the root element in the default enabled/unchecked state.\n   */\n  root?: IStyle;\n\n  /**\n   * The pulsing beacon that animates when the Coachmark is collapsed.\n   */\n  pulsingBeacon?: IStyle;\n\n  /**\n   * The layer, or div, that the translate animation will be applied to.\n   */\n  translateAnimationContainer?: IStyle;\n\n  /**\n   * The layer the Scale animation will be applied to.\n   */\n  scaleAnimationLayer?: IStyle;\n\n  /**\n   * The layer the Rotate animation will be applied to.\n   */\n  rotateAnimationLayer?: IStyle;\n\n  /**\n   * The layer that content/components/elements will be hosted in.\n   */\n  entityHost?: IStyle;\n\n  /**\n   * The inner layer that components will be hosted in\n   * (primary purpose is scaling the layer down while the Coachmark collapses)\n   */\n  entityInnerHost: IStyle;\n\n  /**\n   * The layer that directly contains the TeachingBubbleContent\n   */\n  childrenContainer: IStyle;\n\n  /**\n   * The styles applied when the Coachmark has collapsed.\n   */\n  collapsed?: IStyle;\n\n  /**\n   * The styles applied to the ARIA attribute container\n   */\n  ariaContainer?: IStyle;\n}\n\n/**\n * @deprecated No longer used.\n * {@docCategory Coachmark}\n */\nexport type ICoachmarkTypes = ICoachmarkProps;\n"]}
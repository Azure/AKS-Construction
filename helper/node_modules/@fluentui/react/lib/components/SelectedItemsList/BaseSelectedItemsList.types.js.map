{"version":3,"file":"BaseSelectedItemsList.types.js","sourceRoot":"../src/","sources":["components/SelectedItemsList/BaseSelectedItemsList.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { ValidationState } from '../../Pickers';\nimport { Selection } from '../../Selection';\nimport type { IPickerItemProps, ISuggestionModel } from '../../Pickers';\nimport type { IRefObject } from '../../Utilities';\n\nexport interface IBaseSelectedItemsList<T> {\n  /** Gets the current value of the input. */\n  items: T[] | undefined;\n\n  addItems: (items: T[]) => void;\n}\n\nexport interface ISelectedItemProps<T> extends IPickerItemProps<T> {\n  onCopyItem: (item: T) => void;\n}\n\n// Type T is the type of the item that is displayed\n// For example, if the picker is displaying persona's than type T could either be of Persona or IPersona props\nexport interface IBaseSelectedItemsListProps<T> extends React.ClassAttributes<any> {\n  componentRef?: IRefObject<IBaseSelectedItemsList<T>>;\n\n  /**\n   * The selection\n   */\n  selection?: Selection;\n  /**\n   * A callback for when items are copied\n   */\n  onCopyItems?: (items: T[]) => string;\n  /**\n   * Function that specifies how the selected item will appear.\n   */\n  onRenderItem?: (props: ISelectedItemProps<T>) => JSX.Element;\n  /**\n   * Initial items that have already been selected and should appear in the people picker.\n   */\n  defaultSelectedItems?: T[];\n  /**\n   * A callback for when the selected list of items changes.\n   */\n  onChange?: (items?: T[]) => void;\n  /**\n   * Function that specifies how arbitrary text entered into the well is handled.\n   */\n  createGenericItem?: (input: string, ValidationState: ValidationState) => ISuggestionModel<T>;\n  /**\n   * A callback to process a selection after the user selects something from the picker.\n   */\n  onItemSelected?: (selectedItem?: T | T[]) => T | PromiseLike<T> | T[] | PromiseLike<T[]>;\n  /**\n   * The items that the base picker should currently display as selected.\n   * If this is provided then the picker will act as a controlled component.\n   */\n  selectedItems?: T[];\n\n  /**\n   * Aria label for the 'X' button in the selected item component.\n   * @defaultvalue ''\n   */\n  removeButtonAriaLabel?: string;\n  /**\n   * A callback when an item is deleted\n   * @deprecated Use `onItemsDeleted` instead.\n   */\n  onItemDeleted?: (deletedItem: T) => void;\n\n  /**\n   * A callback when and item or items are deleted\n   */\n  onItemsDeleted?: (deletedItems: T[]) => void;\n\n  /**\n   * A callback on whether this item can be deleted\n   */\n  canRemoveItem?: (item: T) => boolean;\n}\n"]}
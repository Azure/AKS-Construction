{"version":3,"file":"useKeytipData.js","sourceRoot":"../src/","sources":["components/KeytipData/useKeytipData.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,QAAQ,EAAE,yBAAyB,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACzF,OAAO,EAAE,wBAAwB,EAAE,MAAM,iBAAiB,CAAC;AAC3D,OAAO,EAAE,aAAa,EAAE,cAAc,EAAE,aAAa,EAAE,kBAAkB,EAAE,MAAM,+BAA+B,CAAC;AASjH;;GAEG;AACH,MAAM,UAAU,aAAa,CAAC,OAA0B;IACtD,IAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,EAAU,CAAC;IACxC,IAAM,WAAW,GAA6B,OAAO,CAAC,WAAW;QAC/D,CAAC,YACG,QAAQ,EAAE,OAAO,CAAC,QAAQ,IACvB,OAAO,CAAC,WAAW,EAE1B,CAAC,CAAC,SAAS,CAAC;IAEd,IAAM,aAAa,GAAG,QAAQ,CAAgB,aAAa,CAAC,WAAW,EAAE,CAAC,CAAC;IAC3E,IAAM,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC;IAEzC,uEAAuE;IACvE,yBAAyB,CAAC;QACxB,IACE,QAAQ,CAAC,OAAO;YAChB,WAAW;YACX,CAAC,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,WAAW,MAAK,OAAO,CAAC,WAAW,IAAI,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,QAAQ,MAAK,OAAO,CAAC,QAAQ,CAAC,EAChG;YACA,aAAa,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;SACrD;IACH,CAAC,CAAC,CAAC;IAEH,yBAAyB,CAAC;QACxB,mCAAmC;QACnC,IAAI,WAAW,EAAE;YACf,QAAQ,CAAC,OAAO,GAAG,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;SACxD;QAED,OAAO;YACL,qCAAqC;YACrC,WAAW,IAAI,aAAa,CAAC,UAAU,CAAC,WAAW,EAAE,QAAQ,CAAC,OAAQ,CAAC,CAAC;QAC1E,CAAC,CAAC;QACF,yEAAyE;QACzE,uDAAuD;IACzD,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAI,iBAAiB,GAAgB;QACnC,eAAe,EAAE,SAAS;QAC1B,QAAQ,EAAE,SAAS;KACpB,CAAC;IAEF,IAAI,WAAW,EAAE;QACf,iBAAiB,GAAG,aAAa,CAAC,aAAa,EAAE,WAAW,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC;KACxF;IAED,OAAO,iBAAiB,CAAC;AAC3B,CAAC;AAED;;;;GAIG;AACH,SAAS,aAAa,CACpB,aAA4B,EAC5B,WAAyB,EACzB,kBAA2B;IAE3B,gDAAgD;IAChD,IAAM,cAAc,GAAG,aAAa,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;IAEpE,wDAAwD;IACxD,IAAM,eAAe,GAAG,wBAAwB,CAC9C,kBAAkB,EAClB,kBAAkB,CAAC,cAAc,CAAC,YAAY,CAAC,CAC/C,CAAC;IAEH,IAAI,YAAY,qBAAO,cAAc,CAAC,YAAY,CAAC,CAAC;IACpD,IAAI,cAAc,CAAC,mBAAmB,EAAE;QACtC,YAAY,GAAG,cAAc,CAAC,YAAY,EAAE,cAAc,CAAC,mBAAmB,CAAC,CAAC;KACjF;IACD,IAAM,QAAQ,GAAG,aAAa,CAAC,YAAY,CAAC,CAAC;IAE7C,OAAO;QACL,eAAe,iBAAA;QACf,QAAQ,UAAA;KACT,CAAC;AACJ,CAAC","sourcesContent":["import * as React from 'react';\nimport { useConst, useIsomorphicLayoutEffect, usePrevious } from '@fluentui/react-hooks';\nimport { mergeAriaAttributeValues } from '../../Utilities';\nimport { KeytipManager, mergeOverflows, sequencesToID, getAriaDescribedBy } from '../../utilities/keytips/index';\nimport type { KeytipDataOptions } from './KeytipData.types';\nimport type { IKeytipProps } from '../../Keytip';\n\nexport interface IKeytipData {\n  ariaDescribedBy: string | undefined;\n  keytipId: string | undefined;\n}\n\n/**\n * Hook that creates attributes for components which are enabled with Keytip.\n */\nexport function useKeytipData(options: KeytipDataOptions): IKeytipData {\n  const uniqueId = React.useRef<string>();\n  const keytipProps: IKeytipProps | undefined = options.keytipProps\n    ? {\n        disabled: options.disabled,\n        ...options.keytipProps,\n      }\n    : undefined;\n\n  const keytipManager = useConst<KeytipManager>(KeytipManager.getInstance());\n  const prevOptions = usePrevious(options);\n\n  // useLayoutEffect used to strictly emulate didUpdate/didMount behavior\n  useIsomorphicLayoutEffect(() => {\n    if (\n      uniqueId.current &&\n      keytipProps &&\n      (prevOptions?.keytipProps !== options.keytipProps || prevOptions?.disabled !== options.disabled)\n    ) {\n      keytipManager.update(keytipProps, uniqueId.current);\n    }\n  });\n\n  useIsomorphicLayoutEffect(() => {\n    // Register Keytip in KeytipManager\n    if (keytipProps) {\n      uniqueId.current = keytipManager.register(keytipProps);\n    }\n\n    return () => {\n      // Unregister Keytip in KeytipManager\n      keytipProps && keytipManager.unregister(keytipProps, uniqueId.current!);\n    };\n    // this is meant to run only at mount, and updates are handled separately\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let nativeKeytipProps: IKeytipData = {\n    ariaDescribedBy: undefined,\n    keytipId: undefined,\n  };\n\n  if (keytipProps) {\n    nativeKeytipProps = getKeytipData(keytipManager, keytipProps, options.ariaDescribedBy);\n  }\n\n  return nativeKeytipProps;\n}\n\n/**\n * Gets the aria- and data- attributes to attach to the component\n * @param keytipProps - options for Keytip\n * @param describedByPrepend - ariaDescribedBy value to prepend\n */\nfunction getKeytipData(\n  keytipManager: KeytipManager,\n  keytipProps: IKeytipProps,\n  describedByPrepend?: string,\n): IKeytipData {\n  // Add the parent overflow sequence if necessary\n  const newKeytipProps = keytipManager.addParentOverflow(keytipProps);\n\n  // Construct aria-describedby and data-ktp-id attributes\n  const ariaDescribedBy = mergeAriaAttributeValues(\n    describedByPrepend,\n    getAriaDescribedBy(newKeytipProps.keySequences),\n  )!;\n\n  let keySequences = [...newKeytipProps.keySequences];\n  if (newKeytipProps.overflowSetSequence) {\n    keySequences = mergeOverflows(keySequences, newKeytipProps.overflowSetSequence);\n  }\n  const keytipId = sequencesToID(keySequences);\n\n  return {\n    ariaDescribedBy,\n    keytipId,\n  };\n}\n"]}
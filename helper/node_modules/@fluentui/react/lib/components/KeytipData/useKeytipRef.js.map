{"version":3,"file":"useKeytipRef.js","sourceRoot":"../src/","sources":["components/KeytipData/useKeytipRef.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,cAAc,EAAE,sBAAsB,EAAE,mBAAmB,EAAE,MAAM,+BAA+B,CAAC;AAC5G,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAGhD;;;GAGG;AACH,MAAM,UAAU,YAAY,CAC1B,OAA0B;IAEpB,IAAA,KAAgC,aAAa,CAAC,OAAO,CAAC,EAApD,QAAQ,cAAA,EAAE,eAAe,qBAA2B,CAAC;IAE7D,IAAM,UAAU,GAAwB,KAAK,CAAC,WAAW,CACvD,UAAC,cAA+B;QAC9B,IAAI,CAAC,cAAc,EAAE;YACnB,OAAO;SACR;QAED,IAAM,aAAa,GAAG,gBAAgB,CAAC,cAAc,EAAE,cAAc,CAAC,IAAI,cAAc,CAAC;QACzF,IAAM,cAAc,GAAG,gBAAgB,CAAC,cAAc,EAAE,sBAAsB,CAAC,IAAI,aAAa,CAAC;QACjG,IAAM,WAAW,GAAG,gBAAgB,CAAC,cAAc,EAAE,mBAAmB,CAAC,IAAI,cAAc,CAAC;QAE5F,YAAY,CAAC,aAAa,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QACtD,YAAY,CAAC,cAAc,EAAE,sBAAsB,EAAE,QAAQ,CAAC,CAAC;QAC/D,YAAY,CAAC,WAAW,EAAE,kBAAkB,EAAE,eAAe,EAAE,IAAI,CAAC,CAAC;IACvE,CAAC,EACD,CAAC,QAAQ,EAAE,eAAe,CAAC,CAC5B,CAAC;IAEF,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,MAAM,UAAU,YAAY,CAC1B,OAA2B,EAC3B,aAAqB,EACrB,cAAkC,EAClC,MAAuB;IAAvB,uBAAA,EAAA,cAAuB;IAEvB,IAAI,OAAO,IAAI,cAAc,EAAE;QAC7B,IAAI,KAAK,GAAG,cAAc,CAAC;QAC3B,IAAI,MAAM,EAAE;YACV,IAAM,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;YACzD,IAAI,YAAY,IAAI,YAAY,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE;gBAC/D,KAAK,GAAM,YAAY,SAAI,cAAgB,CAAC;aAC7C;SACF;QAED,OAAO,CAAC,YAAY,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;KAC5C;AACH,CAAC;AAED,SAAS,gBAAgB,CAAC,WAAwB,EAAE,aAAqB;IACvE,OAAO,WAAW,CAAC,aAAa,CAAC,MAAI,aAAa,MAAG,CAAC,CAAC;AACzD,CAAC","sourcesContent":["import * as React from 'react';\nimport { DATAKTP_TARGET, DATAKTP_EXECUTE_TARGET, DATAKTP_ARIA_TARGET } from '../../utilities/keytips/index';\nimport { useKeytipData } from './useKeytipData';\nimport type { KeytipDataOptions } from './KeytipData.types';\n\n/**\n * Hook that creates a ref which is used for passing to Keytip target element.\n * The ref will handle setting the attributes needed for Keytip to work.\n */\nexport function useKeytipRef<TElement extends HTMLElement = HTMLElement>(\n  options: KeytipDataOptions,\n): React.Ref<TElement> {\n  const { keytipId, ariaDescribedBy } = useKeytipData(options);\n\n  const contentRef: React.Ref<TElement> = React.useCallback(\n    (contentElement: TElement | null): void => {\n      if (!contentElement) {\n        return;\n      }\n\n      const targetElement = findFirstElement(contentElement, DATAKTP_TARGET) || contentElement;\n      const executeElement = findFirstElement(contentElement, DATAKTP_EXECUTE_TARGET) || targetElement;\n      const ariaElement = findFirstElement(contentElement, DATAKTP_ARIA_TARGET) || executeElement;\n\n      setAttribute(targetElement, DATAKTP_TARGET, keytipId);\n      setAttribute(executeElement, DATAKTP_EXECUTE_TARGET, keytipId);\n      setAttribute(ariaElement, 'aria-describedby', ariaDescribedBy, true);\n    },\n    [keytipId, ariaDescribedBy],\n  );\n\n  return contentRef;\n}\n\nexport function setAttribute(\n  element: HTMLElement | null,\n  attributeName: string,\n  attributeValue: string | undefined,\n  append: boolean = false,\n): void {\n  if (element && attributeValue) {\n    let value = attributeValue;\n    if (append) {\n      const currentValue = element.getAttribute(attributeName);\n      if (currentValue && currentValue.indexOf(attributeValue) === -1) {\n        value = `${currentValue} ${attributeValue}`;\n      }\n    }\n\n    element.setAttribute(attributeName, value);\n  }\n}\n\nfunction findFirstElement(rootElement: HTMLElement, dataAttribute: string): HTMLElement | null {\n  return rootElement.querySelector(`[${dataAttribute}]`);\n}\n"]}
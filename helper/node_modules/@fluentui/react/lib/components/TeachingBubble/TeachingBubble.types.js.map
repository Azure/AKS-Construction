{"version":3,"file":"TeachingBubble.types.js","sourceRoot":"../src/","sources":["components/TeachingBubble/TeachingBubble.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { IImageProps } from '../../Image';\nimport type { IButtonProps } from '../../Button';\nimport type { IAccessiblePopupProps } from '../../common/IAccessiblePopupProps';\nimport type { ICalloutProps, ICalloutContentStyleProps } from '../../Callout';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IFocusTrapZoneProps } from '../FocusTrapZone/index';\nimport type { Target } from '@fluentui/react-hooks';\n\n/**\n * {@docCategory TeachingBubble}\n */\nexport interface ITeachingBubble {\n  /** Sets focus to the TeachingBubble root element */\n  focus(): void;\n}\n\n/**\n * TeachingBubble component props.\n * {@docCategory TeachingBubble}\n */\nexport interface ITeachingBubbleProps extends React.RefAttributes<HTMLDivElement>, IAccessiblePopupProps {\n  children?: React.ReactNode;\n\n  /**\n   * Optional callback to access the ITeachingBubble interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ITeachingBubble>;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ITeachingBubbleStyleProps, ITeachingBubbleStyles>;\n\n  /**\n   * Theme provided by High-Order Component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Properties to pass through for Callout, reference detail properties in ICalloutProps\n   */\n  calloutProps?: ICalloutProps;\n\n  /**\n   * Properties to pass through for FocusTrapZone, reference detail properties in IFocusTrapZoneProps\n   */\n  focusTrapZoneProps?: IFocusTrapZoneProps;\n\n  /**\n   * A headline for the Teaching Bubble.\n   */\n  headline?: string;\n\n  /**\n   * A variation with smaller bold headline and no margins.\n   */\n  hasCondensedHeadline?: boolean;\n\n  /**\n   * @deprecated Use `hasCloseButton`.\n   */\n  hasCloseIcon?: boolean;\n\n  /**\n   * Whether the TeachingBubble renders close button in the top right corner.\n   */\n  hasCloseButton?: boolean;\n\n  /**\n   * An Image for the TeachingBubble.\n   */\n  illustrationImage?: IImageProps;\n\n  /**\n   * The Primary interaction button\n   */\n  primaryButtonProps?: IButtonProps;\n\n  /**\n   * The Secondary interaction button\n   */\n  secondaryButtonProps?: IButtonProps;\n\n  /**\n   * Text that will be rendered in the footer of the TeachingBubble.\n   * May be rendered alongside primary and secondary buttons.\n   */\n  footerContent?: string | JSX.Element;\n\n  /**\n   * Element to anchor the TeachingBubble to.\n   * @deprecated Use `target` instead\n   */\n  targetElement?: HTMLElement;\n\n  /**\n   * Element, MouseEvent, Point, or querySelector string that the TeachingBubble\n   * should anchor to.\n   */\n  target?: Target;\n\n  /**\n   * Callback when the TeachingBubble tries to close.\n   */\n  onDismiss?: (ev?: any) => void;\n\n  /**\n   * Whether or not the TeachingBubble is wide, with image on the left side.\n   */\n  isWide?: boolean;\n\n  /**\n   * A variation with smaller bold headline and margins to the body.\n   * (`hasCondensedHeadline` takes precedence if it is also set to true.)\n   */\n  hasSmallHeadline?: boolean;\n\n  /**\n   *  Defines the element id referencing the element containing label text for TeachingBubble.\n   */\n  ariaLabelledBy?: string;\n\n  /**\n   * Defines the element id referencing the element containing the description for the TeachingBubble.\n   */\n  ariaDescribedBy?: string;\n}\n\n/**\n * {@docCategory TeachingBubble}\n */\nexport type ITeachingBubbleStyleProps = Required<Pick<ITeachingBubbleProps, 'theme'>> &\n  Pick<ITeachingBubbleProps, 'hasCondensedHeadline' | 'hasSmallHeadline' | 'isWide'> & {\n    /** Style props for callout. */\n    calloutProps?: ICalloutContentStyleProps;\n    /** Class name for primary button. */\n    primaryButtonClassName?: string;\n    /** Class name for secondary button. */\n    secondaryButtonClassName?: string;\n    /** If the close button is visible. */\n    hasCloseButton?: boolean;\n    /** If a headline has been specified. */\n    hasHeadline?: boolean;\n  };\n\n/**\n * {@docCategory TeachingBubble}\n */\nexport interface ITeachingBubbleStyles {\n  root: IStyle;\n  body: IStyle;\n  bodyContent: IStyle;\n  closeButton: IStyle;\n  content: IStyle;\n  footer: IStyle;\n  header: IStyle;\n  headline: IStyle;\n  imageContent: IStyle;\n  primaryButton: IStyle;\n  secondaryButton: IStyle;\n  subText: IStyle;\n  subComponentStyles?: ITeachingBubbleSubComponentStyles;\n}\n\n/**\n * {@docCategory TeachingBubble}\n */\nexport interface ITeachingBubbleSubComponentStyles {\n  /** Refers to the callout that hosts the TeachingBubble. */\n  // TODO: this should be the interface once we're on TS 2.9.2 but otherwise causes errors in 2.8.4\n  // callout: IStyleFunctionOrObject<ICalloutContentStyleProps, ICalloutContentStyles>;\n  callout: IStyleFunctionOrObject<any, any>;\n}\n"]}
{"version":3,"file":"KeytipLayer.base.js","sourceRoot":"../src/","sources":["components/KeytipLayer/KeytipLayer.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { getLayerStyles } from './KeytipLayer.styles';\nimport { Keytip } from '../../Keytip';\nimport { Layer } from '../../Layer';\nimport {\n  classNamesFunction,\n  getDocument,\n  arraysEqual,\n  warn,\n  isMac,\n  EventGroup,\n  Async,\n  initializeComponentRef,\n  KeyCodes,\n} from '../../Utilities';\nimport { KeytipManager } from '../../utilities/keytips/KeytipManager';\nimport { KeytipTree } from './KeytipTree';\nimport {\n  ktpTargetFromId,\n  ktpTargetFromSequences,\n  sequencesToID,\n  mergeOverflows,\n} from '../../utilities/keytips/KeytipUtils';\nimport { transitionKeysContain } from '../../utilities/keytips/IKeytipTransitionKey';\nimport { KeytipEvents, KTP_LAYER_ID, KTP_ARIA_SEPARATOR } from '../../utilities/keytips/KeytipConstants';\nimport type { IKeytipLayerProps, IKeytipLayerStyles, IKeytipLayerStyleProps } from './KeytipLayer.types';\nimport type { IKeytipProps } from '../../Keytip';\nimport type { IKeytipTreeNode } from './IKeytipTreeNode';\nimport type { KeytipTransitionModifier, IKeytipTransitionKey } from '../../utilities/keytips/IKeytipTransitionKey';\n\nexport interface IKeytipLayerState {\n  inKeytipMode: boolean;\n  keytips: IKeytipProps[];\n  visibleKeytips: IKeytipProps[];\n}\n\n// Default sequence is Alt-Windows (Alt-Meta) in Windows, Option-Control (Alt-Control) in Mac\nconst defaultStartSequence: IKeytipTransitionKey = {\n  key: isMac() ? 'Control' : 'Meta',\n  modifierKeys: [KeyCodes.alt],\n};\n\n// Default exit sequence is the same as the start sequence\nconst defaultExitSequence: IKeytipTransitionKey = defaultStartSequence;\n\n// Default return sequence is Escape\nconst defaultReturnSequence: IKeytipTransitionKey = {\n  key: 'Escape',\n};\n\nconst getClassNames = classNamesFunction<IKeytipLayerStyleProps, IKeytipLayerStyles>();\n\n/**\n * A layer that holds all keytip items\n * {@docCategory Keytips}\n */\nexport class KeytipLayerBase extends React.Component<IKeytipLayerProps, IKeytipLayerState> {\n  public static defaultProps: IKeytipLayerProps = {\n    keytipStartSequences: [defaultStartSequence],\n    keytipExitSequences: [defaultExitSequence],\n    keytipReturnSequences: [defaultReturnSequence],\n    content: '',\n  };\n\n  private _events: EventGroup;\n  private _async: Async;\n\n  private _keytipTree: KeytipTree;\n\n  private _keytipManager: KeytipManager = KeytipManager.getInstance();\n  private _classNames: { [key in keyof IKeytipLayerStyles]: string };\n  private _currentSequence: string;\n  private _newCurrentKeytipSequences?: string[];\n\n  private _delayedKeytipQueue: string[] = [];\n  private _delayedQueueTimeout: number;\n\n  private _keyHandled = false;\n\n  constructor(props: IKeytipLayerProps, context: any) {\n    super(props, context);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n    this._async = new Async(this);\n\n    const keytips = this._keytipManager.getKeytips();\n\n    this.state = {\n      inKeytipMode: false,\n      keytips,\n      visibleKeytips: this._getVisibleKeytips(keytips),\n    };\n\n    this._buildTree();\n\n    this._currentSequence = '';\n\n    // Add keytip listeners\n    this._events.on(this._keytipManager, KeytipEvents.KEYTIP_ADDED, this._onKeytipAdded);\n    this._events.on(this._keytipManager, KeytipEvents.KEYTIP_UPDATED, this._onKeytipUpdated);\n    this._events.on(this._keytipManager, KeytipEvents.KEYTIP_REMOVED, this._onKeytipRemoved);\n    this._events.on(this._keytipManager, KeytipEvents.PERSISTED_KEYTIP_ADDED, this._onPersistedKeytipAdded);\n    this._events.on(this._keytipManager, KeytipEvents.PERSISTED_KEYTIP_REMOVED, this._onPersistedKeytipRemoved);\n    this._events.on(this._keytipManager, KeytipEvents.PERSISTED_KEYTIP_EXECUTE, this._onPersistedKeytipExecute);\n  }\n\n  public render(): JSX.Element {\n    const { content, styles } = this.props;\n\n    const { keytips, visibleKeytips } = this.state;\n\n    this._classNames = getClassNames(styles, {});\n\n    return (\n      <Layer styles={getLayerStyles}>\n        <span id={KTP_LAYER_ID} className={this._classNames.innerContent}>{`${content}${KTP_ARIA_SEPARATOR}`}</span>\n        {keytips &&\n          keytips.map((keytipProps: IKeytipProps, index: number) => {\n            return (\n              <span key={index} id={sequencesToID(keytipProps.keySequences)} className={this._classNames.innerContent}>\n                {keytipProps.keySequences.join(KTP_ARIA_SEPARATOR)}\n              </span>\n            );\n          })}\n        {visibleKeytips &&\n          visibleKeytips.map((visibleKeytipProps: IKeytipProps) => {\n            return <Keytip key={sequencesToID(visibleKeytipProps.keySequences)} {...visibleKeytipProps} />;\n          })}\n      </Layer>\n    );\n  }\n\n  public componentDidMount(): void {\n    // Add window listeners\n    this._events.on(window, 'mouseup', this._onDismiss, true /* useCapture */);\n    this._events.on(window, 'pointerup', this._onDismiss, true /* useCapture */);\n    this._events.on(window, 'resize', this._onDismiss);\n    this._events.on(window, 'keydown', this._onKeyDown, true /* useCapture */);\n    this._events.on(window, 'keypress', this._onKeyPress, true /* useCapture */);\n    this._events.on(window, 'scroll', this._onDismiss, true /* useCapture */);\n\n    // Add keytip listeners\n    this._events.on(this._keytipManager, KeytipEvents.ENTER_KEYTIP_MODE, this._enterKeytipMode);\n    this._events.on(this._keytipManager, KeytipEvents.EXIT_KEYTIP_MODE, this._exitKeytipMode);\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  // The below public functions are only public for testing purposes\n  // They are not intended to be used in app code by using a KeytipLayer reference\n\n  public getCurrentSequence(): string {\n    return this._currentSequence;\n  }\n\n  public getKeytipTree(): KeytipTree {\n    return this._keytipTree;\n  }\n\n  /**\n   * Processes an IKeytipTransitionKey entered by the user\n   *\n   * @param transitionKey - IKeytipTransitionKey received by the layer to process\n   */\n  public processTransitionInput(transitionKey: IKeytipTransitionKey, ev?: React.KeyboardEvent<HTMLElement>): void {\n    const currKtp = this._keytipTree.currentKeytip;\n    if (transitionKeysContain(this.props.keytipExitSequences!, transitionKey) && currKtp) {\n      // If key sequence is in 'exit sequences', exit keytip mode\n      this._keyHandled = true;\n      this._exitKeytipMode(ev);\n    } else if (transitionKeysContain(this.props.keytipReturnSequences!, transitionKey)) {\n      // If key sequence is in return sequences, move currentKeytip to parent (or if currentKeytip is the root, exit)\n      if (currKtp) {\n        this._keyHandled = true;\n        if (currKtp.id === this._keytipTree.root.id) {\n          // We are at the root, exit keytip mode\n          this._exitKeytipMode(ev);\n        } else {\n          // If this keytip has a onReturn prop, we execute the func.\n          if (currKtp.onReturn) {\n            currKtp.onReturn(this._getKtpExecuteTarget(currKtp), this._getKtpTarget(currKtp));\n          }\n\n          // Reset currentSequence\n          this._currentSequence = '';\n          // Return pointer to its parent\n          this._keytipTree.currentKeytip = this._keytipTree.getNode(currKtp.parent);\n          // Show children keytips of the new currentKeytip\n          this.showKeytips(this._keytipTree.getChildren());\n          this._warnIfDuplicateKeytips();\n        }\n      }\n    } else if (transitionKeysContain(this.props.keytipStartSequences!, transitionKey) && !currKtp) {\n      // If key sequence is in 'entry sequences' and currentKeytip is null, we enter keytip mode\n      this._keyHandled = true;\n      this._enterKeytipMode(transitionKey);\n      this._warnIfDuplicateKeytips();\n    }\n  }\n\n  /**\n   * Processes inputs from the document listener and traverse the keytip tree\n   *\n   * @param key - Key pressed by the user\n   */\n  public processInput(key: string, ev?: React.KeyboardEvent<HTMLElement>): void {\n    // Concat the input key with the current sequence\n    const currSequence: string = this._currentSequence + key;\n    let currKtp = this._keytipTree.currentKeytip;\n\n    // currentKeytip must be defined, otherwise we haven't entered keytip mode yet\n    if (currKtp) {\n      const node = this._keytipTree.getExactMatchedNode(currSequence, currKtp);\n      if (node) {\n        this._keytipTree.currentKeytip = currKtp = node;\n        const currKtpChildren = this._keytipTree.getChildren();\n\n        // Execute this node's onExecute if defined\n        if (currKtp.onExecute) {\n          currKtp.onExecute(this._getKtpExecuteTarget(currKtp), this._getKtpTarget(currKtp));\n          // Reset currKtp, this might have changed from the onExecute\n          currKtp = this._keytipTree.currentKeytip;\n        }\n\n        // To exit keytipMode after executing the keytip it must not have a menu or have dynamic children\n        if (currKtpChildren.length === 0 && !(currKtp.hasDynamicChildren || currKtp.hasMenu)) {\n          this._exitKeytipMode(ev);\n        } else {\n          // Show all children keytips\n          this.showKeytips(currKtpChildren);\n          this._warnIfDuplicateKeytips();\n        }\n\n        // Clear currentSequence\n        this._currentSequence = '';\n        return;\n      }\n\n      const partialNodes = this._keytipTree.getPartiallyMatchedNodes(currSequence, currKtp);\n      if (partialNodes.length > 0) {\n        // We found nodes that partially match the sequence, so we show only those\n        // Omit showing persisted nodes here\n        const ids = partialNodes\n          .filter((partialNode: IKeytipTreeNode) => {\n            return !partialNode.persisted;\n          })\n          .map((partialNode: IKeytipTreeNode) => {\n            return partialNode.id;\n          });\n        this.showKeytips(ids);\n\n        // Save currentSequence\n        this._currentSequence = currSequence;\n      }\n    }\n  }\n\n  /**\n   * Show the given keytips and hide all others\n   *\n   * @param ids - Keytip IDs to show\n   */\n  public showKeytips(ids: string[]): void {\n    // Update the visible prop in the manager\n    for (const keytip of this._keytipManager.getKeytips()) {\n      let keytipId = sequencesToID(keytip.keySequences);\n      if (keytip.overflowSetSequence) {\n        // Check if the ID with the overflow is the keytip we're looking for\n        keytipId = sequencesToID(mergeOverflows(keytip.keySequences, keytip.overflowSetSequence));\n      }\n      if (ids.indexOf(keytipId) >= 0) {\n        keytip.visible = true;\n      } else {\n        keytip.visible = false;\n      }\n    }\n    // Apply the manager changes to the Layer state\n    this._setKeytips();\n  }\n\n  /**\n   * Enters keytip mode for this layer\n   */\n  private _enterKeytipMode(transitionKey?: IKeytipTransitionKey): void {\n    if (this._keytipManager.shouldEnterKeytipMode) {\n      if (this._keytipManager.delayUpdatingKeytipChange) {\n        this._buildTree();\n        this._setKeytips();\n      }\n      this._keytipTree.currentKeytip = this._keytipTree.root;\n      // Show children of root\n      this.showKeytips(this._keytipTree.getChildren());\n\n      this._setInKeytipMode(true /* inKeytipMode */);\n\n      if (this.props.onEnterKeytipMode) {\n        this.props.onEnterKeytipMode(transitionKey);\n      }\n    }\n  }\n\n  private _buildTree(): void {\n    this._keytipTree = new KeytipTree();\n    // Add regular and persisted keytips to the tree\n    for (const id of Object.keys(this._keytipManager.keytips)) {\n      const uniqueKeytip = this._keytipManager.keytips[id];\n      this._keytipTree.addNode(uniqueKeytip.keytip, uniqueKeytip.uniqueID);\n    }\n\n    for (const id of Object.keys(this._keytipManager.persistedKeytips)) {\n      const uniqueKeytip = this._keytipManager.persistedKeytips[id];\n      this._keytipTree.addNode(uniqueKeytip.keytip, uniqueKeytip.uniqueID);\n    }\n  }\n\n  /**\n   * Exits keytip mode for this layer\n   */\n  private _exitKeytipMode(ev?: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement>): void {\n    this._keytipTree.currentKeytip = undefined;\n    this._currentSequence = '';\n    // Hide all keytips\n    this.showKeytips([]);\n\n    // Reset the delayed keytips if any\n    this._delayedQueueTimeout && this._async.clearTimeout(this._delayedQueueTimeout);\n    this._delayedKeytipQueue = [];\n\n    this._setInKeytipMode(false /* inKeytipMode */);\n\n    if (this.props.onExitKeytipMode) {\n      this.props.onExitKeytipMode(ev);\n    }\n  }\n\n  /**\n   * Sets the keytips state property\n   *\n   * @param keytipProps - Keytips to set in this layer\n   */\n  private _setKeytips(keytipProps: IKeytipProps[] = this._keytipManager.getKeytips()) {\n    this.setState({ keytips: keytipProps, visibleKeytips: this._getVisibleKeytips(keytipProps) });\n  }\n\n  /**\n   * Callback function to use for persisted keytips\n   *\n   * @param overflowButtonSequences - The overflow button sequence to execute\n   * @param keytipSequences - The keytip that should become the 'currentKeytip' when it is registered\n   */\n  private _persistedKeytipExecute(overflowButtonSequences: string[], keytipSequences: string[]) {\n    // Save newCurrentKeytip for later\n    this._newCurrentKeytipSequences = keytipSequences;\n\n    // Execute the overflow button's onExecute\n    const overflowKeytipNode = this._keytipTree.getNode(sequencesToID(overflowButtonSequences));\n    if (overflowKeytipNode && overflowKeytipNode.onExecute) {\n      overflowKeytipNode.onExecute(\n        this._getKtpExecuteTarget(overflowKeytipNode),\n        this._getKtpTarget(overflowKeytipNode),\n      );\n    }\n  }\n\n  private _getVisibleKeytips(keytips: IKeytipProps[]): IKeytipProps[] {\n    // Filter out non-visible keytips and duplicates\n    const seenIds: { [childSequence: string]: number } = {};\n    return keytips.filter(keytip => {\n      let keytipId = sequencesToID(keytip.keySequences);\n      if (keytip.overflowSetSequence) {\n        // Account for overflow set sequences when checking for duplicates\n        keytipId = sequencesToID(mergeOverflows(keytip.keySequences, keytip.overflowSetSequence));\n      }\n      seenIds[keytipId] = seenIds[keytipId] ? seenIds[keytipId] + 1 : 1;\n      return keytip.visible && seenIds[keytipId] === 1;\n    });\n  }\n\n  private _onDismiss = (ev?: React.MouseEvent<HTMLElement>): void => {\n    // if we are in keytip mode, then exit keytip mode\n    if (this.state.inKeytipMode) {\n      this._exitKeytipMode(ev);\n    }\n  };\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    this._keyHandled = false;\n    // using key since which has been deprecated and key is now widely suporrted.\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/which\n    let key = ev.key;\n    switch (key) {\n      case 'Tab':\n      case 'Enter':\n      case 'Spacebar':\n      case ' ':\n      case 'ArrowUp':\n      case 'Up':\n      case 'ArrowDown':\n      case 'Down':\n      case 'ArrowLeft':\n      case 'Left':\n      case 'ArrowRight':\n      case 'Right':\n        if (this.state.inKeytipMode) {\n          this._keyHandled = true;\n          this._exitKeytipMode(ev);\n        }\n        break;\n      default:\n        // Special cases for browser-specific keys that are not at standard\n        // (according to http://www.w3.org/TR/uievents-key/#keys-navigation)\n        if (key === 'Esc') {\n          // Edge: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/5290772/\n          key = 'Escape';\n        } else if (key === 'OS' || key === 'Win') {\n          // Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1232918\n          // Edge: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/\n          // and https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/16424492/\n          key = 'Meta';\n        }\n        const transitionKey: IKeytipTransitionKey = { key };\n        transitionKey.modifierKeys = this._getModifierKey(key, ev);\n        this.processTransitionInput(transitionKey, ev);\n        break;\n    }\n  };\n\n  /**\n   * Gets the ModifierKeyCodes based on the keyboard event\n   *\n   * @param ev - React.KeyboardEvent\n   * @returns List of ModifierKeyCodes that were pressed\n   */\n  private _getModifierKey(key: string, ev: React.KeyboardEvent<HTMLElement>): KeytipTransitionModifier[] | undefined {\n    const modifierKeys: KeytipTransitionModifier[] = [];\n    if (ev.altKey && key !== 'Alt') {\n      modifierKeys.push(KeyCodes.alt);\n    }\n    if (ev.ctrlKey && key !== 'Control') {\n      modifierKeys.push(KeyCodes.ctrl);\n    }\n    if (ev.shiftKey && key !== 'Shift') {\n      modifierKeys.push(KeyCodes.shift);\n    }\n    if (ev.metaKey && key !== 'Meta') {\n      modifierKeys.push(KeyCodes.leftWindow);\n    }\n    return modifierKeys.length ? modifierKeys : undefined;\n  }\n\n  private _onKeyPress = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (this.state.inKeytipMode && !this._keyHandled) {\n      // Call processInput\n      this.processInput(ev.key.toLocaleLowerCase(), ev);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  };\n\n  private _onKeytipAdded = (eventArgs: any) => {\n    const keytipProps = eventArgs.keytip;\n    const uniqueID = eventArgs.uniqueID;\n\n    this._keytipTree.addNode(keytipProps, uniqueID);\n    this._setKeytips();\n\n    // Add the keytip to the queue to show later\n    if (this._keytipTree.isCurrentKeytipParent(keytipProps)) {\n      // Ensure existing children are still shown.\n      this._delayedKeytipQueue = this._delayedKeytipQueue.concat(this._keytipTree.currentKeytip?.children || []);\n\n      this._addKeytipToQueue(sequencesToID(keytipProps.keySequences));\n\n      // Ensure the child of currentKeytip is successfully added to currentKeytip's children and update it if not.\n      // Note: Added this condition because KeytipTree.addNode was not always reflecting updates made to a parent node\n      // in currentKeytip when that parent is the currentKeytip.\n      if (\n        this._keytipTree.currentKeytip &&\n        this._keytipTree.currentKeytip.hasDynamicChildren &&\n        this._keytipTree.currentKeytip.children.indexOf(keytipProps.id) < 0\n      ) {\n        const currNode = this._keytipTree.getNode(this._keytipTree.currentKeytip.id);\n        if (currNode) {\n          this._keytipTree.currentKeytip = currNode;\n        }\n      }\n    }\n\n    this._persistedKeytipChecks(keytipProps);\n  };\n\n  private _onKeytipUpdated = (eventArgs: any) => {\n    const keytipProps = eventArgs.keytip;\n    const uniqueID = eventArgs.uniqueID;\n    this._keytipTree.updateNode(keytipProps, uniqueID);\n    this._setKeytips();\n    if (this._keytipTree.isCurrentKeytipParent(keytipProps)) {\n      // Ensure existing children are still shown.\n      this._delayedKeytipQueue = this._delayedKeytipQueue.concat(this._keytipTree.currentKeytip?.children || []);\n      this._addKeytipToQueue(sequencesToID(keytipProps.keySequences));\n    }\n\n    this._persistedKeytipChecks(keytipProps);\n  };\n\n  /**\n   * Helper function to do checks related to persisted/overflow keytips\n   * Done on keytip added and keytip updated\n   *\n   * @param keytipProps - Keytip props\n   */\n  private _persistedKeytipChecks = (keytipProps: IKeytipProps) => {\n    if (this._newCurrentKeytipSequences && arraysEqual(keytipProps.keySequences, this._newCurrentKeytipSequences)) {\n      this._triggerKeytipImmediately(keytipProps);\n    }\n\n    if (this._isCurrentKeytipAnAlias(keytipProps)) {\n      let keytipSequence = keytipProps.keySequences;\n      if (keytipProps.overflowSetSequence) {\n        keytipSequence = mergeOverflows(keytipSequence, keytipProps.overflowSetSequence);\n      }\n      this._keytipTree.currentKeytip = this._keytipTree.getNode(sequencesToID(keytipSequence));\n    }\n  };\n\n  private _onKeytipRemoved = (eventArgs: any) => {\n    const keytipProps = eventArgs.keytip;\n    const uniqueID = eventArgs.uniqueID;\n\n    // Remove keytip from the delayed queue\n    this._removeKeytipFromQueue(sequencesToID(keytipProps.keySequences));\n\n    // Remove the node from the Tree\n    this._keytipTree.removeNode(keytipProps, uniqueID);\n    this._setKeytips();\n  };\n\n  private _onPersistedKeytipAdded = (eventArgs: any) => {\n    const keytipProps = eventArgs.keytip;\n    const uniqueID = eventArgs.uniqueID;\n    this._keytipTree.addNode(keytipProps, uniqueID, true);\n  };\n\n  private _onPersistedKeytipRemoved = (eventArgs: any) => {\n    const keytipProps = eventArgs.keytip;\n    const uniqueID = eventArgs.uniqueID;\n    this._keytipTree.removeNode(keytipProps, uniqueID);\n  };\n\n  private _onPersistedKeytipExecute = (eventArgs: any) => {\n    this._persistedKeytipExecute(eventArgs.overflowButtonSequences, eventArgs.keytipSequences);\n  };\n\n  /**\n   * Trigger a keytip immediately and set it as the current keytip\n   *\n   * @param keytipProps - Keytip to trigger immediately\n   */\n  private _triggerKeytipImmediately(keytipProps: IKeytipProps) {\n    // This keytip should become the currentKeytip and should execute right away\n    let keytipSequence = [...keytipProps.keySequences];\n    if (keytipProps.overflowSetSequence) {\n      keytipSequence = mergeOverflows(keytipSequence, keytipProps.overflowSetSequence);\n    }\n\n    // Set currentKeytip\n    this._keytipTree.currentKeytip = this._keytipTree.getNode(sequencesToID(keytipSequence));\n    if (this._keytipTree.currentKeytip) {\n      // Show all children keytips if any\n      const children = this._keytipTree.getChildren();\n      if (children.length) {\n        this.showKeytips(children);\n      }\n\n      if (this._keytipTree.currentKeytip.onExecute) {\n        this._keytipTree.currentKeytip.onExecute(\n          this._getKtpExecuteTarget(this._keytipTree.currentKeytip),\n          this._getKtpTarget(this._keytipTree.currentKeytip),\n        );\n      }\n    }\n\n    // Unset _newCurrKtpSequences\n    this._newCurrentKeytipSequences = undefined;\n  }\n\n  private _addKeytipToQueue(keytipID: string) {\n    // Add keytip\n    this._delayedKeytipQueue.push(keytipID);\n    // Clear timeout\n    this._delayedQueueTimeout && this._async.clearTimeout(this._delayedQueueTimeout);\n    // Reset timeout\n    this._delayedQueueTimeout = this._async.setTimeout(() => {\n      if (this._delayedKeytipQueue.length) {\n        this.showKeytips(this._delayedKeytipQueue);\n        this._delayedKeytipQueue = [];\n      }\n    }, 300);\n  }\n\n  private _removeKeytipFromQueue(keytipID: string) {\n    const index = this._delayedKeytipQueue.indexOf(keytipID);\n    if (index >= 0) {\n      // Remove keytip\n      this._delayedKeytipQueue.splice(index, 1);\n      // Clear timeout\n      this._delayedQueueTimeout && this._async.clearTimeout(this._delayedQueueTimeout);\n      // Reset timeout\n      this._delayedQueueTimeout = this._async.setTimeout(() => {\n        if (this._delayedKeytipQueue.length) {\n          this.showKeytips(this._delayedKeytipQueue);\n          this._delayedKeytipQueue = [];\n        }\n      }, 300);\n    }\n  }\n\n  private _getKtpExecuteTarget(currKtp: IKeytipTreeNode): HTMLElement | null {\n    return getDocument()!.querySelector(ktpTargetFromId(currKtp.id));\n  }\n\n  private _getKtpTarget(currKtp: IKeytipTreeNode): HTMLElement | null {\n    return getDocument()!.querySelector(ktpTargetFromSequences(currKtp.keySequences));\n  }\n\n  /**\n   * Returns T/F if the keytipProps keySequences match the currentKeytip, and the currentKeytip is in an overflow well\n   * This will make 'keytipProps' the new currentKeytip\n   *\n   * @param keytipProps - Keytip props to check\n   * @returns - T/F if this keytip should become the currentKeytip\n   */\n  private _isCurrentKeytipAnAlias(keytipProps: IKeytipProps): boolean {\n    const currKtp = this._keytipTree.currentKeytip;\n    if (\n      currKtp &&\n      (currKtp.overflowSetSequence || currKtp.persisted) &&\n      arraysEqual(keytipProps.keySequences, currKtp.keySequences)\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Sets if we are in keytip mode.\n   * Note, this sets both the state for the layer as well as\n   * the value that the manager will expose externally.\n   * @param inKeytipMode - Boolean so set whether we are in keytip mode or not\n   */\n  private _setInKeytipMode = (inKeytipMode: boolean): void => {\n    this.setState({ inKeytipMode: inKeytipMode });\n    this._keytipManager.inKeytipMode = inKeytipMode;\n  };\n\n  /**\n   * Emits a warning if duplicate keytips are found for the children of the current keytip\n   */\n  private _warnIfDuplicateKeytips = (): void => {\n    const duplicateKeytips = this._getDuplicateIds(this._keytipTree.getChildren());\n    if (duplicateKeytips.length) {\n      warn('Duplicate keytips found for ' + duplicateKeytips.join(', '));\n    }\n  };\n\n  /**\n   * Returns duplicates among keytip IDs.\n   * If the returned array is empty, no duplicates were found.\n   *\n   * @param keytipIds - Array of keytip IDs to find duplicates for\n   * @returns - Array of duplicates that were found. Each duplicate will only be added once to this array.\n   */\n  private _getDuplicateIds = (keytipIds: string[]): string[] => {\n    const seenIds: { [id: string]: number } = {};\n    return keytipIds.filter(keytipId => {\n      seenIds[keytipId] = seenIds[keytipId] ? seenIds[keytipId] + 1 : 1;\n      // Only add the first duplicate keytip seen\n      return seenIds[keytipId] === 2;\n    });\n  };\n}\n"]}
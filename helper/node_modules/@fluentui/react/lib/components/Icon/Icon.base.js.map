{"version":3,"file":"Icon.base.js","sourceRoot":"../src/","sources":["components/Icon/Icon.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { IconType } from './Icon.types';\nimport { Image } from '../Image/Image';\nimport { ImageLoadState } from '../Image/Image.types';\nimport { getNativeProps, htmlElementProperties, classNamesFunction } from '../../Utilities';\nimport { getIconContent } from './FontIcon';\nimport type { IIconProps, IIconStyleProps, IIconStyles } from './Icon.types';\nimport type { IImageProps } from '../Image/Image.types';\n\nexport interface IIconState {\n  imageLoadError: boolean;\n}\n\nconst getClassNames = classNamesFunction<IIconStyleProps, IIconStyles>({\n  // Icon is used a lot by other components.\n  // It's likely to see expected cases which pass different className to the Icon.\n  // Therefore setting a larger cache size.\n  cacheSize: 100,\n});\n\nexport class IconBase extends React.Component<IIconProps, IIconState> {\n  constructor(props: IIconProps) {\n    super(props);\n    this.state = {\n      imageLoadError: false,\n    };\n  }\n\n  public render() {\n    const { children, className, styles, iconName, imageErrorAs, theme } = this.props;\n    const isPlaceholder = typeof iconName === 'string' && iconName.length === 0;\n    const isImage =\n      // eslint-disable-next-line deprecation/deprecation\n      !!this.props.imageProps || this.props.iconType === IconType.image || this.props.iconType === IconType.Image;\n    const iconContent = getIconContent(iconName) || {};\n    const { iconClassName, children: iconContentChildren, mergeImageProps } = iconContent;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      iconClassName,\n      isImage,\n      isPlaceholder,\n    });\n\n    const RootType = isImage ? 'span' : 'i';\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, htmlElementProperties, [\n      'aria-label',\n    ]);\n    const { imageLoadError } = this.state;\n    const imageProps: IImageProps = {\n      ...this.props.imageProps,\n      onLoadingStateChange: this._onImageLoadingStateChange,\n    };\n    const ImageType = (imageLoadError && imageErrorAs) || Image;\n\n    // eslint-disable-next-line deprecation/deprecation\n    const ariaLabel = this.props['aria-label'] || this.props.ariaLabel;\n    const accessibleName = imageProps.alt || ariaLabel || this.props.title;\n    const hasName = !!(\n      accessibleName ||\n      this.props['aria-labelledby'] ||\n      imageProps['aria-label'] ||\n      imageProps['aria-labelledby']\n    );\n    const containerProps = hasName\n      ? {\n          role: isImage || mergeImageProps ? undefined : 'img',\n          'aria-label': isImage || mergeImageProps ? undefined : accessibleName,\n        }\n      : {\n          'aria-hidden': true,\n        };\n\n    let finalIconContentChildren = iconContentChildren;\n\n    if (mergeImageProps && iconContentChildren && typeof iconContentChildren === 'object' && accessibleName) {\n      finalIconContentChildren = React.cloneElement(iconContentChildren, {\n        alt: accessibleName,\n      });\n    }\n\n    return (\n      <RootType\n        data-icon-name={iconName}\n        {...containerProps}\n        {...nativeProps}\n        {...(mergeImageProps\n          ? {\n              title: undefined,\n              'aria-label': undefined,\n            }\n          : {})}\n        className={classNames.root}\n      >\n        {isImage ? <ImageType {...imageProps} /> : children || finalIconContentChildren}\n      </RootType>\n    );\n  }\n\n  private _onImageLoadingStateChange = (state: ImageLoadState): void => {\n    if (this.props.imageProps && this.props.imageProps.onLoadingStateChange) {\n      this.props.imageProps.onLoadingStateChange(state);\n    }\n    if (state === ImageLoadState.error) {\n      this.setState({ imageLoadError: true });\n    }\n  };\n}\n"]}
{"version":3,"file":"DocumentCardPreview.base.js","sourceRoot":"../src/","sources":["components/DocumentCard/DocumentCardPreview.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Icon } from '../../Icon';\nimport { Image } from '../../Image';\nimport { Link } from '../../Link';\nimport { classNamesFunction, css, initializeComponentRef } from '../../Utilities';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type {\n  IDocumentCardPreviewImage,\n  IDocumentCardPreviewProps,\n  IDocumentCardPreviewStyleProps,\n  IDocumentCardPreviewStyles,\n} from './DocumentCardPreview.types';\n\nconst DEFAULT_DISPLAY_COUNT = 3;\nconst getClassNames = classNamesFunction<IDocumentCardPreviewStyleProps, IDocumentCardPreviewStyles>();\n\n/**\n * {@docCategory DocumentCard}\n */\nexport class DocumentCardPreviewBase extends React.Component<IDocumentCardPreviewProps, any> {\n  private _classNames: IProcessedStyleSet<IDocumentCardPreviewStyles>;\n\n  constructor(props: IDocumentCardPreviewProps) {\n    super(props);\n\n    initializeComponentRef(this);\n  }\n\n  public render(): JSX.Element {\n    const { previewImages, styles, theme, className } = this.props;\n    let style: React.CSSProperties | undefined;\n    let preview: React.ReactNode;\n    const isFileList = previewImages.length > 1;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      isFileList,\n    });\n\n    if (previewImages.length > 1) {\n      // Render a list of files\n      preview = this._renderPreviewList(previewImages);\n    } else if (previewImages.length === 1) {\n      // Render a single preview\n      preview = this._renderPreviewImage(previewImages[0]);\n\n      // Override the border color if an accent color was provided\n      /* eslint-disable deprecation/deprecation */\n      if (previewImages[0].accentColor) {\n        style = {\n          borderBottomColor: previewImages[0].accentColor,\n        };\n      }\n      /* eslint-enable deprecation/deprecation */\n    }\n\n    return (\n      <div className={this._classNames.root} style={style}>\n        {preview}\n      </div>\n    );\n  }\n\n  private _renderPreviewImage(\n    previewImage: IDocumentCardPreviewImage,\n  ): React.ReactElement<React.HTMLAttributes<HTMLDivElement>> {\n    const { width, height, imageFit, previewIconProps, previewIconContainerClass } = previewImage;\n\n    if (previewIconProps) {\n      return (\n        <div\n          className={css(this._classNames.previewIcon, previewIconContainerClass)}\n          style={{ width: width, height: height }}\n        >\n          <Icon {...previewIconProps} />\n        </div>\n      );\n    }\n\n    const image = (\n      <Image\n        width={width}\n        height={height}\n        imageFit={imageFit}\n        src={previewImage.previewImageSrc}\n        role=\"presentation\"\n        alt=\"\"\n      />\n    );\n\n    let icon;\n    if (previewImage.iconSrc) {\n      icon = <Image className={this._classNames.icon} src={previewImage.iconSrc} role=\"presentation\" alt=\"\" />;\n    }\n\n    return (\n      <div>\n        {image}\n        {icon}\n      </div>\n    );\n  }\n\n  private _renderPreviewList = (\n    previewImages: IDocumentCardPreviewImage[],\n  ): React.ReactElement<React.HTMLAttributes<HTMLDivElement>> => {\n    const { getOverflowDocumentCountText, maxDisplayCount = DEFAULT_DISPLAY_COUNT } = this.props;\n\n    // Determine how many documents we won't be showing\n    const overflowDocumentCount = previewImages.length - maxDisplayCount;\n\n    // Determine the overflow text that will be rendered after the preview list.\n    const overflowText = overflowDocumentCount\n      ? getOverflowDocumentCountText\n        ? getOverflowDocumentCountText(overflowDocumentCount)\n        : '+' + overflowDocumentCount\n      : null;\n\n    // Create list items for the documents to be shown\n    const fileListItems = previewImages.slice(0, maxDisplayCount).map((file, fileIndex) => (\n      <li key={fileIndex}>\n        <Image\n          className={this._classNames.fileListIcon}\n          src={file.iconSrc}\n          role=\"presentation\"\n          alt=\"\"\n          width=\"16px\"\n          height=\"16px\"\n        />\n        <Link\n          className={this._classNames.fileListLink}\n          // eslint-disable-next-line deprecation/deprecation\n          href={file.url}\n          {...file.linkProps}\n        >\n          {file.name}\n        </Link>\n      </li>\n    ));\n\n    return (\n      <div>\n        <ul className={this._classNames.fileList}>{fileListItems}</ul>\n        {overflowText && <span className={this._classNames.fileListOverflowText}>{overflowText}</span>}\n      </div>\n    );\n  };\n}\n"]}
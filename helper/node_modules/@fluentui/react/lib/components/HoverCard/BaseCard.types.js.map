{"version":3,"file":"BaseCard.types.js","sourceRoot":"../src/","sources":["components/HoverCard/BaseCard.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\n\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { ICalloutProps } from '../../Callout';\n\n/**\n * Interface containing props common for all types of cards.\n */\nexport interface IBaseCardProps<TComponent, TStyles, TStyleProps> extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Optional callback to access the TComponent interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<TComponent>;\n\n  /**\n   * Additional CSS class(es) to apply to the Card content wrapper div.\n   */\n  className?: string;\n\n  /**\n   * How the element should be positioned\n   * @defaultvalue DirectionalHint.bottomLeftEdge\n   */\n  directionalHint?: DirectionalHint;\n\n  /**\n   * Make callout content show on the set side\n   * @defaultvalue true\n   */\n  directionalHintFixed?: boolean;\n\n  /**\n   * Focus on first element by default on card or not\n   */\n  firstFocus?: boolean;\n\n  /**\n   * The gap between the card and the target\n   * @defaultvalue 0\n   */\n  gapSpace?: number;\n\n  /**\n   * Callback upon focus or mouse enter event\n   */\n  onEnter?: (ev?: any) => void;\n\n  /**\n   * Callback upon blur or mouse leave event\n   */\n  onLeave?: (ev?: any) => void;\n\n  /**\n   *  Item to be returned with onRender functions\n   */\n  renderData?: any;\n\n  /**\n   * Custom styles for this component\n   */\n  styles?: IStyleFunctionOrObject<TStyleProps, { [P in keyof TStyles]: IStyle }>;\n\n  /**\n   * Element to anchor the card to.\n   */\n  targetElement?: HTMLElement;\n\n  /**\n   * Theme provided by HOC.\n   */\n  theme?: ITheme;\n\n  /**\n   * Trap focus or not\n   */\n  trapFocus?: boolean;\n\n  /**\n   * Custom overriding props to Callout\n   */\n  calloutProps?: ICalloutProps;\n}\n\n/**\n * Interface containing styleProps common for all types of cards.\n */\nexport interface IBaseCardStyleProps {\n  /**\n   * ClassName to inject into wrapper div of the content.\n   */\n  className?: string;\n\n  /**\n   * Theme provided by High-Order Component.\n   */\n  theme: ITheme;\n}\n\n/**\n * Interface containing style sections common for all types of cards.\n */\nexport interface IBaseCardStyles {\n  /**\n   * Style for the root element in the default enabled, non-toggled state.\n   */\n  root?: IStyle;\n}\n"]}
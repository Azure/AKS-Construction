{"version":3,"file":"OverflowSet.base.js","sourceRoot":"../src/","sources":["components/OverflowSet/OverflowSet.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useMergedRefs } from '@fluentui/react-hooks';\nimport { classNamesFunction, divProperties, elementContains, getNativeProps, focusFirstChild } from '../../Utilities';\nimport { OverflowButton } from './OverflowButton';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IOverflowSetProps, IOverflowSetStyles, IOverflowSetStyleProps, IOverflowSet } from './OverflowSet.types';\n\nconst getClassNames = classNamesFunction<IOverflowSetStyleProps, IOverflowSetStyles>();\nconst COMPONENT_NAME = 'OverflowSet';\n\nconst useComponentRef = (props: IOverflowSetProps, divContainer: React.RefObject<HTMLDivElement>) => {\n  React.useImperativeHandle(\n    props.componentRef,\n    (): IOverflowSet => ({\n      focus: (_forceIntoFirstElement?: boolean, bypassHiddenElements?: boolean): boolean => {\n        let focusSucceeded = false;\n        if (divContainer.current) {\n          focusSucceeded = focusFirstChild(divContainer.current, bypassHiddenElements);\n        }\n        return focusSucceeded;\n      },\n      focusElement: (childElement?: HTMLElement) => {\n        let focusSucceeded = false;\n        if (!childElement) {\n          return false;\n        }\n        if (divContainer.current && elementContains(divContainer.current, childElement)) {\n          childElement.focus();\n          focusSucceeded = document.activeElement === childElement;\n        }\n        return focusSucceeded;\n      },\n    }),\n    [divContainer],\n  );\n};\n\nexport const OverflowSetBase: React.FunctionComponent<IOverflowSetProps> = React.forwardRef<\n  HTMLDivElement,\n  IOverflowSetProps\n>((props, forwardedRef) => {\n  const divContainer = React.useRef<HTMLDivElement>(null);\n  const mergedRef = useMergedRefs(divContainer, forwardedRef);\n  useComponentRef(props, divContainer);\n\n  const { items, overflowItems, className, styles, vertical, role, overflowSide = 'end', onRenderItem } = props;\n\n  const classNames: IProcessedStyleSet<IOverflowSetStyles> = getClassNames(styles, { className, vertical });\n\n  const showOverflow = !!overflowItems && overflowItems.length > 0;\n\n  return (\n    <div\n      {...getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties)}\n      role={role || 'group'}\n      aria-orientation={role === 'menubar' ? (vertical === true ? 'vertical' : 'horizontal') : undefined}\n      className={classNames.root}\n      ref={mergedRef}\n    >\n      {overflowSide === 'start' && showOverflow && <OverflowButton {...props} className={classNames.overflowButton} />}\n      {items &&\n        items.map((item, i) => (\n          <div className={classNames.item} key={item.key} role=\"none\">\n            {onRenderItem(item)}\n          </div>\n        ))}\n      {overflowSide === 'end' && showOverflow && <OverflowButton {...props} className={classNames.overflowButton} />}\n    </div>\n  );\n});\nOverflowSetBase.displayName = COMPONENT_NAME;\n"]}
{"version":3,"file":"OverflowButton.js","sourceRoot":"../src/","sources":["components/OverflowSet/OverflowButton.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { KeytipManager } from '../../utilities/keytips/KeytipManager';\nimport { useConst, usePrevious } from '@fluentui/react-hooks';\nimport type { IKeytipProps } from '../../Keytip';\nimport type { IOverflowSetItemProps, IOverflowSetProps } from './OverflowSet.types';\n\nconst registerPersistedKeytips = (\n  keytipsToRegister: IKeytipProps[],\n  keytipManager: KeytipManager,\n  registeredPersistedKeytips: { [uniqueID: string]: IKeytipProps },\n) => {\n  for (const keytip of keytipsToRegister) {\n    const uniqueID = keytipManager.register(keytip, true);\n    // Update map\n    registeredPersistedKeytips[uniqueID] = keytip;\n  }\n};\n\nconst unregisterPersistedKeytips = (\n  keytipManager: KeytipManager,\n  registeredPersistedKeytips: { [uniqueID: string]: IKeytipProps },\n) => {\n  for (const uniqueID of Object.keys(registeredPersistedKeytips)) {\n    keytipManager.unregister(registeredPersistedKeytips[uniqueID], uniqueID, true);\n    delete registeredPersistedKeytips[uniqueID];\n  }\n};\n\nconst useKeytipRegistrations = (\n  registeredPersistedKeytips: { [uniqueID: string]: IKeytipProps },\n  keytipsToRegister: IKeytipProps[],\n  keytipManager: KeytipManager,\n) => {\n  const prevPersistedKeytips = usePrevious(registeredPersistedKeytips);\n\n  // Update\n  React.useEffect(() => {\n    if (prevPersistedKeytips) {\n      // Unregister old keytips\n      unregisterPersistedKeytips(keytipManager, prevPersistedKeytips);\n      // Register new keytips\n      registerPersistedKeytips(keytipsToRegister, keytipManager, registeredPersistedKeytips);\n    }\n  });\n\n  // Mount/Unmount\n  React.useEffect(() => {\n    // Register on mount\n    registerPersistedKeytips(keytipsToRegister, keytipManager, registeredPersistedKeytips);\n    return () => {\n      // Unregister on unmount\n      unregisterPersistedKeytips(keytipManager, registeredPersistedKeytips);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n};\n\nexport const OverflowButton = (props: IOverflowSetProps) => {\n  const keytipManager: KeytipManager = KeytipManager.getInstance();\n  const { className, overflowItems, keytipSequences, itemSubMenuProvider, onRenderOverflowButton } = props;\n\n  const persistedKeytips = useConst<{ [uniqueID: string]: IKeytipProps }>({});\n\n  // Gets the subMenu for an overflow item\n  const getSubMenuForItem = React.useCallback(\n    (item: IOverflowSetItemProps) => {\n      // Checks if itemSubMenuProvider has been defined, if not defaults to subMenuProps\n      if (itemSubMenuProvider) {\n        return itemSubMenuProvider(item);\n      }\n      if (item.subMenuProps) {\n        return item.subMenuProps.items;\n      }\n      return undefined;\n    },\n    [itemSubMenuProvider],\n  );\n\n  const { modifiedOverflowItems, keytipsToRegister } = React.useMemo(() => {\n    const newKeytipsToRegister: IKeytipProps[] = [];\n    let newOverflowItems: IOverflowSetItemProps[] | undefined = [];\n\n    if (keytipSequences) {\n      overflowItems?.forEach(overflowItem => {\n        const keytip = (overflowItem as IOverflowSetItemProps).keytipProps;\n\n        if (keytip) {\n          // Create persisted keytip\n          const persistedKeytip: IKeytipProps = {\n            content: keytip.content,\n            keySequences: keytip.keySequences,\n            disabled: keytip.disabled || !!(overflowItem.disabled || overflowItem.isDisabled),\n            hasDynamicChildren: keytip.hasDynamicChildren,\n            hasMenu: keytip.hasMenu,\n          };\n\n          if (keytip.hasDynamicChildren || getSubMenuForItem(overflowItem)) {\n            // If the keytip has a submenu or children nodes, change onExecute to persistedKeytipExecute\n            persistedKeytip.onExecute = keytipManager.menuExecute.bind(\n              keytipManager,\n              keytipSequences,\n              overflowItem?.keytipProps?.keySequences,\n            );\n            persistedKeytip.hasOverflowSubMenu = true;\n          } else {\n            // If the keytip doesn't have a submenu, just execute the original function\n            persistedKeytip.onExecute = keytip.onExecute;\n          }\n\n          newKeytipsToRegister.push(persistedKeytip);\n\n          // Add the overflow sequence to this item\n          const newOverflowItem = {\n            ...overflowItem,\n            keytipProps: {\n              ...keytip,\n              overflowSetSequence: keytipSequences,\n            },\n          };\n          newOverflowItems?.push(newOverflowItem);\n        } else {\n          // Nothing to change, add overflowItem to list\n          newOverflowItems?.push(overflowItem);\n        }\n      });\n    } else {\n      newOverflowItems = overflowItems;\n    }\n    return { modifiedOverflowItems: newOverflowItems, keytipsToRegister: newKeytipsToRegister };\n  }, [overflowItems, getSubMenuForItem, keytipManager, keytipSequences]);\n\n  useKeytipRegistrations(persistedKeytips, keytipsToRegister, keytipManager);\n\n  return <div className={className}>{onRenderOverflowButton(modifiedOverflowItems)}</div>;\n};\n"]}
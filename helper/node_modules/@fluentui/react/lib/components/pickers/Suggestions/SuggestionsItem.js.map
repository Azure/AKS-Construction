{"version":3,"file":"SuggestionsItem.js","sourceRoot":"../src/","sources":["components/pickers/Suggestions/SuggestionsItem.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAE,kBAAkB,EAAE,GAAG,EAAE,sBAAsB,EAAE,MAAM,oBAAoB,CAAC;AACrF,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC5D,OAAO,KAAK,YAAY,MAAM,oBAAoB,CAAC;AAInD,IAAM,YAAY,GAAQ,YAAY,CAAC;AAEvC,IAAM,aAAa,GAAG,kBAAkB,EAAsD,CAAC;AAE/F;;GAEG;AACH;IAAwC,mCAA4C;IAClF,yBAAY,KAA8B;QAA1C,YACE,kBAAM,KAAK,CAAC,SAGb;QADC,sBAAsB,CAAC,KAAI,CAAC,CAAC;;IAC/B,CAAC;IAEM,gCAAM,GAAb;;QACQ,IAAA,KAYF,IAAI,CAAC,KAAK,EAXZ,eAAe,qBAAA,EACf,gBAAgB,sBAAA,EAChB,OAAO,aAAA,EACP,SAAS,eAAA,EACT,EAAE,QAAA,EACF,YAAY,kBAAA,EACZ,kBAAkB,wBAAA,EAClB,qBAAqB,2BAAA,EACrB,MAAM,YAAA,EACN,KAAK,WAAA,EACL,qBAAqB,2BACT,CAAC;QAEf,OAAO;QACP,gFAAgF;QAChF,oFAAoF;QACpF,+EAA+E;QAC/E,oFAAoF;QACpF,mFAAmF;QACnF,wDAAwD;QACxD,+EAA+E;QAC/E,sFAAsF;QACtF,wFAAwF;QACxF,gDAAgD;QAChD,IAAM,UAAU,GAAwD,MAAM;YAC5E,CAAC,CAAC,aAAa,CAAC,MAAM,EAAE;gBACpB,KAAK,EAAE,KAAM;gBACb,SAAS,WAAA;gBACT,SAAS,EAAE,eAAe,CAAC,QAAQ,IAAI,kBAAkB;aAC1D,CAAC;YACJ,CAAC,CAAC;gBACE,IAAI,EAAE,GAAG,CACP,qBAAqB,EACrB,YAAY,CAAC,eAAe;oBAE1B,GAAC,eAAe,GAAG,YAAY,CAAC,0BAA0B,IACxD,eAAe,CAAC,QAAQ,IAAI,kBAAkB;yBAElD,SAAS,CACV;gBACD,UAAU,EAAE,GAAG,CAAC,2BAA2B,EAAE,YAAY,CAAC,UAAU,CAAC;gBACrE,WAAW,EAAE,GAAG,CAAC,4BAA4B,EAAE,YAAY,CAAC,WAAW,CAAC;aACzE,CAAC;QAEN,OAAO,CACL,6BAAK,SAAS,EAAE,UAAU,CAAC,IAAI,EAAE,IAAI,EAAC,cAAc;YAClD,oBAAC,aAAa,IACZ,OAAO,EAAE,OAAO,EAChB,SAAS,EAAE,UAAU,CAAC,UAAU,EAChC,EAAE,EAAE,EAAE,mBACS,eAAe,CAAC,QAAQ,EACvC,IAAI,EAAC,QAAQ,gBACD,eAAe,CAAC,SAAS,IAEpC,gBAAgB,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CACrC;YACf,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAC7B,oBAAC,UAAU,IACT,SAAS,EAAE,qBAAqB,aAArB,qBAAqB,cAArB,qBAAqB,GAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAC1D,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EACtC,KAAK,EAAE,qBAAqB,EAC5B,SAAS,EAAE,qBAAqB,EAChC,OAAO,EAAE,YAAY,EACrB,SAAS,EAAE,UAAU,CAAC,WAAW,GACjC,CACH,CAAC,CAAC,CAAC,IAAI,CACJ,CACP,CAAC;IACJ,CAAC;IACH,sBAAC;AAAD,CAAC,AA9ED,CAAwC,KAAK,CAAC,SAAS,GA8EtD","sourcesContent":["import * as React from 'react';\n\nimport { classNamesFunction, css, initializeComponentRef } from '../../../Utilities';\nimport { CommandButton, IconButton } from '../../../Button';\nimport * as stylesImport from './Suggestions.scss';\nimport type { IProcessedStyleSet } from '../../../Styling';\nimport type { ISuggestionItemProps, ISuggestionsItemStyleProps, ISuggestionsItemStyles } from './SuggestionsItem.types';\n\nconst legacyStyles: any = stylesImport;\n\nconst getClassNames = classNamesFunction<ISuggestionsItemStyleProps, ISuggestionsItemStyles>();\n\n/**\n * {@docCategory Pickers}\n */\nexport class SuggestionsItem<T> extends React.Component<ISuggestionItemProps<T>, {}> {\n  constructor(props: ISuggestionItemProps<T>) {\n    super(props);\n\n    initializeComponentRef(this);\n  }\n\n  public render(): JSX.Element {\n    const {\n      suggestionModel,\n      RenderSuggestion,\n      onClick,\n      className,\n      id,\n      onRemoveItem,\n      isSelectedOverride,\n      removeButtonAriaLabel,\n      styles,\n      theme,\n      removeButtonIconProps,\n    } = this.props;\n\n    // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from SuggestionsItem class because it\n    // might be used by consumers separately from pickers extending from BasePicker\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\n    // we can not use the 'styled' function without adding some helpers which can break\n    // downstream consumers who did not use the new helpers.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // in Suggestions when the typed SuggestionsItem class is ready to be rendered. If the\n    // check passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n    const classNames: Partial<IProcessedStyleSet<ISuggestionsItemStyles>> = styles\n      ? getClassNames(styles, {\n          theme: theme!,\n          className,\n          suggested: suggestionModel.selected || isSelectedOverride,\n        })\n      : {\n          root: css(\n            'ms-Suggestions-item',\n            legacyStyles.suggestionsItem,\n            {\n              ['is-suggested ' + legacyStyles.suggestionsItemIsSuggested]:\n                suggestionModel.selected || isSelectedOverride,\n            },\n            className,\n          ),\n          itemButton: css('ms-Suggestions-itemButton', legacyStyles.itemButton),\n          closeButton: css('ms-Suggestions-closeButton', legacyStyles.closeButton),\n        };\n\n    return (\n      <div className={classNames.root} role=\"presentation\">\n        <CommandButton\n          onClick={onClick}\n          className={classNames.itemButton}\n          id={id}\n          aria-selected={suggestionModel.selected}\n          role=\"option\"\n          aria-label={suggestionModel.ariaLabel}\n        >\n          {RenderSuggestion(suggestionModel.item, this.props)}\n        </CommandButton>\n        {this.props.showRemoveButton ? (\n          <IconButton\n            iconProps={removeButtonIconProps ?? { iconName: 'Cancel' }}\n            styles={{ icon: { fontSize: '12px' } }}\n            title={removeButtonAriaLabel}\n            ariaLabel={removeButtonAriaLabel}\n            onClick={onRemoveItem}\n            className={classNames.closeButton}\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n"]}
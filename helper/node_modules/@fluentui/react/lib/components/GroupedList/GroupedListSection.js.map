{"version":3,"file":"GroupedListSection.js","sourceRoot":"../src/","sources":["components/GroupedList/GroupedListSection.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { initializeComponentRef, css, getId, EventGroup } from '../../Utilities';\n\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\n\nimport { GroupHeader } from './GroupHeader';\nimport { GroupShowAll } from './GroupShowAll';\nimport { GroupFooter } from './GroupFooter';\n\nimport { List } from '../../List';\nimport type { IGroup, IGroupDividerProps, IGroupRenderProps, IGroupedListStyles } from './GroupedList.types';\nimport type { IGroupHeaderProps } from './GroupHeader.types';\nimport type { IGroupFooterProps } from './GroupFooter.types';\nimport type { IGroupShowAllProps } from './GroupShowAll.types';\nimport type { IDragDropContext, IDragDropEvents, IDragDropHelper, IDragDropOptions } from '../../DragDrop';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IRenderFunction, IDisposable } from '../../Utilities';\nimport type { ISelection } from '../../Selection';\nimport type { IListProps } from '../../List';\nimport type { IViewport } from '../../utilities/decorators/withViewport';\n\nexport interface IGroupedListSectionProps extends React.ClassAttributes<GroupedListSection> {\n  /** GroupedList resolved class names */\n  groupedListClassNames?: IProcessedStyleSet<IGroupedListStyles>;\n\n  /**\n   * Gets the component ref.\n   */\n  componentRef?: () => void;\n\n  /** Whether to render in compact mode */\n  compact?: boolean;\n\n  /** Map of callback functions related to drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** helper to manage drag/drop across item rows and groups */\n  dragDropHelper?: IDragDropHelper;\n\n  /** Event names and corresponding callbacks that will be registered to the group and the rendered elements */\n  eventsToRegister?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Information to pass in to the group footer. */\n  footerProps?: IGroupFooterProps;\n\n  /** Grouping item limit. */\n  getGroupItemLimit?: (group: IGroup) => number;\n\n  /** Optional grouping instructions. */\n  groupIndex?: number;\n\n  /** Optional group nesting level. */\n  groupNestingDepth?: number;\n\n  /** Optional grouping instructions. */\n  group?: IGroup;\n\n  /** Optional override properties to render groups. */\n  groupProps?: IGroupRenderProps;\n\n  /** Information to pass in to the group header. */\n  headerProps?: IGroupHeaderProps;\n\n  /** List of items to render. */\n  items: any[];\n\n  /** Optional list props to pass to list renderer.  */\n  listProps?: IListProps;\n\n  /** Rendering callback to render the group items. */\n  onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;\n\n  /** Optional selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the details list manages selection. */\n  selectionMode?: SelectionMode;\n\n  /** Information to pass in to the group Show All footer. */\n  showAllProps?: IGroupShowAllProps;\n\n  /** Optional Viewport, provided by the parent component. */\n  viewport?: IViewport;\n\n  /** Override for rendering the group header. */\n  onRenderGroupHeader?: IRenderFunction<IGroupHeaderProps>;\n\n  /** Override for rendering the group Show All link. */\n  onRenderGroupShowAll?: IRenderFunction<IGroupShowAllProps>;\n\n  /** Override for rendering the group footer. */\n  onRenderGroupFooter?: IRenderFunction<IGroupFooterProps>;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /** Stores parent group's children. */\n  groups?: IGroup[];\n}\n\nexport interface IGroupedListSectionState {\n  isDropping?: boolean;\n  isSelected?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nexport class GroupedListSection extends React.Component<IGroupedListSectionProps, IGroupedListSectionState> {\n  private _root = React.createRef<HTMLDivElement>();\n  private _list = React.createRef<List>();\n  private _subGroupRefs: Record<string, GroupedListSection | null> = {};\n  private _id: string;\n  private _events: EventGroup;\n\n  private _dragDropSubscription?: IDisposable;\n  private _droppingClassName: string = '';\n\n  constructor(props: IGroupedListSectionProps) {\n    super(props);\n\n    const { selection, group } = props;\n\n    initializeComponentRef(this);\n\n    this._id = getId('GroupedListSection');\n\n    this.state = {\n      isDropping: false,\n      isSelected: selection && group ? selection.isRangeSelected(group.startIndex, group.count) : false,\n    };\n\n    this._events = new EventGroup(this);\n  }\n\n  public componentDidMount(): void {\n    const { dragDropHelper, selection } = this.props;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(\n        this._root.current,\n        this._events,\n        this._getGroupDragDropOptions(),\n      );\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChange);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._events.dispose();\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n    }\n  }\n\n  public componentDidUpdate(previousProps: IGroupedListSectionProps) {\n    if (\n      this.props.group !== previousProps.group ||\n      this.props.groupIndex !== previousProps.groupIndex ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(\n          this._root.current,\n          this._events,\n          this._getGroupDragDropOptions(),\n        );\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      getGroupItemLimit,\n      group,\n      groupIndex,\n      headerProps,\n      showAllProps,\n      footerProps,\n      viewport,\n      selectionMode,\n      onRenderGroupHeader = this._onRenderGroupHeader,\n      onRenderGroupShowAll = this._onRenderGroupShowAll,\n      onRenderGroupFooter = this._onRenderGroupFooter,\n      onShouldVirtualize,\n      groupedListClassNames,\n      groups,\n      compact,\n      listProps = {},\n    } = this.props;\n    const { isSelected } = this.state;\n    const renderCount = group && getGroupItemLimit ? getGroupItemLimit(group) : Infinity;\n    const isShowAllVisible =\n      group &&\n      !group.children &&\n      !group.isCollapsed &&\n      !group.isShowingAll &&\n      (group.count > renderCount || group.hasMoreData);\n    const hasNestedGroups = group && group.children && group.children.length > 0;\n\n    const { version } = listProps;\n\n    const dividerProps: IGroupDividerProps = {\n      group,\n      groupIndex,\n      groupLevel: group ? group.level : 0,\n      isSelected,\n      selected: isSelected,\n      viewport,\n      selectionMode,\n      groups,\n      compact,\n    };\n\n    const ariaControlsProps: IGroupHeaderProps = {\n      groupedListId: this._id,\n      ariaLevel: group?.level ? group.level + 1 : 1,\n      ariaSetSize: groups ? groups.length : undefined,\n      ariaPosInSet: groupIndex !== undefined ? groupIndex + 1 : undefined,\n    };\n\n    const groupHeaderProps: IGroupHeaderProps = { ...headerProps, ...dividerProps, ...ariaControlsProps };\n    const groupShowAllProps: IGroupShowAllProps = { ...showAllProps, ...dividerProps };\n    const groupFooterProps: IGroupFooterProps = { ...footerProps, ...dividerProps };\n\n    const isDraggable: boolean =\n      !!this.props.dragDropHelper &&\n      this._getGroupDragDropOptions().canDrag!(group) &&\n      !!this.props.dragDropEvents!.canDragGroups;\n\n    return (\n      <div\n        ref={this._root}\n        {...(isDraggable && { draggable: true })}\n        className={css(groupedListClassNames && groupedListClassNames.group, this._getDroppingClassName())}\n        role=\"presentation\"\n      >\n        {onRenderGroupHeader(groupHeaderProps, this._onRenderGroupHeader)}\n        {group && group.isCollapsed ? null : hasNestedGroups ? (\n          <List\n            role=\"presentation\"\n            ref={this._list}\n            items={group ? group.children : []}\n            onRenderCell={this._renderSubGroup}\n            getItemCountForPage={this._returnOne}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n            id={this._id}\n          />\n        ) : (\n          this._onRenderGroup(renderCount)\n        )}\n        {group && group.isCollapsed\n          ? null\n          : isShowAllVisible && onRenderGroupShowAll(groupShowAllProps, this._onRenderGroupShowAll)}\n        {onRenderGroupFooter(groupFooterProps, this._onRenderGroupFooter)}\n      </div>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this.forceListUpdate();\n  }\n\n  public forceListUpdate() {\n    const { group } = this.props;\n\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n\n      if (group && group.children && group.children.length > 0) {\n        const subGroupCount = group.children.length;\n\n        for (let i = 0; i < subGroupCount; i++) {\n          const subGroup = this._list.current.pageRefs['subGroup_' + String(i)] as GroupedListSection;\n\n          if (subGroup) {\n            subGroup.forceListUpdate();\n          }\n        }\n      }\n    } else {\n      const subGroup = this._subGroupRefs['subGroup_' + String(0)];\n\n      if (subGroup) {\n        subGroup.forceListUpdate();\n      }\n    }\n  }\n\n  private _onRenderGroupHeader = (props: IGroupHeaderProps): JSX.Element => {\n    return <GroupHeader {...props} />;\n  };\n\n  private _onRenderGroupShowAll = (props: IGroupShowAllProps): JSX.Element => {\n    return <GroupShowAll {...props} />;\n  };\n\n  private _onRenderGroupFooter = (props: IGroupFooterProps): JSX.Element => {\n    return <GroupFooter {...props} />;\n  };\n\n  private _onSelectionChange(): void {\n    const { group, selection } = this.props;\n    if (selection && group) {\n      const isSelected = selection.isRangeSelected(group.startIndex, group.count);\n\n      if (isSelected !== this.state.isSelected) {\n        this.setState({ isSelected });\n      }\n    }\n  }\n\n  private _onRenderGroupCell(\n    onRenderCell: any,\n    groupNestingDepth: number | undefined,\n    group: IGroup | undefined,\n  ): (item: any, itemIndex: number | undefined) => React.ReactNode {\n    return (item: any, itemIndex: number | undefined): React.ReactNode => {\n      return onRenderCell(groupNestingDepth, item, itemIndex, group);\n    };\n  }\n\n  private _onRenderGroup(renderCount: number): JSX.Element {\n    const { group, items, onRenderCell, listProps, groupNestingDepth, onShouldVirtualize, groupProps } = this.props;\n    const count = group && !group.isShowingAll ? group.count : items.length;\n    const startIndex = group ? group.startIndex : 0;\n\n    return (\n      <List\n        role={groupProps && groupProps.role ? groupProps.role : 'rowgroup'}\n        aria-label={group?.name}\n        items={items}\n        onRenderCell={this._onRenderGroupCell(onRenderCell, groupNestingDepth, group)}\n        ref={this._list}\n        renderCount={Math.min(count, renderCount)}\n        startIndex={startIndex}\n        onShouldVirtualize={onShouldVirtualize}\n        id={this._id}\n        {...listProps}\n      />\n    );\n  }\n\n  private _renderSubGroup = (subGroup: IGroup, subGroupIndex: number): JSX.Element | null => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      getGroupItemLimit,\n      groupNestingDepth,\n      groupProps,\n      items,\n      headerProps,\n      showAllProps,\n      footerProps,\n      listProps,\n      onRenderCell,\n      selection,\n      selectionMode,\n      viewport,\n      onRenderGroupHeader,\n      onRenderGroupShowAll,\n      onRenderGroupFooter,\n      onShouldVirtualize,\n      group,\n      compact,\n    } = this.props;\n\n    const nestingDepth = subGroup.level ? subGroup.level + 1 : groupNestingDepth;\n\n    return !subGroup || subGroup.count > 0 || (groupProps && groupProps.showEmptyGroups) ? (\n      <GroupedListSection\n        ref={ref => (this._subGroupRefs['subGroup_' + subGroupIndex] = ref)}\n        key={this._getGroupKey(subGroup, subGroupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={getGroupItemLimit}\n        group={subGroup}\n        groupIndex={subGroupIndex}\n        groupNestingDepth={nestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        items={items}\n        listProps={listProps}\n        onRenderCell={onRenderCell}\n        selection={selection}\n        selectionMode={selectionMode}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onRenderGroupHeader={onRenderGroupHeader}\n        onRenderGroupShowAll={onRenderGroupShowAll}\n        onRenderGroupFooter={onRenderGroupFooter}\n        onShouldVirtualize={onShouldVirtualize}\n        groups={group ? group.children : []}\n        compact={compact}\n      />\n    ) : null;\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getGroupKey(group: IGroup, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(group.level) + String(index));\n  }\n\n  /**\n   * collect all the data we need to enable drag/drop for a group\n   */\n  private _getGroupDragDropOptions = (): IDragDropOptions => {\n    const { group, groupIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: -1,\n      context: { data: group, index: groupIndex, isGroup: true },\n      updateDropState: this._updateDroppingState,\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDrop: dragDropEvents!.onDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      onDragEnter: dragDropEvents!.onDragEnter,\n      onDragLeave: dragDropEvents!.onDragLeave,\n      onDragEnd: dragDropEvents!.onDragEnd,\n      onDragOver: dragDropEvents!.onDragOver,\n    };\n    return options as IDragDropOptions;\n  };\n\n  /**\n   * update groupIsDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * @param newValue - new isDropping state value\n   * @param event - the event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newIsDropping: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents, group } = this.props;\n\n    if (isDropping !== newIsDropping) {\n      if (isDropping) {\n        if (dragDropEvents && dragDropEvents.onDragLeave) {\n          dragDropEvents.onDragLeave(group, event);\n        }\n      } else {\n        if (dragDropEvents && dragDropEvents.onDragEnter) {\n          this._droppingClassName = dragDropEvents.onDragEnter(group, event);\n        }\n      }\n\n      this.setState({ isDropping: newIsDropping });\n    }\n  };\n\n  /**\n   * get the correct css class to reflect the dropping state for a given group\n   *\n   * If the group is the current drop target, return the default dropping class name\n   * Otherwise, return '';\n   *\n   */\n  private _getDroppingClassName(): string {\n    let { isDropping } = this.state;\n    const { group, groupedListClassNames } = this.props;\n\n    isDropping = !!(group && isDropping);\n\n    return css(\n      isDropping && this._droppingClassName,\n      isDropping && DEFAULT_DROPPING_CSS_CLASS,\n      isDropping && groupedListClassNames && groupedListClassNames.groupIsDropping,\n    );\n  }\n}\n"]}
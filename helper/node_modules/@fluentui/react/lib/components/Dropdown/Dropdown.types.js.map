{"version":3,"file":"Dropdown.types.js","sourceRoot":"../src/","sources":["components/Dropdown/Dropdown.types.ts"],"names":[],"mappings":"AAUA,OAAO,EAAE,4BAA4B,IAAI,oBAAoB,EAAE,MAAM,wBAAwB,CAAC","sourcesContent":["import * as React from 'react';\nimport { ResponsiveMode } from '../../ResponsiveMode';\nimport { RectangleEdge } from '../../Positioning';\nimport type { IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { ISelectableOption, ISelectableDroppableTextProps } from '../../SelectableOption';\nimport type { ICheckboxStyleProps, ICheckboxStyles } from '../../Checkbox';\nimport type { ILabelStyleProps, ILabelStyles } from '../../Label';\nimport type { IPanelStyleProps, IPanelStyles } from '../../Panel';\n\nexport { SelectableOptionMenuItemType as DropdownMenuItemType } from '../../SelectableOption';\n\n/**\n * {@docCategory Dropdown}\n */\nexport interface IDropdown {\n  /**\n   * All selected options\n   */\n  readonly selectedOptions: IDropdownOption[];\n\n  /**\n   * An imperative handle to dismiss the popup if it is open\n   */\n  dismissMenu: () => void;\n\n  focus: (shouldOpenOnFocus?: boolean) => void;\n}\n\n/**\n * {@docCategory Dropdown}\n */\nexport interface IDropdownProps\n  extends ISelectableDroppableTextProps<IDropdown, HTMLDivElement>,\n    React.RefAttributes<HTMLDivElement> {\n  /**\n   * Input placeholder text. Displayed until option is selected.\n   * @deprecated Use `placeholder`\n   */\n  placeHolder?: string;\n\n  /**\n   * Options for the dropdown. If using `defaultSelectedKey` or `defaultSelectedKeys`, options must be\n   * pure for correct behavior.\n   */\n  options: IDropdownOption[];\n\n  /**\n   * Callback issued when the selected option changes.\n   */\n  onChange?: (event: React.FormEvent<HTMLDivElement>, option?: IDropdownOption, index?: number) => void;\n\n  /**\n   * @deprecated Use `onChange` instead.\n   */\n  onChanged?: (option: IDropdownOption, index?: number) => void;\n\n  /**\n   * Custom render function for the label.\n   */\n  onRenderLabel?: IRenderFunction<IDropdownProps>;\n\n  /**\n   * Optional custom renderer for placeholder text\n   */\n  onRenderPlaceholder?: IRenderFunction<IDropdownProps>;\n\n  /**\n   * Optional custom renderer for placeholder text\n   * @deprecated Use `onRenderPlaceholder`\n   */\n  onRenderPlaceHolder?: IRenderFunction<IDropdownProps>;\n\n  /**\n   * Optional custom renderer for selected option displayed in input\n   */\n  onRenderTitle?: IRenderFunction<IDropdownOption[]>;\n\n  /**\n   * Optional custom renderer for chevron icon\n   */\n  onRenderCaretDown?: IRenderFunction<IDropdownProps>;\n\n  /**\n   * Custom width for dropdown. If value is 0, width of the input field is used.\n   * If value is 'auto', width of the input field is used by default, and it can grow wider to fit the content.\n   * @defaultvalue 0\n   */\n  dropdownWidth?: number | 'auto';\n\n  /**\n   * Pass in ResponsiveMode to manually overwrite the way the Dropdown renders.\n   * ResponsiveMode.large would, for instance, disable the behavior where Dropdown options\n   * get rendered into a Panel while ResponsiveMode.small would result in the Dropdown\n   * options always getting rendered in a Panel.\n   */\n  responsiveMode?: ResponsiveMode;\n\n  /**\n   * Keys that will be initially used to set selected items. This prop is used for `multiSelect`\n   * scenarios. In other cases, `defaultSelectedKey` should be used.\n   */\n  defaultSelectedKeys?: string[] | number[];\n\n  /**\n   * Keys of the selected items. If you provide this, you must maintain selection\n   * state by observing onChange events and passing a new value in when changed.\n   * Passing null in will clear the selection.\n   * Mutually exclusive with `defaultSelectedKeys`.\n   */\n  selectedKeys?: string[] | number[] | null;\n\n  /**\n   * When multiple items are selected, this still will be used to separate values in\n   * the dropdown title.\n   *\n   * @defaultvalue \", \"\n   */\n  multiSelectDelimiter?: string;\n\n  /**\n   * Optional preference to have onChanged still be called when an already selected item is\n   * clicked in single select mode.  Default to false\n   */\n  notifyOnReselect?: boolean;\n\n  /**\n   * @deprecated Use `disabled` instead. Deprecated at v0.52.0.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Theme provided by higher order component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IDropdownStyleProps, IDropdownStyles>;\n}\n\n/**\n * {@docCategory Dropdown}\n */\nexport interface IDropdownOption<T = any> extends ISelectableOption<T> {\n  /**\n   * @deprecated Use `selected` instead. Deprecated at v.65.1.\n   */\n  isSelected?: boolean;\n}\n\n/**\n * The props needed to construct styles.\n * This represents the simplified set of immutable things which control the class names.\n * {@docCategory Dropdown}\n */\nexport type IDropdownStyleProps = Pick<IDropdownProps, 'theme' | 'className' | 'disabled' | 'required'> & {\n  /**\n   * Whether the dropdown is in an error state.\n   */\n  hasError: boolean;\n\n  /**\n   * Specifies if the dropdown has label content.\n   */\n  hasLabel: boolean;\n\n  /**\n   * Whether the dropdown is in an opened state.\n   */\n  isOpen: boolean;\n\n  /**\n   * Whether the dropdown is presently rendering a placeholder.\n   */\n  isRenderingPlaceholder: boolean;\n\n  /**\n   * Optional custom className for the panel that displays in small viewports, hosting the Dropdown options.\n   * This is primarily provided for backwards compatibility.\n   */\n  panelClassName?: string;\n\n  /**\n   * Optional custom className for the callout that displays in larger viewports, hosting the Dropdown options.\n   * This is primarily provided for backwards compatibility.\n   */\n  calloutClassName?: string;\n\n  /**\n   * Prop to notify on what edge the dropdown callout was positioned respective to the title.\n   */\n  calloutRenderEdge?: RectangleEdge;\n};\n\n/**\n * Represents the stylable areas of the control.\n * {@docCategory Dropdown}\n */\nexport interface IDropdownStyles {\n  /** Root element of the Dropdown (includes Label and the actual Dropdown). */\n  root: IStyle;\n\n  /** Refers to the label associated with the dropdown. This is enclosed by the root. */\n  label: IStyle;\n\n  /** Refers to the actual Dropdown element. */\n  dropdown: IStyle;\n\n  /** Refers to the primary title of the Dropdown (rendering the selected options/placeholder/etc.). */\n  title: IStyle;\n\n  /** Refers to the wrapping container around the downward pointing caret users click on to expand the Dropdown. */\n  caretDownWrapper: IStyle;\n\n  /** Refers to the downward pointing caret icon users click on to expand the Dropdown. */\n  caretDown: IStyle;\n\n  /** Refers to the error message being rendered under the Dropdown (if any). */\n  errorMessage: IStyle;\n\n  /** Refers to the element that wraps `dropdownItems`. */\n  dropdownItemsWrapper: IStyle;\n\n  /** Refers to the FocusZone wrapping the individual dropdown items. */\n  dropdownItems: IStyle;\n\n  /** Refers to the individual dropdown item. */\n  dropdownItem: IStyle;\n\n  /** Style for a dropdown item when it is being selected. */\n  dropdownItemSelected: IStyle;\n\n  /** Style for a dropdown item when it is disabled. */\n  dropdownItemDisabled: IStyle;\n\n  /** Style for a dropdown item when it is both selected and disabled. */\n  dropdownItemSelectedAndDisabled: IStyle;\n\n  /** Style for a dropdown item when it is hidden */\n  dropdownItemHidden: IStyle;\n\n  /**\n   * Refers to the text element that renders the actual dropdown item/option text. This would be wrapped by the element\n   * referred to by `dropdownItem`.\n   */\n  dropdownOptionText: IStyle;\n\n  /** Refers to the dropdown separator. */\n  dropdownDivider: IStyle;\n\n  /** Style for dropdown separator when hidden. */\n  dropdownDividerHidden: IStyle;\n\n  /** Refers to the individual dropdown items that are being rendered as a header. */\n  dropdownItemHeader: IStyle;\n\n  /** Style for dropdown header when hidden. */\n  dropdownItemHeaderHidden: IStyle;\n\n  /**\n   * Refers to the panel that hosts the Dropdown options in small viewports.\n   * @deprecated Use `subComponentStyles.panel` instead.\n   */\n  panel: IStyle;\n\n  /** Refers to the callout that hosts Dropdown options in larger viewports. */\n  callout: IStyle;\n\n  /** Subcomponent styles. */\n  subComponentStyles: IDropdownSubComponentStyles;\n}\n\n/**\n * {@docCategory Dropdown}\n */\nexport interface IDropdownSubComponentStyles {\n  /** Refers to the panel that hosts the Dropdown options in small viewports. */\n  panel: IStyleFunctionOrObject<IPanelStyleProps, IPanelStyles>;\n\n  /** Refers to the primary label for the Dropdown. */\n  label: IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>;\n\n  /** Refers to the individual dropdown item when the multiSelect prop is true. */\n  multiSelectItem: IStyleFunctionOrObject<ICheckboxStyleProps, ICheckboxStyles>;\n}\n"]}
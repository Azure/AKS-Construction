{"version":3,"file":"Facepile.types.js","sourceRoot":"../src/","sources":["components/Facepile/Facepile.types.ts"],"names":[],"mappings":"AAmKA;;GAEG;AACH,MAAM,CAAN,IAAY,kBASX;AATD,WAAY,kBAAkB;IAC5B,kBAAkB;IAClB,2DAAQ,CAAA;IACR,uBAAuB;IACvB,yEAAe,CAAA;IACf,yBAAyB;IACzB,2DAAQ,CAAA;IACR,4BAA4B;IAC5B,qEAAa,CAAA;AACf,CAAC,EATW,kBAAkB,KAAlB,kBAAkB,QAS7B","sourcesContent":["import * as React from 'react';\nimport { FacepileBase } from './Facepile.base';\nimport { PersonaInitialsColor, PersonaSize } from '../../Persona';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { IRefObject, IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IButtonProps } from '../../Button';\nimport type { IPersonaSharedProps } from '../../Persona';\nimport type { IKeytipProps } from '../../Keytip';\n\n/**\n * {@docCategory Facepile}\n */\nexport interface IFacepile {}\n\n/**\n * {@docCategory Facepile}\n */\nexport interface IFacepileProps extends React.ClassAttributes<FacepileBase> {\n  /**\n   * Optional callback to access the IFacepile interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IFacepile>;\n\n  /**\n   * Whether the default tooltip (the persona name) is shown using the `title` prop.\n   * Set this to false if you'd like to display a custom tooltip, for example using a custom renderer and TooltipHost\n   * @defaultvalue true\n   */\n  showTooltip?: boolean;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IFacepileStyleProps, IFacepileStyles>;\n\n  /**\n   * Theme provided by High-Order Component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Additional css class to apply to the Facepile\n   * @defaultvalue undefined\n   */\n  className?: string;\n\n  /**\n   * Array of IPersonaProps that define each Persona.\n   */\n  personas: IFacepilePersona[];\n\n  /**\n   * Personas to place in the overflow\n   */\n  overflowPersonas?: IFacepilePersona[];\n\n  /** Maximum number of personas to show */\n  maxDisplayablePersonas?: number;\n\n  /** Size to display the personas */\n  personaSize?: PersonaSize;\n\n  /** ARIA label for persona list */\n  ariaDescription?: string;\n\n  /**\n   * Defines the aria label that the screen readers use when focus goes on a list of personas.\n   */\n  ariaLabel?: string;\n\n  /** Show add person button */\n  showAddButton?: boolean;\n\n  /** Button properties for the add face button */\n  addButtonProps?: IButtonProps;\n\n  /**\n   * Deprecated at v0.70, use `overflowButtonProps` instead.\n   * @deprecated Use `overflowButtonProps` instead.\n   */\n  chevronButtonProps?: IButtonProps;\n\n  /** Properties for the overflow icon */\n  overflowButtonProps?: IButtonProps;\n\n  /** Type of overflow icon to use */\n  overflowButtonType?: OverflowButtonType;\n\n  /** Optional custom renderer for the persona, gets called when there is one persona in personas array*/\n  onRenderPersona?: IRenderFunction<IFacepilePersona>;\n\n  /** Optional custom renderer for the persona coins, gets called when there are multiple persona in personas array*/\n  onRenderPersonaCoin?: IRenderFunction<IFacepilePersona>;\n\n  /** Optional custom renderer for the FacepileButton that renders each clickable Persona */\n  onRenderPersonaWrapper?: IRenderFunction<IFacepilePersona>;\n\n  /** Method to access properties on the underlying Persona control */\n  getPersonaProps?: (persona: IFacepilePersona) => IPersonaSharedProps;\n}\n\n/**\n * {@docCategory Facepile}\n */\nexport interface IFacepilePersona extends React.ButtonHTMLAttributes<HTMLButtonElement | HTMLDivElement> {\n  /**\n   * Name of the person.\n   */\n  personaName?: string;\n\n  /**\n   * Url to the image to use, should be a square aspect ratio and big enough to fit in the image area.\n   */\n  imageUrl?: string;\n\n  /**\n   * The user's initials to display in the image area when there is no image.\n   * @defaultvalue Derived from `personaName`\n   */\n  imageInitials?: string;\n\n  /**\n   * Whether initials are calculated for phone numbers and number sequences.\n   * Example: Set property to true to get initials for project names consisting of numbers only.\n   * @defaultvalue false\n   */\n  allowPhoneInitials?: boolean;\n\n  /**\n   * The background color when the user's initials are displayed.\n   * @defaultvalue Derived from `personaName`\n   */\n  initialsColor?: PersonaInitialsColor;\n\n  /**\n   * If provided, persona will be rendered with cursor:pointer and the handler will be\n   * called on click.\n   */\n  onClick?: (ev?: React.MouseEvent<HTMLElement>, persona?: IFacepilePersona) => void;\n\n  /**\n   * If provided, the handler will be called on mouse move.\n   */\n  onMouseMove?: (ev?: React.MouseEvent<HTMLElement>, persona?: IFacepilePersona) => void;\n\n  /**\n   * If provided, the handler will be called when mouse moves out of the component.\n   */\n  onMouseOut?: (ev?: React.MouseEvent<HTMLElement>, persona?: IFacepilePersona) => void;\n\n  /**\n   * Extra data - not used directly but can be handy for passing additional data to custom event\n   * handlers.\n   */\n  data?: any;\n\n  /**\n   * Optional keytip for this button that is only added when 'onClick' is defined for the persona\n   */\n  keytipProps?: IKeytipProps;\n}\n\n/**\n * {@docCategory Facepile}\n */\nexport enum OverflowButtonType {\n  /** No overflow */\n  none = 0,\n  /** +1 overflow icon */\n  descriptive = 1,\n  /** More overflow icon */\n  more = 2,\n  /** Chevron overflow icon */\n  downArrow = 3,\n}\n\n/**\n * {@docCategory Facepile}\n */\nexport interface IFacepileStyleProps {\n  /**\n   * Theme provided by High-Order Component.\n   */\n  theme: ITheme;\n\n  /**\n   * Accept custom classNames\n   */\n  className?: string;\n\n  /**\n   * Pixel value for spacing around button. Number value set in pixels\n   */\n  spacingAroundItemButton?: number;\n}\n\n/**\n * {@docCategory Facepile}\n */\nexport interface IFacepileStyles {\n  /**\n   * Style for the root element.\n   */\n  root: IStyle;\n  addButton: IStyle;\n  descriptiveOverflowButton: IStyle;\n  itemContainer: IStyle;\n  itemButton: IStyle;\n  members: IStyle;\n  member: IStyle;\n  overflowButton: IStyle;\n  overflowInitialsIcon: IStyle;\n  screenReaderOnly: IStyle;\n}\n"]}
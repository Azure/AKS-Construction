{"version":3,"file":"Stack.js","sourceRoot":"../src/","sources":["components/Stack/Stack.tsx"],"names":[],"mappings":"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","sourcesContent":["/** @jsxRuntime classic */\n/** @jsx withSlots */\nimport * as React from 'react';\nimport { withSlots, createComponent, getSlots } from '@fluentui/foundation-legacy';\nimport { css, getNativeProps, htmlElementProperties, warnDeprecations } from '../../Utilities';\nimport { styles, GlobalClassNames as StackGlobalClassNames } from './Stack.styles';\nimport { StackItem } from './StackItem/StackItem';\nimport type { IStackComponent, IStackProps, IStackSlots } from './Stack.types';\nimport type { IStackItemProps } from './StackItem/StackItem.types';\n\nconst StackView: IStackComponent['view'] = props => {\n  const { as: RootType = 'div', disableShrink = false, enableScopedSelectors = false, wrap, ...rest } = props;\n\n  warnDeprecations('Stack', props, {\n    gap: 'tokens.childrenGap',\n    maxHeight: 'tokens.maxHeight',\n    maxWidth: 'tokens.maxWidth',\n    padding: 'tokens.padding',\n  });\n\n  const stackChildren = _processStackChildren(props.children, { disableShrink, enableScopedSelectors });\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(rest, htmlElementProperties);\n\n  const Slots = getSlots<IStackProps, IStackSlots>(props, {\n    root: RootType,\n    inner: 'div',\n  });\n\n  if (wrap) {\n    return (\n      <Slots.root {...nativeProps}>\n        <Slots.inner>{stackChildren}</Slots.inner>\n      </Slots.root>\n    );\n  }\n\n  return <Slots.root {...nativeProps}>{stackChildren}</Slots.root>;\n};\n\nfunction _processStackChildren(\n  children: React.ReactNode,\n  { disableShrink, enableScopedSelectors }: { disableShrink: boolean; enableScopedSelectors: boolean },\n): (React.ReactChild | React.ReactFragment | React.ReactPortal)[] {\n  let childrenArray = React.Children.toArray(children);\n\n  childrenArray = React.Children.map(childrenArray, child => {\n    if (!child || !React.isValidElement(child)) {\n      return child;\n    }\n\n    if (child.type === React.Fragment) {\n      return child.props.children\n        ? _processStackChildren(child.props.children, { disableShrink, enableScopedSelectors })\n        : null;\n    }\n\n    const childAsReactElement = child as React.ReactElement;\n\n    let defaultItemProps: IStackItemProps = {};\n    if (_isStackItem(child)) {\n      defaultItemProps = { shrink: !disableShrink };\n    }\n\n    return React.cloneElement(childAsReactElement, {\n      ...defaultItemProps,\n      ...childAsReactElement.props,\n      className: enableScopedSelectors\n        ? css(StackGlobalClassNames.child, childAsReactElement.props.className)\n        : childAsReactElement.props.className,\n    });\n  });\n\n  return childrenArray;\n}\n\nfunction _isStackItem(item: React.ReactNode): item is typeof StackItem {\n  // In theory, we should be able to just check item.type === StackItem.\n  // However, under certain unclear circumstances (see https://github.com/microsoft/fluentui/issues/10785),\n  // the object identity is different despite the function implementation being the same.\n  return (\n    !!item &&\n    typeof item === 'object' &&\n    !!(item as React.ReactElement).type &&\n    // StackItem is generated by createComponent, so we need to check its displayName instead of name\n    ((item as React.ReactElement).type as React.ComponentType).displayName === StackItem.displayName\n  );\n}\n\nconst StackStatics = {\n  Item: StackItem,\n};\n\nexport const Stack: React.FunctionComponent<IStackProps> & {\n  Item: React.FunctionComponent<IStackItemProps>;\n} = createComponent(StackView, {\n  displayName: 'Stack',\n  styles,\n  statics: StackStatics,\n});\n\nexport default Stack;\n"]}
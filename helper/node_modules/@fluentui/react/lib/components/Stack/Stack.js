import { __assign, __rest } from "tslib";
/** @jsxRuntime classic */
/** @jsx withSlots */
import * as React from 'react';
import { withSlots, createComponent, getSlots } from '@fluentui/foundation-legacy';
import { css, getNativeProps, htmlElementProperties, warnDeprecations } from '../../Utilities';
import { styles, GlobalClassNames as StackGlobalClassNames } from './Stack.styles';
import { StackItem } from './StackItem/StackItem';
var StackView = function (props) {
    var _a = props.as, RootType = _a === void 0 ? 'div' : _a, _b = props.disableShrink, disableShrink = _b === void 0 ? false : _b, _c = props.enableScopedSelectors, enableScopedSelectors = _c === void 0 ? false : _c, wrap = props.wrap, rest = __rest(props, ["as", "disableShrink", "enableScopedSelectors", "wrap"]);
    warnDeprecations('Stack', props, {
        gap: 'tokens.childrenGap',
        maxHeight: 'tokens.maxHeight',
        maxWidth: 'tokens.maxWidth',
        padding: 'tokens.padding',
    });
    var stackChildren = _processStackChildren(props.children, { disableShrink: disableShrink, enableScopedSelectors: enableScopedSelectors });
    var nativeProps = getNativeProps(rest, htmlElementProperties);
    var Slots = getSlots(props, {
        root: RootType,
        inner: 'div',
    });
    if (wrap) {
        return (withSlots(Slots.root, __assign({}, nativeProps),
            withSlots(Slots.inner, null, stackChildren)));
    }
    return withSlots(Slots.root, __assign({}, nativeProps), stackChildren);
};
function _processStackChildren(children, _a) {
    var disableShrink = _a.disableShrink, enableScopedSelectors = _a.enableScopedSelectors;
    var childrenArray = React.Children.toArray(children);
    childrenArray = React.Children.map(childrenArray, function (child) {
        if (!child || !React.isValidElement(child)) {
            return child;
        }
        if (child.type === React.Fragment) {
            return child.props.children
                ? _processStackChildren(child.props.children, { disableShrink: disableShrink, enableScopedSelectors: enableScopedSelectors })
                : null;
        }
        var childAsReactElement = child;
        var defaultItemProps = {};
        if (_isStackItem(child)) {
            defaultItemProps = { shrink: !disableShrink };
        }
        return React.cloneElement(childAsReactElement, __assign(__assign(__assign({}, defaultItemProps), childAsReactElement.props), { className: enableScopedSelectors
                ? css(StackGlobalClassNames.child, childAsReactElement.props.className)
                : childAsReactElement.props.className }));
    });
    return childrenArray;
}
function _isStackItem(item) {
    // In theory, we should be able to just check item.type === StackItem.
    // However, under certain unclear circumstances (see https://github.com/microsoft/fluentui/issues/10785),
    // the object identity is different despite the function implementation being the same.
    return (!!item &&
        typeof item === 'object' &&
        !!item.type &&
        // StackItem is generated by createComponent, so we need to check its displayName instead of name
        item.type.displayName === StackItem.displayName);
}
var StackStatics = {
    Item: StackItem,
};
export var Stack = createComponent(StackView, {
    displayName: 'Stack',
    styles: styles,
    statics: StackStatics,
});
export default Stack;
//# sourceMappingURL=Stack.js.map
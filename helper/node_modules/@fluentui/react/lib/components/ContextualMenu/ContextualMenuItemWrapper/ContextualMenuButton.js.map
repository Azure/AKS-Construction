{"version":3,"file":"ContextualMenuButton.js","sourceRoot":"../src/","sources":["components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuButton.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { buttonProperties, getNativeProps, memoizeFunction, getId, mergeAriaAttributeValues } from '../../../Utilities';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport { KeytipData } from '../../../KeytipData';\nimport { getIsChecked, isItemDisabled, hasSubmenu, getMenuItemAriaRole } from '../../../utilities/contextualMenu/index';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\nimport type { IKeytipDataProps } from '../../../KeytipData';\nimport type { IKeytipProps } from '../../../Keytip';\n\nexport class ContextualMenuButton extends ContextualMenuItemWrapper {\n  private _btn = React.createRef<HTMLButtonElement>();\n  private _ariaDescriptionId: string;\n\n  private _getMemoizedMenuButtonKeytipProps = memoizeFunction((keytipProps: IKeytipProps) => {\n    return {\n      ...keytipProps,\n      hasMenu: true,\n    };\n  });\n\n  public render() {\n    const {\n      item,\n      classNames,\n      index,\n      focusableElementIndex,\n      totalItemCount,\n      hasCheckmarks,\n      hasIcons,\n      contextualMenuItemAs: ChildrenRenderer = ContextualMenuItem,\n      expandedMenuItemKey,\n      onItemMouseDown,\n      onItemClick,\n      openSubMenu,\n      dismissSubMenu,\n      dismissMenu,\n    } = this.props;\n\n    const isChecked: boolean | null | undefined = getIsChecked(item);\n    const canCheck: boolean = isChecked !== null;\n    const defaultRole = getMenuItemAriaRole(item);\n    const itemHasSubmenu = hasSubmenu(item);\n    const { itemProps, ariaLabel, ariaDescription } = item;\n\n    const buttonNativeProperties = getNativeProps<React.ButtonHTMLAttributes<HTMLButtonElement>>(\n      item,\n      buttonProperties,\n    );\n    // Do not add the disabled attribute to the button so that it is focusable\n    delete buttonNativeProperties.disabled;\n\n    const itemRole = item.role || defaultRole;\n\n    // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n    const ariaDescribedByIds = mergeAriaAttributeValues(\n      item.ariaDescribedBy,\n      ariaDescription ? this._ariaDescriptionId : undefined,\n      buttonNativeProperties['aria-describedby'],\n    );\n\n    const itemButtonProperties = {\n      className: classNames.root,\n      onClick: this._onItemClick,\n      onKeyDown: itemHasSubmenu ? this._onItemKeyDown : undefined,\n      onMouseEnter: this._onItemMouseEnter,\n      onMouseLeave: this._onItemMouseLeave,\n      onMouseDown: (ev: React.MouseEvent<HTMLButtonElement>) =>\n        onItemMouseDown ? onItemMouseDown(item, ev) : undefined,\n      onMouseMove: this._onItemMouseMove,\n      href: item.href,\n      title: item.title,\n      'aria-label': ariaLabel,\n      'aria-describedby': ariaDescribedByIds,\n      'aria-haspopup': itemHasSubmenu || undefined,\n      'aria-expanded': itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,\n      'aria-posinset': focusableElementIndex + 1,\n      'aria-setsize': totalItemCount,\n      'aria-disabled': isItemDisabled(item),\n      'aria-checked':\n        (itemRole === 'menuitemcheckbox' || itemRole === 'menuitemradio') && canCheck ? !!isChecked : undefined,\n      'aria-selected': itemRole === 'menuitem' && canCheck ? !!isChecked : undefined,\n      role: itemRole,\n      // eslint-disable-next-line deprecation/deprecation\n      style: item.style,\n    };\n\n    let { keytipProps } = item;\n    if (keytipProps && itemHasSubmenu) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n\n    return (\n      <KeytipData keytipProps={keytipProps} ariaDescribedBy={ariaDescribedByIds} disabled={isItemDisabled(item)}>\n        {(keytipAttributes: IKeytipDataProps): JSX.Element => (\n          <button ref={this._btn} {...buttonNativeProperties} {...itemButtonProperties} {...keytipAttributes}>\n            <ChildrenRenderer\n              componentRef={item.componentRef}\n              item={item}\n              classNames={classNames}\n              index={index}\n              onCheckmarkClick={hasCheckmarks && onItemClick ? onItemClick : undefined}\n              hasIcons={hasIcons}\n              openSubMenu={openSubMenu}\n              dismissSubMenu={dismissSubMenu}\n              dismissMenu={dismissMenu}\n              getSubmenuTarget={this._getSubmenuTarget}\n              {...itemProps}\n            />\n            {this._renderAriaDescription(ariaDescription, classNames.screenReaderText)}\n          </button>\n        )}\n      </KeytipData>\n    );\n  }\n\n  protected _renderAriaDescription = (ariaDescription?: string, className?: string) => {\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n    return ariaDescription ? (\n      <span id={this._ariaDescriptionId} className={className}>\n        {ariaDescription}\n      </span>\n    ) : null;\n  };\n\n  protected _getSubmenuTarget = (): HTMLElement | undefined => {\n    return this._btn.current ? this._btn.current : undefined;\n  };\n}\n"]}
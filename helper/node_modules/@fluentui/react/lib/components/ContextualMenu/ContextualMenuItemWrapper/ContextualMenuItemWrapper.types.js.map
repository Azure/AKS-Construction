{"version":3,"file":"ContextualMenuItemWrapper.types.js","sourceRoot":"../src/","sources":["components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuItemWrapper.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport type { IContextualMenuItem, IContextualMenuItemProps } from '../../../ContextualMenu';\nimport type { IMenuItemClassNames } from '../ContextualMenu.classNames';\nimport type { IRefObject } from '../../../Utilities';\n\nexport interface IContextualMenuItemWrapperProps extends React.ClassAttributes<IContextualMenuItem> {\n  /**\n   * Optional callback to access the ContextualMenuSplitButton interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ContextualMenuItemWrapper>;\n\n  /**\n   * The IContextualMenuItem that is used to render the item in the menu.\n   */\n  item: IContextualMenuItem;\n\n  /**\n   * CSS class to apply to the context menu.\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  classNames: IMenuItemClassNames;\n\n  /**\n   * The index number of the wrapper among all items in the contextual menu including things like dividers and headers.\n   */\n  index: number;\n\n  /**\n   * The index number of the wrapper among all items in the contextual menu excluding dividers and headers.\n   */\n  focusableElementIndex: number;\n\n  /**\n   * The total number of items in the contextual menu.\n   */\n  totalItemCount: number;\n\n  /**\n   * Whether or not if the item for the wrapper uses checkmarks.\n   */\n  hasCheckmarks?: boolean;\n\n  /**\n   * Whether or not the item for the wrapper uses icons.\n   */\n  hasIcons?: boolean;\n\n  /**\n   * Method to override the render of the individual menu items.\n   * @defaultvalue ContextualMenuItem\n   */\n  contextualMenuItemAs?:\n    | React.ComponentClass<IContextualMenuItemProps>\n    | React.FunctionComponent<IContextualMenuItemProps>;\n\n  /**\n   * Callback for when the user's mouse enters the wrapper.\n   */\n  onItemMouseEnter?: (\n    item: IContextualMenuItem,\n    ev: React.MouseEvent<HTMLElement>,\n    target: HTMLElement,\n  ) => boolean | void;\n\n  /**\n   * Callback for when the user's mouse leaves the wrapper.\n   */\n  onItemMouseLeave?: (item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement>) => void;\n\n  /**\n   * Callback for when the user's mouse moves in the wrapper.\n   */\n  onItemMouseMove?: (item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement>, target: HTMLElement) => void;\n\n  /**\n   * Callback for the mousedown event on the icon button in the wrapper.\n   */\n  onItemMouseDown?: (item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement>) => void;\n\n  /**\n   * Callback for when the click event on the primary button.\n   */\n  executeItemClick?: (\n    item: IContextualMenuItem,\n    ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n  ) => void;\n\n  /**\n   * Callback for when the click event on the icon button from the wrapper.\n   */\n  onItemClick?: (\n    item: IContextualMenuItem,\n    ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n  ) => void;\n\n  /**\n   * Callback for when the click event on the icon button which also takes in a specific HTMLElement\n   * that will be focused.\n   */\n  onItemClickBase?: (\n    item: IContextualMenuItem,\n    ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n    target: HTMLElement,\n  ) => void;\n\n  /**\n   * Callback for keyboard events on the wrapper.\n   */\n  onItemKeyDown?: (item: IContextualMenuItem, ev: React.KeyboardEvent<HTMLElement>) => void;\n\n  /**\n   * Callback to get the subMenu ID for an IContextualMenuItem.\n   * @deprecated ID relationship between a menu button and menu isn't necessary\n   */\n  getSubMenuId?: (item: IContextualMenuItem) => string | undefined;\n\n  /**\n   * Key of the currently expanded subMenu.\n   */\n  expandedMenuItemKey?: string;\n\n  /**\n   * Callback for touch/pointer events on the split button.\n   */\n  onTap?: (ev: React.TouchEvent<HTMLElement> | PointerEvent) => void;\n\n  /**\n   * This prop will get set by ContextualMenu and can be called to open this item's subMenu, if present.\n   */\n  openSubMenu?: (item: any, target: HTMLElement) => void;\n\n  /**\n   * This prop will get set by ContextualMenu and can be called to close this item's subMenu, if present.\n   */\n  dismissSubMenu?: () => void;\n\n  /**\n   * This prop will get set by ContextualMenu and can be called to close the menu this item belongs to.\n   * If dismissAll is true, all menus will be closed.\n   */\n  dismissMenu?: (ev?: any, dismissAll?: boolean) => void;\n}\n"]}
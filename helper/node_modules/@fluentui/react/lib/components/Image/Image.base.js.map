{"version":3,"file":"Image.base.js","sourceRoot":"../src/","sources":["components/Image/Image.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, getNativeProps, imgProperties } from '../../Utilities';\nimport { ImageCoverStyle, ImageFit, ImageLoadState } from './Image.types';\nimport { useIsomorphicLayoutEffect, useMergedRefs } from '@fluentui/react-hooks';\nimport type { IImageProps, IImageStyleProps, IImageStyles } from './Image.types';\n\nconst getClassNames = classNamesFunction<IImageStyleProps, IImageStyles>();\n\nexport interface IImageState {\n  loadState?: ImageLoadState;\n}\n\nconst SVG_REGEX = /\\.svg$/i;\nconst KEY_PREFIX = 'fabricImage';\n\nfunction useLoadState(\n  props: IImageProps,\n  imageElement: React.RefObject<HTMLImageElement>,\n): readonly [\n  ImageLoadState,\n  /* onImageLoad */ (ev: React.SyntheticEvent<HTMLImageElement>) => void,\n  /* onImageError */ (ev: React.SyntheticEvent<HTMLImageElement>) => void,\n] {\n  const { onLoadingStateChange, onLoad, onError, src } = props;\n\n  const [loadState, setLoadState] = React.useState<ImageLoadState>(ImageLoadState.notLoaded);\n\n  useIsomorphicLayoutEffect(() => {\n    // If the src property changes, reset the load state\n    // (does nothing if the load state is already notLoaded)\n    setLoadState(ImageLoadState.notLoaded);\n  }, [src]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps -- intended to run every render\n  React.useEffect(() => {\n    if (loadState === ImageLoadState.notLoaded) {\n      // testing if naturalWidth and naturalHeight are greater than zero is better than checking\n      // .complete, because .complete will also be set to true if the image breaks. However,\n      // for some browsers, SVG images do not have a naturalWidth or naturalHeight, so fall back\n      // to checking .complete for these images.\n      const isLoaded: boolean = imageElement.current\n        ? (src && imageElement.current.naturalWidth > 0 && imageElement.current.naturalHeight > 0) ||\n          (imageElement.current.complete && SVG_REGEX.test(src!))\n        : false;\n\n      if (isLoaded) {\n        setLoadState(ImageLoadState.loaded);\n      }\n    }\n  });\n\n  React.useEffect(() => {\n    onLoadingStateChange?.(loadState);\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run when loadState changes\n  }, [loadState]);\n\n  const onImageLoaded = React.useCallback(\n    (ev: React.SyntheticEvent<HTMLImageElement>) => {\n      onLoad?.(ev);\n      if (src) {\n        setLoadState(ImageLoadState.loaded);\n      }\n    },\n    [src, onLoad],\n  );\n\n  const onImageError = React.useCallback(\n    (ev: React.SyntheticEvent<HTMLImageElement>) => {\n      onError?.(ev);\n      setLoadState(ImageLoadState.error);\n    },\n    [onError],\n  );\n\n  return [loadState, onImageLoaded, onImageError] as const;\n}\n\nexport const ImageBase: React.FunctionComponent<IImageProps> = React.forwardRef<HTMLImageElement, IImageProps>(\n  (props, forwardedRef) => {\n    const frameElement = React.useRef<HTMLDivElement>() as React.RefObject<HTMLDivElement>;\n    const imageElement = React.useRef<HTMLImageElement>() as React.RefObject<HTMLImageElement>;\n    const [loadState, onImageLoaded, onImageError] = useLoadState(props, imageElement);\n\n    const imageProps = getNativeProps<React.ImgHTMLAttributes<HTMLImageElement>>(props, imgProperties, [\n      'width',\n      'height',\n    ]);\n    const {\n      src,\n      alt,\n      width,\n      height,\n      shouldFadeIn = true,\n      shouldStartVisible,\n      className,\n      imageFit,\n      role,\n      maximizeFrame,\n      styles,\n      theme,\n      loading,\n    } = props;\n    const coverStyle = useCoverStyle(props, loadState, imageElement, frameElement);\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      width,\n      height,\n      maximizeFrame,\n      shouldFadeIn,\n      shouldStartVisible,\n      isLoaded:\n        loadState === ImageLoadState.loaded || (loadState === ImageLoadState.notLoaded && props.shouldStartVisible),\n      isLandscape: coverStyle === ImageCoverStyle.landscape,\n      isCenter: imageFit === ImageFit.center,\n      isCenterContain: imageFit === ImageFit.centerContain,\n      isCenterCover: imageFit === ImageFit.centerCover,\n      isContain: imageFit === ImageFit.contain,\n      isCover: imageFit === ImageFit.cover,\n      isNone: imageFit === ImageFit.none,\n      isError: loadState === ImageLoadState.error,\n      isNotImageFit: imageFit === undefined,\n    });\n\n    // If image dimensions aren't specified, the natural size of the image is used.\n    return (\n      <div className={classNames.root} style={{ width: width, height: height }} ref={frameElement}>\n        <img\n          {...imageProps}\n          onLoad={onImageLoaded}\n          onError={onImageError}\n          key={KEY_PREFIX + props.src || ''}\n          className={classNames.image}\n          ref={useMergedRefs(imageElement, forwardedRef)}\n          src={src}\n          alt={alt}\n          role={role}\n          loading={loading}\n        />\n      </div>\n    );\n  },\n);\nImageBase.displayName = 'ImageBase';\n\nfunction useCoverStyle(\n  props: IImageProps,\n  loadState: ImageLoadState,\n  imageElement: React.RefObject<HTMLImageElement>,\n  frameElement: React.RefObject<HTMLDivElement>,\n) {\n  const previousLoadState = React.useRef(loadState);\n  const coverStyle = React.useRef<ImageCoverStyle | undefined>();\n\n  if (\n    coverStyle === undefined ||\n    (previousLoadState.current === ImageLoadState.notLoaded && loadState === ImageLoadState.loaded)\n  ) {\n    coverStyle.current = computeCoverStyle(props, loadState, imageElement, frameElement);\n  }\n\n  previousLoadState.current = loadState;\n\n  return coverStyle.current!;\n}\n\nfunction computeCoverStyle(\n  props: IImageProps,\n  loadState: ImageLoadState,\n  imageElement: React.RefObject<HTMLImageElement>,\n  frameElement: React.RefObject<HTMLDivElement>,\n): ImageCoverStyle {\n  const { imageFit, width, height } = props;\n\n  // Do not compute cover style if it was already specified in props\n  if (props.coverStyle !== undefined) {\n    return props.coverStyle;\n  } else if (\n    loadState === ImageLoadState.loaded &&\n    (imageFit === ImageFit.cover ||\n      imageFit === ImageFit.contain ||\n      imageFit === ImageFit.centerContain ||\n      imageFit === ImageFit.centerCover) &&\n    imageElement.current &&\n    frameElement.current\n  ) {\n    // Determine the desired ratio using the width and height props.\n    // If those props aren't available, measure measure the frame.\n    let desiredRatio;\n    if (\n      typeof width === 'number' &&\n      typeof height === 'number' &&\n      imageFit !== ImageFit.centerContain &&\n      imageFit !== ImageFit.centerCover\n    ) {\n      desiredRatio = width / height;\n    } else {\n      desiredRatio = frameElement.current.clientWidth / frameElement.current.clientHeight;\n    }\n\n    // Examine the source image to determine its original ratio.\n    const naturalRatio = imageElement.current.naturalWidth / imageElement.current.naturalHeight;\n\n    // Should we crop from the top or the sides?\n    if (naturalRatio > desiredRatio) {\n      return ImageCoverStyle.landscape;\n    }\n  }\n  return ImageCoverStyle.portrait;\n}\n"]}
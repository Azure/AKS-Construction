{"version":3,"file":"Suggestions.types.js","sourceRoot":"../src/","sources":["components/FloatingPicker/Suggestions/Suggestions.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { ISuggestionModel, ISuggestionItemProps } from '../../../Pickers';\nimport type { IPersonaProps } from '../../../Persona';\nimport type { IRefObject } from '../../../Utilities';\n\nexport interface ISuggestionsCoreProps<T> extends React.ClassAttributes<any> {\n  /**\n   * Gets the component ref.\n   */\n  componentRef?: IRefObject<{}>;\n  /**\n   * How the suggestion should look in the suggestion list.\n   */\n  onRenderSuggestion?: (props: T, suggestionItemProps: ISuggestionItemProps<T>) => JSX.Element;\n\n  /**\n   * What should occur when a suggestion is clicked\n   */\n  onSuggestionClick: (ev?: React.MouseEvent<HTMLElement>, item?: any, index?: number) => void;\n  /**\n   * The list of Suggestions that will be displayed\n   */\n  suggestions: ISuggestionModel<T>[];\n  /**\n   * Function to fire when one of the optional remove buttons on a suggestion is clicked.\n   */\n  onSuggestionRemove?: (ev?: React.MouseEvent<HTMLElement>, item?: IPersonaProps, index?: number) => void;\n  /**\n   * Screen reader message to read when there are suggestions available.\n   */\n  suggestionsAvailableAlertText?: string;\n  /**\n   * An ARIA label for the container that is the parent of the suggestions.\n   */\n  suggestionsContainerAriaLabel?: string;\n  /**\n   * the classname of the suggestion item.\n   */\n  suggestionsItemClassName?: string;\n  /**\n   * Maximum number of suggestions to show in the full suggestion list.\n   */\n  resultsMaximumNumber?: number;\n  /**\n   * Indicates whether to show a button with each suggestion to remove that suggestion.\n   */\n  showRemoveButtons?: boolean;\n  /**\n   * Indicates whether to loop around to the top or bottom of the suggestions\n   * on calling nextSuggestion and previousSuggestion, respectively\n   */\n  shouldLoopSelection: boolean;\n}\n\nexport interface ISuggestionsControlProps<T> extends React.ClassAttributes<any>, ISuggestionsCoreProps<T> {\n  /**\n   * An ARIA label for the container that is the parent of the suggestions header items.\n   */\n  suggestionsHeaderContainerAriaLabel?: string;\n  /**\n   * An ARIA label for the container that is the parent of the suggestions footer items.\n   */\n  suggestionsFooterContainerAriaLabel?: string;\n  /**\n   * The header items props\n   */\n  headerItemsProps?: ISuggestionsHeaderFooterProps[];\n  /**\n   * The footer items props\n   */\n  footerItemsProps?: ISuggestionsHeaderFooterProps[];\n  /**\n   * Whether or not the first selectable item in the suggestions list should be selected\n   */\n  shouldSelectFirstItem?: () => boolean;\n  /**\n   * The CSS classname of the suggestions list.\n   */\n  className?: string;\n  /**\n   * Completes the suggestion\n   */\n  completeSuggestion: () => void;\n}\n\nexport interface ISuggestionsHeaderFooterProps {\n  renderItem: () => JSX.Element;\n  onExecute?: () => void;\n  className?: string;\n  ariaLabel?: string;\n  shouldShow: () => boolean;\n}\n\nexport interface ISuggestionsHeaderFooterItemProps {\n  componentRef?: IRefObject<{}>;\n  renderItem: () => JSX.Element;\n  onExecute?: () => void;\n  isSelected: boolean;\n  id: string;\n  className: string | undefined;\n}\n"]}
{"version":3,"file":"CalendarGridRow.js","sourceRoot":"../src/","sources":["components/CalendarDayGrid/CalendarGridRow.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAC7C,OAAO,EAAE,qBAAqB,EAAE,MAAM,+BAA+B,CAAC;AACtE,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AA2B5D,MAAM,CAAC,IAAM,eAAe,GAAmD,UAAA,KAAK;IAEhF,IAAA,UAAU,GAWR,KAAK,WAXG,EACV,IAAI,GAUF,KAAK,KAVH,EACJ,KAAK,GASH,KAAK,MATF,EACL,SAAS,GAQP,KAAK,UARE,EACT,YAAY,GAOV,KAAK,aAPK,EACZ,QAAQ,GAMN,KAAK,SANC,EACR,eAAe,GAKb,KAAK,gBALQ,EACf,cAAc,GAIZ,KAAK,eAJO,EACd,eAAe,GAGb,KAAK,gBAHQ,EACf,aAAa,GAEX,KAAK,cAFM,EACb,OAAO,GACL,KAAK,QADA,CACC;IACV,IAAM,WAAW,GAAG,eAAe;QACjC,CAAC,CAAC,qBAAqB,CAAC,KAAM,CAAC,MAAM,EAAE,cAAc,EAAE,eAAe,EAAE,aAAa,CAAC;QACtF,CAAC,CAAC,IAAI,CAAC;IAET,IAAM,WAAW,GAAG,WAAW;QAC7B,CAAC,CAAC,OAAO,CAAC,sBAAsB,IAAI,MAAM,CAAC,OAAO,CAAC,sBAAsB,EAAE,WAAW,CAAC,SAAS,CAAC,CAAC;QAClG,CAAC,CAAC,EAAE,CAAC;IAEP,OAAO,CACL,4BAAI,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,YAAY,EAAE,GAAG,EAAE,SAAS,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG;QAC5E,eAAe,IAAI,WAAW,IAAI,CACjC,4BACE,SAAS,EAAE,UAAU,CAAC,cAAc,EACpC,GAAG,EAAE,SAAS,EACd,KAAK,EAAE,WAAW,gBACN,WAAW,EACvB,KAAK,EAAC,KAAK;YAEX,kCAAO,WAAW,CAAC,SAAS,CAAC,CAAQ,CAClC,CACN;QACA,IAAI,CAAC,GAAG,CAAC,UAAC,GAAa,EAAE,QAAgB,IAAK,OAAA,CAC7C,oBAAC,mBAAmB,eAAK,KAAK,IAAE,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,IAAI,CAC/E,EAF8C,CAE9C,CAAC,CACC,CACN,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { format } from '@fluentui/utilities';\nimport { getWeekNumbersInMonth } from '@fluentui/date-time-utilities';\nimport { CalendarGridDayCell } from './CalendarGridDayCell';\nimport type { ICalendarDayGridProps, ICalendarDayGridStyles } from './CalendarDayGrid.types';\nimport type { IProcessedStyleSet } from '@fluentui/style-utilities';\nimport type { IDayInfo, IWeekCorners } from './CalendarDayGrid.base';\n\nexport interface ICalendarGridRowProps extends ICalendarDayGridProps {\n  classNames: IProcessedStyleSet<ICalendarDayGridStyles>;\n  weeks: IDayInfo[][];\n  week: IDayInfo[];\n  weekIndex: number;\n  weekCorners?: IWeekCorners;\n  ariaHidden?: boolean;\n  rowClassName?: string;\n  ariaRole?: string;\n  navigatedDayRef: React.MutableRefObject<HTMLTableCellElement>;\n  activeDescendantId: string;\n  calculateRoundedStyles(\n    classNames: IProcessedStyleSet<ICalendarDayGridStyles>,\n    above: boolean,\n    below: boolean,\n    left: boolean,\n    right: boolean,\n  ): string;\n  getDayInfosInRangeOfDay(dayToCompare: IDayInfo): IDayInfo[];\n  getRefsFromDayInfos(dayInfosInRange: IDayInfo[]): (HTMLElement | null)[];\n}\n\nexport const CalendarGridRow: React.FunctionComponent<ICalendarGridRowProps> = props => {\n  const {\n    classNames,\n    week,\n    weeks,\n    weekIndex,\n    rowClassName,\n    ariaRole,\n    showWeekNumbers,\n    firstDayOfWeek,\n    firstWeekOfYear,\n    navigatedDate,\n    strings,\n  } = props;\n  const weekNumbers = showWeekNumbers\n    ? getWeekNumbersInMonth(weeks!.length, firstDayOfWeek, firstWeekOfYear, navigatedDate)\n    : null;\n\n  const titleString = weekNumbers\n    ? strings.weekNumberFormatString && format(strings.weekNumberFormatString, weekNumbers[weekIndex])\n    : '';\n\n  return (\n    <tr role={ariaRole} className={rowClassName} key={weekIndex + '_' + week[0].key}>\n      {showWeekNumbers && weekNumbers && (\n        <th\n          className={classNames.weekNumberCell}\n          key={weekIndex}\n          title={titleString}\n          aria-label={titleString}\n          scope=\"row\"\n        >\n          <span>{weekNumbers[weekIndex]}</span>\n        </th>\n      )}\n      {week.map((day: IDayInfo, dayIndex: number) => (\n        <CalendarGridDayCell {...props} key={day.key} day={day} dayIndex={dayIndex} />\n      ))}\n    </tr>\n  );\n};\n"]}
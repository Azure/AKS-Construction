{"version":3,"file":"interfaces.js","sourceRoot":"../src/","sources":["utilities/dragdrop/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["import { EventGroup } from '../../Utilities';\n\n/**\n * Helper for subscribing and unsubscribing to\n * drag and drop events on an HTMLElement.\n *\n * {@docCategory IDragDropHelper}\n */\nexport interface IDragDropHelper {\n  /**\n   * Subscribe to events on a DOM node with drag and drop configuration.\n   */\n  subscribe: (\n    root: HTMLElement,\n    events: EventGroup,\n    options: IDragDropOptions,\n  ) => {\n    key: string;\n    dispose: () => void;\n  };\n  /**\n   * Unsubscribe to events registered on a DOM node with key.\n   */\n  unsubscribe: (root: HTMLElement, key: string) => void;\n  /**\n   * Dispose of listeners bound to instance of helper.\n   */\n  dispose: () => void;\n}\n\n/**\n * Drag & drop event callback interface.\n *\n * {@docCategory IDragDropHelper}\n */\nexport interface IDragDropEvents {\n  /**\n   * Whether or not drop action is allowed.\n   */\n  canDrop?: (dropContext?: IDragDropContext, dragContext?: IDragDropContext) => boolean;\n  /**\n   * Whether or not drag action is allowed.\n   */\n  canDrag?: (item?: any) => boolean;\n  /**\n   * On drag enter region event callback.\n   * Returned string is the css classes that will be added to the entering element.\n   */\n  onDragEnter?: (item?: any, event?: DragEvent) => string;\n  /**\n   * On drag leave region event callback.\n   */\n  onDragLeave?: (item?: any, event?: DragEvent) => void;\n  /**\n   * On drop event callback.\n   */\n  onDrop?: (item?: any, event?: DragEvent) => void;\n  /**\n   * On drag start event callback.\n   */\n  onDragStart?: (item?: any, itemIndex?: number, selectedItems?: any[], event?: MouseEvent) => void;\n  /**\n   * On drag end event callback.\n   */\n  onDragEnd?: (item?: any, event?: DragEvent) => void;\n  /**\n   * On drag over event callback.\n   */\n  onDragOver?: (item?: any, event?: DragEvent) => void;\n  /**\n   * Whether the whole group is draggable. This applies after canDrag returns true for the group.\n   */\n  canDragGroups?: boolean;\n}\n\n/**\n * Drag & drop event contextual information.\n *\n * {@docCategory IDragDropHelper}\n */\nexport interface IDragDropContext {\n  /**\n   * Data associated with drag & drop action.\n   */\n  data: any;\n  /**\n   * Index of drag & drop action.\n   */\n  index: number;\n  /**\n   * Whether or not drag & drop region is indivual or group of content.\n   */\n  isGroup?: boolean;\n}\n\nexport interface IDragDropTarget {\n  root: HTMLElement;\n  options: IDragDropOptions;\n  key: string;\n}\n\n/**\n * The drag and drop event listener configuration.\n *\n * {@docCategory IDragDropHelper}\n */\nexport interface IDragDropOptions {\n  /**\n   * Unique key to associate with instance.\n   */\n  key?: string;\n  /**\n   * Map of event name to callback function to subscribe to.\n   */\n  eventMap?: {\n    eventName: string;\n    callback: (context: IDragDropContext, event?: any) => void;\n  }[];\n  /**\n   * Selection index on drag and drop event.\n   */\n  selectionIndex: number;\n  /**\n   * Context associated with drag and drop event.\n   */\n  context: IDragDropContext;\n  /**\n   * Callback on drop state update.\n   */\n  updateDropState: (isDropping: boolean, event: DragEvent) => void;\n  /**\n   * Whether or not drop action is allowed.\n   */\n  canDrop?: (dropContext?: IDragDropContext, dragContext?: IDragDropContext) => boolean;\n  /**\n   * Whether or not drag action is allowed.\n   */\n  canDrag?: (item?: any) => boolean;\n  /**\n   * On drag start event callback.\n   */\n  onDragStart?: (item?: any, itemIndex?: number, selectedItems?: any[], event?: MouseEvent) => void;\n  /**\n   * On drop event callback.\n   */\n  onDrop?: (item?: any, event?: DragEvent) => void;\n  /**\n   * On drag end event callback.\n   */\n  onDragEnd?: (item?: any, event?: DragEvent) => void;\n  /**\n   * On drag over element(s) event callback.\n   */\n  onDragOver?: (item?: any, event?: DragEvent) => void;\n}\n\n/**\n * {@docCategory IDragDropHelper}\n */\nexport interface IDragDropEvent {\n  /**\n   * Whether or not the drag & drop event was handled.\n   */\n  isHandled?: boolean;\n}\n"]}
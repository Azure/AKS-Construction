{"version":3,"file":"shades.js","sourceRoot":"../src/","sources":["utilities/color/shades.ts"],"names":[],"mappings":"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","sourcesContent":["// Technically this should be shades and tints, but for simplicity we'll call everything a shade.\n/*\n * This utility module is used with theming. Given a color to shade, whether the theme is inverted\n * (i.e. is a dark color), and the desired shade enum, this will return an appropriate shade of that color.\n */\nimport { MAX_COLOR_RGB } from './consts';\nimport { assign } from '../../Utilities';\nimport { clamp } from './clamp';\nimport { getColorFromRGBA } from './getColorFromRGBA';\nimport { hsv2hsl } from './hsv2hsl';\nimport { hsv2rgb } from './hsv2rgb';\nimport type { IHSV, IColor } from './interfaces';\n\n// Soften: to get closer to the background color's luminance\n// (softening with a white background would be lightening, with black it'd be darkening)\n// Strongen: opposite of soften\n\n// Luminance multiplier constants for generating shades of a given color\nconst WhiteShadeTableBG = [0.027, 0.043, 0.082, 0.145, 0.184, 0.216, 0.349, 0.537]; // white bg\nconst BlackTintTableBG = [0.537, 0.45, 0.349, 0.216, 0.184, 0.145, 0.082, 0.043]; // black bg\nconst WhiteShadeTable = [0.537, 0.349, 0.216, 0.184, 0.145, 0.082, 0.043, 0.027]; // white fg\nconst BlackTintTable = [0.537, 0.45, 0.349, 0.216, 0.184, 0.145, 0.082, 0.043]; // black fg\nconst LumTintTable = [0.88, 0.77, 0.66, 0.55, 0.44, 0.33, 0.22, 0.11]; // light (strongen all)\nconst LumShadeTable = [0.11, 0.22, 0.33, 0.44, 0.55, 0.66, 0.77, 0.88]; // dark (soften all)\nconst ColorTintTable = [0.96, 0.84, 0.7, 0.4, 0.12]; // default soften\nconst ColorShadeTable = [0.1, 0.24, 0.44]; // default strongen\n\n// If the given shade's luminance is below/above these values, we'll swap to using the White/Black tables above\nconst LowLuminanceThreshold = 0.2;\nconst HighLuminanceThreshold = 0.8;\n\n/** Shades of a given color, from softest to strongest. */\nexport enum Shade {\n  Unshaded = 0,\n  Shade1 = 1,\n  Shade2 = 2,\n  Shade3 = 3,\n  Shade4 = 4,\n  Shade5 = 5,\n  Shade6 = 6,\n  Shade7 = 7,\n  Shade8 = 8,\n  // remember to update isValidShade()!\n}\n\n/**\n * Returns true if the argument is a valid Shade value\n * @param shade - The Shade value to validate.\n */\nexport function isValidShade(shade?: Shade): boolean {\n  return typeof shade === 'number' && shade >= Shade.Unshaded && shade <= Shade.Shade8;\n}\n\nfunction _isBlack(color: IColor): boolean {\n  return color.r === 0 && color.g === 0 && color.b === 0;\n}\n\nfunction _isWhite(color: IColor): boolean {\n  return color.r === MAX_COLOR_RGB && color.g === MAX_COLOR_RGB && color.b === MAX_COLOR_RGB;\n}\n\nfunction _darken(hsv: IHSV, factor: number): IHSV {\n  return {\n    h: hsv.h,\n    s: hsv.s,\n    v: clamp(hsv.v - hsv.v * factor, 100, 0),\n  };\n}\n\nfunction _lighten(hsv: IHSV, factor: number): IHSV {\n  return {\n    h: hsv.h,\n    s: clamp(hsv.s - hsv.s * factor, 100, 0),\n    v: clamp(hsv.v + (100 - hsv.v) * factor, 100, 0),\n  };\n}\n\nexport function isDark(color: IColor): boolean {\n  return hsv2hsl(color.h, color.s, color.v).l < 50;\n}\n\n/**\n * Given a color and a shade specification, generates the requested shade of the color.\n * Logic:\n * if white\n *  darken via tables defined above\n * if black\n *  lighten\n * if light\n *  strongen\n * if dark\n *  soften\n * else default\n *  soften or strongen depending on shade#\n * @param color - The base color whose shade is to be computed\n * @param shade - The shade of the base color to compute\n * @param isInverted - Default false. Whether the given theme is inverted (reverse strongen/soften logic)\n */\nexport function getShade(color: IColor, shade: Shade, isInverted: boolean = false): IColor | null {\n  if (!color) {\n    return null;\n  }\n\n  if (shade === Shade.Unshaded || !isValidShade(shade)) {\n    return color;\n  }\n\n  const hsl = hsv2hsl(color.h, color.s, color.v);\n  let hsv = { h: color.h, s: color.s, v: color.v };\n  const tableIndex = shade - 1;\n  let _soften = _lighten;\n  let _strongen = _darken;\n  if (isInverted) {\n    _soften = _darken;\n    _strongen = _lighten;\n  }\n  if (_isWhite(color)) {\n    // white\n    hsv = _darken(hsv, WhiteShadeTable[tableIndex]);\n  } else if (_isBlack(color)) {\n    // black\n    hsv = _lighten(hsv, BlackTintTable[tableIndex]);\n  } else if (hsl.l / 100 > HighLuminanceThreshold) {\n    // light\n    hsv = _strongen(hsv, LumShadeTable[tableIndex]);\n  } else if (hsl.l / 100 < LowLuminanceThreshold) {\n    // dark\n    hsv = _soften(hsv, LumTintTable[tableIndex]);\n  } else {\n    // default\n    if (tableIndex < ColorTintTable.length) {\n      hsv = _soften(hsv, ColorTintTable[tableIndex]);\n    } else {\n      hsv = _strongen(hsv, ColorShadeTable[tableIndex - ColorTintTable.length]);\n    }\n  }\n\n  return getColorFromRGBA(assign(hsv2rgb(hsv.h, hsv.s, hsv.v), { a: color.a }));\n}\n\n// Background shades/tints are generated differently. The provided color will be guaranteed\n//   to be the darkest or lightest one. If it is <50% luminance, it will always be the darkest,\n//   otherwise it will always be the lightest.\nexport function getBackgroundShade(color: IColor, shade: Shade, isInverted: boolean = false): IColor | null {\n  if (!color) {\n    return null;\n  }\n\n  if (shade === Shade.Unshaded || !isValidShade(shade)) {\n    return color;\n  }\n\n  let hsv = { h: color.h, s: color.s, v: color.v };\n  const tableIndex = shade - 1;\n  if (!isInverted) {\n    // lightish\n    hsv = _darken(hsv, WhiteShadeTableBG[tableIndex]);\n  } else {\n    // default: if (hsl.l / 100 < .5) { // darkish\n    hsv = _lighten(hsv, BlackTintTableBG[BlackTintTable.length - 1 - tableIndex]);\n  }\n\n  return getColorFromRGBA(assign(hsv2rgb(hsv.h, hsv.s, hsv.v), { a: color.a }));\n}\n\n/* Calculates the contrast ratio between two colors. Used for verifying\n * color pairs meet minimum accessibility requirements.\n * See: https://www.w3.org/TR/WCAG20/ section 1.4.3\n */\nexport function getContrastRatio(color1: IColor, color2: IColor): number {\n  // Formula defined by: http://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html#contrast-ratiodef\n  // relative luminance: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n\n  /* calculate the intermediate value needed to calculating relative luminance */\n  function _getThing(x: number): number {\n    if (x <= 0.03928) {\n      return x / 12.92;\n    } else {\n      return Math.pow((x + 0.055) / 1.055, 2.4);\n    }\n  }\n\n  const r1 = _getThing(color1.r / MAX_COLOR_RGB);\n  const g1 = _getThing(color1.g / MAX_COLOR_RGB);\n  const b1 = _getThing(color1.b / MAX_COLOR_RGB);\n  let L1 = 0.2126 * r1 + 0.7152 * g1 + 0.0722 * b1; // relative luminance of first color\n  L1 += 0.05;\n\n  const r2 = _getThing(color2.r / MAX_COLOR_RGB);\n  const g2 = _getThing(color2.g / MAX_COLOR_RGB);\n  const b2 = _getThing(color2.b / MAX_COLOR_RGB);\n  let L2 = 0.2126 * r2 + 0.7152 * g2 + 0.0722 * b2; // relative luminance of second color\n  L2 += 0.05;\n\n  // return the lighter color divided by darker\n  return L1 / L2 > 1 ? L1 / L2 : L2 / L1;\n}\n"]}
{"version":3,"file":"KeytipConfig.js","sourceRoot":"../src/","sources":["utilities/keytips/KeytipConfig.ts"],"names":[],"mappings":";AAsCA;;;;;GAKG;AACH,MAAM,UAAU,oBAAoB,CAAC,MAAqB;IACxD,IAAM,SAAS,GAAqB,EAAE,CAAC;IAEvC,KAAqB,UAAc,EAAd,KAAA,MAAM,CAAC,OAAO,EAAd,cAAc,EAAd,IAAc,EAAE;QAAhC,IAAM,MAAM,SAAA;QACf,eAAe,CAAC,SAAS,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;KACxC;IAED,OAAO,SAAS,CAAC;AACnB,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,eAAe,CAC7B,SAA2B,EAC3B,cAAwB,EACxB,MAAyB;IAEzB,4BAA4B;IAC5B,IAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC;IACxF,IAAM,cAAc,GAAG,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAEvD,0BAA0B;IAC1B,IAAM,WAAW,yBAAsB,MAAM,CAAC,aAAa,KAAE,YAAY,EAAE,cAAc,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,GAAE,CAAC;IACrH,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC;IAEnC,IAAI,MAAM,CAAC,QAAQ,EAAE;QACnB,KAAoB,UAAe,EAAf,KAAA,MAAM,CAAC,QAAQ,EAAf,cAAe,EAAf,IAAe,EAAE;YAAhC,IAAM,KAAK,SAAA;YACd,kCAAkC;YAClC,eAAe,CAAC,SAAS,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;SACnD;KACF;AACH,CAAC","sourcesContent":["import type { IKeytipProps } from '../../Keytip';\n\nexport interface IKeytipConfig {\n  keytips: IKeytipConfigItem[];\n}\n\nexport interface IKeytipConfigItem {\n  /**\n   * Key Sequence for this keytip only\n   * If sequence is not defined it will be derived from the content string\n   */\n  sequence?: string;\n\n  /**\n   * Content for the keytip\n   */\n  content: string;\n\n  /**\n   * Identifier for the keytip, to be used to access in the configMap\n   */\n  id: string;\n\n  /**\n   * Optional props in IKeytipProps\n   */\n  optionalProps?: Partial<IKeytipProps>;\n\n  /**\n   * Children keytips of this keytip\n   */\n  children?: IKeytipConfigItem[];\n}\n\nexport interface IKeytipConfigMap {\n  [id: string]: IKeytipProps;\n}\n\n/**\n * Builds a map of ID to IKeytipProps\n *\n * @param config - IKeytipConfig object\n * @returns Config map\n */\nexport function buildKeytipConfigMap(config: IKeytipConfig): IKeytipConfigMap {\n  const configMap: IKeytipConfigMap = {};\n\n  for (const keytip of config.keytips) {\n    constructKeytip(configMap, [], keytip);\n  }\n\n  return configMap;\n}\n\n/**\n * Constructs a keytip from an IKeytipConfigItem and puts it in the configMap\n *\n * @param configMap - IKeytipConfigMap to store the keytip in\n * @param parentSequence - string of the parent keytip\n * @param keytip - IKeytipConfigItem data\n */\nexport function constructKeytip(\n  configMap: IKeytipConfigMap,\n  parentSequence: string[],\n  keytip: IKeytipConfigItem,\n): void {\n  // Compute full key sequence\n  const sequence = keytip.sequence ? keytip.sequence : keytip.content.toLocaleLowerCase();\n  const keytipSequence = parentSequence.concat(sequence);\n\n  // Save props in configMap\n  const keytipProps: IKeytipProps = { ...keytip.optionalProps, keySequences: keytipSequence, content: keytip.content };\n  configMap[keytip.id] = keytipProps;\n\n  if (keytip.children) {\n    for (const child of keytip.children) {\n      // Create keytips for all children\n      constructKeytip(configMap, keytipSequence, child);\n    }\n  }\n}\n"]}
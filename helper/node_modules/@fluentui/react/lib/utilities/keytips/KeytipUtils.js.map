{"version":3,"file":"KeytipUtils.js","sourceRoot":"../src/","sources":["utilities/keytips/KeytipUtils.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,cAAc,EAAE,sBAAsB,EAAE,YAAY,EAAE,MAAM,mBAAmB,CAAC;AACpH,OAAO,EAAE,iBAAiB,EAAE,MAAM,iBAAiB,CAAC;AAEpD;;;;;;GAMG;AACH,MAAM,UAAU,aAAa,CAAC,YAAsB;IAClD,OAAO,YAAY,CAAC,MAAM,CAAC,UAAC,SAAiB,EAAE,WAAmB;QAChE,OAAO,SAAS,GAAG,aAAa,GAAG,WAAW,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC/E,CAAC,EAAE,UAAU,CAAC,CAAC;AACjB,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,cAAc,CAAC,YAAsB,EAAE,oBAA8B;IACnF,IAAM,mBAAmB,GAAG,oBAAoB,CAAC,MAAM,CAAC;IACxD,IAAM,gBAAgB,GAAG,kBAAI,oBAAoB,EAAE,GAAG,EAAE,CAAC;IACzD,IAAM,eAAe,qBAAO,YAAY,CAAC,CAAC;IAC1C,OAAO,iBAAiB,CAAC,eAAe,EAAE,mBAAmB,GAAG,CAAC,EAAE,gBAAiB,CAAC,CAAC;AACxF,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,sBAAsB,CAAC,YAAsB;IAC3D,OAAO,GAAG,GAAG,cAAc,GAAG,IAAI,GAAG,aAAa,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;AAC1E,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,eAAe,CAAC,QAAgB;IAC9C,OAAO,GAAG,GAAG,sBAAsB,GAAG,IAAI,GAAG,QAAQ,GAAG,IAAI,CAAC;AAC/D,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,kBAAkB,CAAC,YAAsB;IACvD,IAAM,WAAW,GAAG,GAAG,GAAG,YAAY,CAAC;IACvC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;QACxB,2BAA2B;QAC3B,OAAO,WAAW,CAAC;KACpB;IAED,OAAO,WAAW,GAAG,GAAG,GAAG,aAAa,CAAC,YAAY,CAAC,CAAC;AACzD,CAAC","sourcesContent":["import { KTP_SEPARATOR, KTP_PREFIX, DATAKTP_TARGET, DATAKTP_EXECUTE_TARGET, KTP_LAYER_ID } from './KeytipConstants';\nimport { addElementAtIndex } from '../../Utilities';\n\n/**\n * Converts a whole set of KeySequences into one keytip ID, which will be the ID for the last keytip sequence specified\n * keySequences should not include the initial keytip 'start' sequence.\n *\n * @param keySequences - Full path of IKeySequences for one keytip.\n * @returns String to use for the keytip ID.\n */\nexport function sequencesToID(keySequences: string[]): string {\n  return keySequences.reduce((prevValue: string, keySequence: string): string => {\n    return prevValue + KTP_SEPARATOR + keySequence.split('').join(KTP_SEPARATOR);\n  }, KTP_PREFIX);\n}\n\n/**\n * Merges an overflow sequence with a key sequence.\n *\n * @param keySequences - Full sequence for one keytip.\n * @param overflowKeySequences - Full overflow keytip sequence.\n * @returns Sequence that will be used by the keytip when in the overflow.\n */\nexport function mergeOverflows(keySequences: string[], overflowKeySequences: string[]): string[] {\n  const overflowSequenceLen = overflowKeySequences.length;\n  const overflowSequence = [...overflowKeySequences].pop();\n  const newKeySequences = [...keySequences];\n  return addElementAtIndex(newKeySequences, overflowSequenceLen - 1, overflowSequence!);\n}\n\n/**\n * Constructs the data-ktp-target attribute selector from a full key sequence.\n *\n * @param keySequences - Full string[] for a Keytip.\n * @returns String selector to use to query for the keytip target.\n */\nexport function ktpTargetFromSequences(keySequences: string[]): string {\n  return '[' + DATAKTP_TARGET + '=\"' + sequencesToID(keySequences) + '\"]';\n}\n\n/**\n * Constructs the data-ktp-execute-target attribute selector from a keytip ID.\n *\n * @param keytipId - ID of the Keytip.\n * @returns String selector to use to query for the keytip execute target.\n */\nexport function ktpTargetFromId(keytipId: string): string {\n  return '[' + DATAKTP_EXECUTE_TARGET + '=\"' + keytipId + '\"]';\n}\n\n/**\n * Gets the aria-describedby value to put on the component with this keytip.\n *\n * @param keySequences - KeySequences of the keytip.\n * @returns The aria-describedby value to set on the component with this keytip.\n */\nexport function getAriaDescribedBy(keySequences: string[]): string {\n  const describedby = ' ' + KTP_LAYER_ID;\n  if (!keySequences.length) {\n    // Return just the layer ID\n    return describedby;\n  }\n\n  return describedby + ' ' + sequencesToID(keySequences);\n}\n"]}
{"version":3,"file":"withResponsiveMode.js","sourceRoot":"../src/","sources":["utilities/decorators/withResponsiveMode.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { getWindow, hoistStatics, EventGroup } from '../../Utilities';\nimport { WindowContext } from '../../WindowProvider';\n\n/**\n * @deprecated Decorator usage is deprecated. Either call `getResponsiveMode` manually, or\n * use the `useResponsiveMode` hook within a function component.\n */\nexport interface IWithResponsiveModeState {\n  responsiveMode?: ResponsiveMode;\n}\n\nexport enum ResponsiveMode {\n  /** Width \\<= 479px */\n  small = 0,\n  /** Width \\> 479px and \\<= 639px */\n  medium = 1,\n  /** Width \\> 639px and \\<= 1023px */\n  large = 2,\n  /** Width \\> 1023px and \\<= 1365px */\n  xLarge = 3,\n  /** Width \\> 1365px and \\<= 1919px */\n  xxLarge = 4,\n  /** Width \\> 1919px */\n  xxxLarge = 5,\n  unknown = 999,\n}\n\nconst RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];\n\n/**\n * User specified mode to default to, useful for server side rendering scenarios.\n */\nlet _defaultMode: ResponsiveMode | undefined;\n\n/**\n * Tracking the last mode we successfully rendered, which allows us to\n * paint initial renders with the correct size.\n */\nlet _lastMode: ResponsiveMode | undefined;\n\n/**\n * Allows a server rendered scenario to provide a **default** responsive mode.\n * This WILL NOT trigger any updates to components that have already consumed the responsive mode!\n */\nexport function setResponsiveMode(responsiveMode: ResponsiveMode | undefined): void {\n  _defaultMode = responsiveMode;\n}\n\n/**\n * Initializes the responsive mode to the current window size. This can be used to avoid\n * a re-render during first component mount since the window would otherwise not be measured\n * until after mounting.\n *\n * This WILL NOT trigger any updates to components that have already consumed the responsive mode!\n */\nexport function initializeResponsiveMode(element?: HTMLElement): void {\n  const currentWindow = getWindow(element);\n\n  if (currentWindow) {\n    getResponsiveMode(currentWindow);\n  }\n}\n\nexport function getInitialResponsiveMode(): ResponsiveMode {\n  return _defaultMode ?? _lastMode ?? ResponsiveMode.large;\n}\n\n/**\n * @deprecated Decorator usage is deprecated. Either call `getResponsiveMode` manually, or\n * use the `useResponsiveMode` hook within a function component.\n */\nexport function withResponsiveMode<TProps extends { responsiveMode?: ResponsiveMode }, TState>(\n  ComposedComponent: new (props: TProps, ...args: any[]) => React.Component<TProps, TState>,\n): any {\n  // eslint-disable-next-line deprecation/deprecation\n  const resultClass = class WithResponsiveMode extends BaseDecorator<TProps, IWithResponsiveModeState> {\n    public static contextType = WindowContext;\n    public context: React.ContextType<typeof WindowContext>;\n\n    private _events: EventGroup;\n\n    constructor(props: TProps) {\n      super(props);\n      this._events = new EventGroup(this);\n      this._updateComposedComponentRef = this._updateComposedComponentRef.bind(this);\n\n      this.state = {\n        responsiveMode: getInitialResponsiveMode(),\n      };\n    }\n\n    public componentDidMount(): void {\n      this._events.on(this.context.window, 'resize', this._onResize);\n      this._onResize();\n    }\n\n    public componentWillUnmount(): void {\n      this._events.dispose();\n    }\n\n    public render(): JSX.Element | null {\n      const { responsiveMode } = this.state;\n\n      return responsiveMode === ResponsiveMode.unknown ? null : (\n        <ComposedComponent\n          ref={this._updateComposedComponentRef}\n          responsiveMode={responsiveMode}\n          {...(this.props as any)}\n        />\n      );\n    }\n\n    private _onResize = () => {\n      const responsiveMode = getResponsiveMode(this.context.window);\n\n      if (responsiveMode !== this.state.responsiveMode) {\n        this.setState({\n          responsiveMode,\n        });\n      }\n    };\n  };\n  return hoistStatics(ComposedComponent, resultClass);\n}\n\nfunction getWidthOfCurrentWindow(currentWindow: Window): number {\n  try {\n    return currentWindow.document.documentElement.clientWidth;\n  } catch (e) {\n    return currentWindow.innerWidth;\n  }\n}\n\n/**\n * Hook to get the current responsive mode (window size category).\n * @param currentWindow - Use this window when determining the responsive mode.\n */\nexport function getResponsiveMode(currentWindow: Window | undefined): ResponsiveMode {\n  let responsiveMode = ResponsiveMode.small;\n\n  if (currentWindow) {\n    try {\n      while (getWidthOfCurrentWindow(currentWindow) > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {\n        responsiveMode++;\n      }\n    } catch (e) {\n      // Return a best effort result in cases where we're in the browser but it throws on getting innerWidth.\n      responsiveMode = getInitialResponsiveMode();\n    }\n\n    // Tracking last mode just gives us a better default in future renders,\n    // which avoids starting with the wrong value if we've measured once.\n    _lastMode = responsiveMode;\n  } else {\n    if (_defaultMode !== undefined) {\n      responsiveMode = _defaultMode;\n    } else {\n      throw new Error(\n        'Content was rendered in a server environment without providing a default responsive mode. ' +\n          'Call setResponsiveMode to define what the responsive mode is.',\n      );\n    }\n  }\n\n  return responsiveMode;\n}\n"]}
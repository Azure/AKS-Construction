{"version":3,"file":"TextField.base.js","sourceRoot":"../src/","sources":["components/TextField/TextField.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport {\n  Async,\n  classNamesFunction,\n  DelayedRender,\n  getId,\n  getNativeProps,\n  getWindow,\n  initializeComponentRef,\n  inputProperties,\n  isControlled,\n  isIE11,\n  textAreaProperties,\n  warn,\n  warnControlledUsage,\n  warnMutuallyExclusive,\n} from '../../Utilities';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { ILabelStyleProps, ILabelStyles } from '../../Label';\nimport type { IStyleFunctionOrObject } from '../../Utilities';\nimport type { ITextField, ITextFieldProps, ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\n\nconst getClassNames = classNamesFunction<ITextFieldStyleProps, ITextFieldStyles>();\n\n/** @internal */\nexport interface ITextFieldState {\n  /** The currently displayed value if uncontrolled. */\n  uncontrolledValue: string | undefined;\n\n  /** Is true when the control has focus. */\n  isFocused?: boolean;\n\n  /**\n   * Dynamic error message returned by `onGetErrorMessage`.\n   * Use `this._errorMessage` to get the actual current error message.\n   */\n  errorMessage: string | JSX.Element;\n\n  /**\n   * Whether this field has `type='password'` and `canRevealPassword=true`, and the password is\n   * currently being revealed.\n   */\n  isRevealingPassword?: boolean;\n}\n\n/** @internal */\nexport interface ITextFieldSnapshot {\n  /**\n   * If set, the text field is changing between single- and multi-line, so we'll need to reset\n   * selection/cursor after the change completes.\n   */\n  selection?: [number | null, number | null];\n}\n\nconst DEFAULT_STATE_VALUE = '';\nconst COMPONENT_NAME = 'TextField';\n\nconst REVEAL_ICON_NAME = 'RedEye';\nconst HIDE_ICON_NAME = 'Hide';\n\nexport class TextFieldBase\n  extends React.Component<ITextFieldProps, ITextFieldState, ITextFieldSnapshot>\n  implements ITextField {\n  public static defaultProps: ITextFieldProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true,\n  };\n\n  /** Fallback ID if none is provided in props. Access proper value via `this._id`. */\n  private _fallbackId: string;\n  private _descriptionId: string;\n  private _labelId: string;\n  private _prefixId: string;\n  private _suffixId: string;\n  private _delayedValidate: (value: string | undefined) => void;\n  private _lastValidation: number;\n  private _latestValidateValue: string | undefined;\n  private _hasWarnedNullValue: boolean | undefined;\n  private _textElement = React.createRef<HTMLTextAreaElement | HTMLInputElement>();\n  private _classNames: IProcessedStyleSet<ITextFieldStyles>;\n  private _async: Async;\n  /** Most recent value from a change or input event, to help avoid processing events twice */\n  private _lastChangeValue: string | undefined;\n\n  public constructor(props: ITextFieldProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage',\n      });\n    }\n\n    this._fallbackId = getId(COMPONENT_NAME);\n    this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    this._labelId = getId(COMPONENT_NAME + 'Label');\n    this._prefixId = getId(COMPONENT_NAME + 'Prefix');\n    this._suffixId = getId(COMPONENT_NAME + 'Suffix');\n\n    this._warnControlledUsage();\n\n    let { defaultValue = DEFAULT_STATE_VALUE } = props;\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n    this.state = {\n      uncontrolledValue: this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: '',\n    };\n\n    this._delayedValidate = this._async.debounce(this._validate, this.props.deferredValidationTime);\n    this._lastValidation = 0;\n  }\n\n  /**\n   * Gets the current value of the text field.\n   */\n  public get value(): string | undefined {\n    return _getValue(this.props, this.state);\n  }\n\n  public componentDidMount(): void {\n    this._adjustInputHeight();\n\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._async.dispose();\n  }\n\n  public getSnapshotBeforeUpdate(prevProps: ITextFieldProps, prevState: ITextFieldState): ITextFieldSnapshot | null {\n    return {\n      selection: [this.selectionStart, this.selectionEnd],\n    };\n  }\n\n  public componentDidUpdate(\n    prevProps: ITextFieldProps,\n    prevState: ITextFieldState,\n    snapshot: ITextFieldSnapshot,\n  ): void {\n    const props = this.props;\n    const { selection = [null, null] } = snapshot || {};\n    const [start, end] = selection;\n\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n\n    if (prevProps.value !== props.value) {\n      // Only if the value in props changed, reset the record of the last value seen by a\n      // change/input event (don't do this if the value in state changed, since at least in tests\n      // the state update may happen before the second event in a series)\n      this._lastChangeValue = undefined;\n    }\n\n    const prevValue = _getValue(prevProps, prevState);\n    const value = this.value;\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps);\n\n      // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({ errorMessage: '' });\n      }\n\n      // Adjust height if needed based on new value\n      this._adjustInputHeight();\n\n      // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      borderless,\n      className,\n      disabled,\n      invalid,\n      iconProps,\n      inputClassName,\n      label,\n      multiline,\n      required,\n      underlined,\n      prefix,\n      resizable,\n      suffix,\n      theme,\n      styles,\n      autoAdjustHeight,\n      canRevealPassword,\n      revealPasswordAriaLabel,\n      type,\n      onRenderPrefix = this._onRenderPrefix,\n      onRenderSuffix = this._onRenderSuffix,\n      onRenderLabel = this._onRenderLabel,\n      onRenderDescription = this._onRenderDescription,\n    } = this.props;\n    const { isFocused, isRevealingPassword } = this.state;\n    const errorMessage = this._errorMessage;\n    const isInvalid = typeof invalid === 'boolean' ? invalid : !!errorMessage;\n\n    const hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();\n\n    const classNames = (this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      focused: isFocused,\n      required,\n      multiline,\n      hasLabel: !!label,\n      hasErrorMessage: isInvalid,\n      borderless,\n      resizable,\n      hasIcon: !!iconProps,\n      underlined,\n      inputClassName,\n      autoAdjustHeight,\n      hasRevealButton,\n    }));\n\n    return (\n      // eslint-disable-next-line deprecation/deprecation\n      <div ref={this.props.elementRef} className={classNames.root}>\n        <div className={classNames.wrapper}>\n          {onRenderLabel(this.props, this._onRenderLabel)}\n          <div className={classNames.fieldGroup}>\n            {(prefix !== undefined || this.props.onRenderPrefix) && (\n              <div className={classNames.prefix} id={this._prefixId}>\n                {onRenderPrefix(this.props, this._onRenderPrefix)}\n              </div>\n            )}\n            {multiline ? this._renderTextArea() : this._renderInput()}\n            {iconProps && <Icon className={classNames.icon} {...iconProps} />}\n            {hasRevealButton && (\n              // Explicitly set type=\"button\" since the default button type within a form is \"submit\"\n              <button\n                aria-label={revealPasswordAriaLabel}\n                className={classNames.revealButton}\n                onClick={this._onRevealButtonClick}\n                aria-pressed={!!isRevealingPassword}\n                type=\"button\"\n              >\n                <span className={classNames.revealSpan}>\n                  <Icon\n                    className={classNames.revealIcon}\n                    iconName={isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME}\n                  />\n                </span>\n              </button>\n            )}\n            {(suffix !== undefined || this.props.onRenderSuffix) && (\n              <div className={classNames.suffix} id={this._suffixId}>\n                {onRenderSuffix(this.props, this._onRenderSuffix)}\n              </div>\n            )}\n          </div>\n        </div>\n        {this._isDescriptionAvailable && (\n          <span id={this._descriptionId}>\n            {onRenderDescription(this.props, this._onRenderDescription)}\n            {errorMessage && (\n              <div role=\"alert\">\n                <DelayedRender>{this._renderErrorMessage()}</DelayedRender>\n              </div>\n            )}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  /**\n   * Sets focus on the text field\n   */\n  public focus() {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  }\n\n  /**\n   * Blurs the text field.\n   */\n  public blur() {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  }\n\n  /**\n   * Selects the text field\n   */\n  public select() {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  }\n\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n  public setSelectionStart(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  }\n\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n  public setSelectionEnd(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  }\n\n  /**\n   * Gets the selection start of the text field\n   */\n  public get selectionStart(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionStart : -1;\n  }\n\n  /**\n   * Gets the selection end of the text field\n   */\n  public get selectionEnd(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n  }\n\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n  public setSelectionRange(start: number, end: number): void {\n    if (this._textElement.current) {\n      (this._textElement.current as HTMLInputElement).setSelectionRange(start, end);\n    }\n  }\n\n  private _warnControlledUsage(prevProps?: ITextFieldProps): void {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly',\n    });\n\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\n        `Warning: 'value' prop on '${COMPONENT_NAME}' should not be null. Consider using an ` +\n          'empty string to clear the component or undefined to indicate an uncontrolled component.',\n      );\n    }\n  }\n\n  /** Returns `props.id` if available, or a fallback if not. */\n  private get _id(): string {\n    return this.props.id || this._fallbackId;\n  }\n\n  private get _isControlled(): boolean {\n    return isControlled(this.props, 'value');\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onFocus) {\n      this.props.onFocus(ev);\n    }\n\n    this.setState({ isFocused: true }, () => {\n      if (this.props.validateOnFocusIn) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n\n    this.setState({ isFocused: false }, () => {\n      if (this.props.validateOnFocusOut) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onRenderLabel = (props: ITextFieldProps): JSX.Element | null => {\n    const { label, required } = props;\n    // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n    const labelStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.label as IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>)\n      : undefined;\n\n    if (label) {\n      return (\n        <Label required={required} htmlFor={this._id} styles={labelStyles} disabled={props.disabled} id={this._labelId}>\n          {props.label}\n        </Label>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderDescription = (props: ITextFieldProps): JSX.Element | null => {\n    if (props.description) {\n      return <span className={this._classNames.description}>{props.description}</span>;\n    }\n    return null;\n  };\n\n  private _onRenderPrefix(props: ITextFieldProps): JSX.Element {\n    const { prefix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{prefix}</span>;\n  }\n\n  private _onRenderSuffix(props: ITextFieldProps): JSX.Element {\n    const { suffix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{suffix}</span>;\n  }\n\n  /**\n   * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n   *\n   * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n   * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n   */\n  private get _errorMessage(): string | JSX.Element {\n    const { errorMessage = this.state.errorMessage } = this.props;\n    return errorMessage || '';\n  }\n\n  /**\n   * Renders error message based on the type of the message.\n   *\n   * - If error message is string, it will render using the built in styles.\n   * - If error message is an element, user has full control over how it's rendered.\n   */\n  private _renderErrorMessage(): JSX.Element | null {\n    const errorMessage = this._errorMessage;\n\n    return errorMessage ? (\n      typeof errorMessage === 'string' ? (\n        <p className={this._classNames.errorMessage}>\n          <span data-automation-id=\"error-message\">{errorMessage}</span>\n        </p>\n      ) : (\n        <div className={this._classNames.errorMessage} data-automation-id=\"error-message\">\n          {errorMessage}\n        </div>\n      )\n    ) : null;\n  }\n\n  /**\n   * If a custom description render function is supplied then treat description as always available.\n   * Otherwise defer to the presence of description or error message text.\n   */\n  private get _isDescriptionAvailable(): boolean {\n    const props = this.props;\n    return !!(props.onRenderDescription || props.description || this._errorMessage);\n  }\n\n  private _renderTextArea(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    const { invalid = !!this._errorMessage } = this.props;\n    const textAreaProps = getNativeProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>>(\n      this.props,\n      textAreaProperties,\n      ['defaultValue'],\n    );\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return (\n      <textarea\n        id={this._id}\n        {...textAreaProps}\n        ref={this._textElement as React.RefObject<HTMLTextAreaElement>}\n        value={this.value || ''}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={invalid}\n        aria-label={this.props.ariaLabel}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _renderInput(): JSX.Element | null {\n    const {\n      ariaLabel,\n      invalid = !!this._errorMessage,\n      onRenderPrefix,\n      onRenderSuffix,\n      prefix,\n      suffix,\n      type = 'text',\n      label,\n    } = this.props;\n\n    // build aria-labelledby list from label, prefix, and suffix\n    const labelIds = [];\n    label && labelIds.push(this._labelId);\n    (prefix !== undefined || onRenderPrefix) && labelIds.push(this._prefixId);\n    (suffix !== undefined || onRenderSuffix) && labelIds.push(this._suffixId);\n\n    const inputProps: React.InputHTMLAttributes<HTMLInputElement> & React.RefAttributes<HTMLInputElement> = {\n      type: this.state.isRevealingPassword ? 'text' : type,\n      id: this._id,\n      ...getNativeProps(this.props, inputProperties, ['defaultValue', 'type']),\n      'aria-labelledby': this.props['aria-labelledby'] || (labelIds.length > 0 ? labelIds.join(' ') : undefined),\n      ref: this._textElement as React.RefObject<HTMLInputElement>,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      'aria-label': ariaLabel,\n      'aria-describedby': this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      'aria-invalid': invalid,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur,\n    };\n\n    const defaultRender = (updatedInputProps: React.InputHTMLAttributes<HTMLInputElement>) => {\n      return <input {...updatedInputProps} />;\n    };\n    const onRenderInput = this.props.onRenderInput || defaultRender;\n    return onRenderInput(inputProps, defaultRender);\n  }\n\n  private _onRevealButtonClick = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    this.setState(prevState => ({ isRevealingPassword: !prevState.isRevealingPassword }));\n  };\n\n  private _onInputChange = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n    // which have *probably* been fixed now:\n    // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n    // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n\n    // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n    // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n\n    const element = event.target as HTMLInputElement;\n    const value = element.value;\n    // Ignore this event if any of the following are true:\n    // - the value is undefined (in case one of the IE bugs comes back)\n    // - it's a duplicate event (important since onInputChange is called twice per actual user event)\n    // - it's the same as the previous value\n    const previousValue = _getValue(this.props, this.state) || '';\n    if (value === undefined || value === this._lastChangeValue || value === previousValue) {\n      this._lastChangeValue = undefined;\n      return;\n    }\n    this._lastChangeValue = value;\n\n    this.props.onChange?.(event, value);\n\n    if (!this._isControlled) {\n      // ONLY if this is an uncontrolled component, update the displayed value.\n      // (Controlled components must update the `value` prop from `onChange`.)\n      this.setState({ uncontrolledValue: value });\n    }\n  };\n\n  private _validate(value: string | undefined): void {\n    // In case _validate is called again while validation promise is executing\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    const onGetErrorMessage = this.props.onGetErrorMessage;\n    const result = onGetErrorMessage && onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({ errorMessage: result });\n        this._notifyAfterValidate(value, result);\n      } else {\n        const currentValidation: number = ++this._lastValidation;\n\n        result.then((errorMessage: string | JSX.Element) => {\n          if (currentValidation === this._lastValidation) {\n            this.setState({ errorMessage });\n          }\n          this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  }\n\n  private _notifyAfterValidate(value: string | undefined, errorMessage: string | JSX.Element): void {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  }\n\n  private _adjustInputHeight(): void {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      const textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  }\n}\n\n/** Get the value from the given state and props (converting from number to string if needed) */\nfunction _getValue(props: ITextFieldProps, state: ITextFieldState): string | undefined {\n  const { value = state.uncontrolledValue } = props;\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n  return value;\n}\n\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\nfunction _shouldValidateAllChanges(props: ITextFieldProps): boolean {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n}\n\n// Only calculate this once across all TextFields, since will stay the same\nlet __browserNeedsRevealButton: boolean | undefined;\n\nfunction _browserNeedsRevealButton() {\n  if (typeof __browserNeedsRevealButton !== 'boolean') {\n    const win = getWindow();\n\n    if (win?.navigator) {\n      // Edge, Chromium Edge\n      const isEdge = /Edg/.test(win.navigator.userAgent || '');\n\n      __browserNeedsRevealButton = !(isIE11() || isEdge);\n    } else {\n      __browserNeedsRevealButton = true;\n    }\n  }\n  return __browserNeedsRevealButton;\n}\n"]}
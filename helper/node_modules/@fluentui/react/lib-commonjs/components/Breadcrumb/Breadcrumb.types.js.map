{"version":3,"file":"Breadcrumb.types.js","sourceRoot":"../src/","sources":["components/Breadcrumb/Breadcrumb.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { IIconProps } from '../../Icon';\nimport type { IRefObject, IRenderFunction, IComponentAs, IStyleFunctionOrObject } from '../../Utilities';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { IFocusZoneProps } from '../../FocusZone';\nimport type { ITooltipHostProps } from '../../Tooltip';\nimport type { IButtonProps } from '../../Button';\n\n/**\n * {@docCategory Breadcrumb}\n */\nexport interface IBreadcrumbData {\n  props: IBreadcrumbProps;\n  renderedItems: IBreadcrumbItem[];\n  renderedOverflowItems: IBreadcrumbItem[];\n}\n\n/**\n * {@docCategory Breadcrumb}\n */\nexport interface IBreadcrumb {\n  /**\n   * Sets focus to the first breadcrumb link.\n   */\n  focus(): void;\n}\n\n/**\n * {@docCategory Breadcrumb}\n */\nexport interface IBreadcrumbProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * Optional callback to access the `IBreadcrumb` interface. Use this instead of `ref` for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IBreadcrumb>;\n\n  /**\n   * Collection of breadcrumbs to render\n   */\n  items: IBreadcrumbItem[];\n\n  /**\n   * Optional class for the root breadcrumb element.\n   */\n  className?: string;\n\n  /**\n   * Render a custom divider in place of the default chevron `>`\n   */\n  dividerAs?: IComponentAs<IDividerAsProps>;\n\n  /**\n   * Render a custom overflow icon in place of the default icon `...`\n   */\n  onRenderOverflowIcon?: IRenderFunction<IButtonProps>;\n\n  /**\n   * Custom component for the overflow button.\n   */\n  overflowButtonAs?: IComponentAs<IButtonProps>;\n\n  /**\n   * The maximum number of breadcrumbs to display before coalescing.\n   * If not specified, all breadcrumbs will be rendered.\n   */\n  maxDisplayedItems?: number;\n\n  /** Custom render function to render each crumb. Default renders as a link. */\n  onRenderItem?: IRenderFunction<IBreadcrumbItem>;\n\n  /**\n   * Custom render function to render the content within a crumb. Default renders the text.\n   */\n  onRenderItemContent?: IRenderFunction<IBreadcrumbItem>;\n\n  /**\n   * Method that determines how to reduce the length of the breadcrumb.\n   * Return undefined to never reduce breadcrumb length.\n   */\n  onReduceData?: (data: IBreadcrumbData) => IBreadcrumbData | undefined;\n\n  /**\n   * Method that determines how to group the length of the breadcrumb.\n   * Return undefined to never increase breadcrumb length.\n   */\n  onGrowData?: (data: IBreadcrumbData) => IBreadcrumbData | undefined;\n\n  /**\n   * Aria label for the root element of the breadcrumb (which is a navigation landmark).\n   */\n  ariaLabel?: string;\n\n  /**\n   * Aria label for the overflow button.\n   */\n  overflowAriaLabel?: string;\n\n  /**\n   * Optional index where overflow items will be collapsed.\n   * @default 0\n   */\n  overflowIndex?: number;\n\n  styles?: IStyleFunctionOrObject<IBreadcrumbStyleProps, IBreadcrumbStyles>;\n  theme?: ITheme;\n\n  /**\n   * Extra props for the root FocusZone.\n   */\n  focusZoneProps?: IFocusZoneProps;\n\n  /**\n   * Extra props for the TooltipHost which wraps each breadcrumb item.\n   */\n  tooltipHostProps?: ITooltipHostProps;\n}\n\n/**\n * {@docCategory Breadcrumb}\n */\nexport interface IBreadcrumbItem extends React.AllHTMLAttributes<HTMLElement> {\n  /**\n   * Text to display in the breadcrumb item.\n   */\n  text: string;\n\n  /**\n   * Arbitrary unique string associated with the breadcrumb item.\n   */\n  key: string;\n\n  /**\n   * Callback for when the breadcrumb item is selected.\n   */\n  onClick?: (ev?: React.MouseEvent<HTMLElement>, item?: IBreadcrumbItem) => void;\n\n  /**\n   * URL to navigate to when this breadcrumb item is clicked.\n   * If provided, the breadcrumb will be rendered as a link.\n   */\n  href?: string;\n\n  /**\n   * Whether this is the breadcrumb item the user is currently navigated to.\n   * If true, `aria-current=\"page\"` will be applied to this breadcrumb item.\n   */\n  isCurrentItem?: boolean;\n\n  /**\n   * A function to render the outer content of the crumb (the link).\n   */\n  onRender?: IRenderFunction<IBreadcrumbItem>;\n\n  /**\n   * A function to render the inner content of the crumb (the text inside the link).\n   */\n  onRenderContent?: IRenderFunction<IBreadcrumbItem>;\n\n  /**\n   * Optional prop to render the item as a heading of your choice.\n   *\n   * You can also use this to force items to render as links instead of buttons (by default,\n   * any item with a `href` renders as a link, and any item without a `href` renders as a button).\n   * This is not generally recommended because it may prevent activating the link using the keyboard.\n   */\n  as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'a';\n\n  /**\n   * Optional role for the breadcrumb item (which renders as a button by default)\n   */\n  role?: string;\n}\n\n/**\n * {@docCategory Breadcrumb}\n */\nexport interface IDividerAsProps extends IIconProps {\n  /**\n   * Breadcrumb item to left of the divider to be passed for custom rendering.\n   * For overflowed items, it will be last item in the list.\n   */\n  item?: IBreadcrumbItem;\n}\n\n/**\n * {@docCategory Breadcrumb}\n */\nexport interface IBreadcrumbStyleProps {\n  className?: string;\n  theme: ITheme;\n}\n\n/**\n * {@docCategory Breadcrumb}\n */\nexport interface IBreadcrumbStyles {\n  root: IStyle;\n  list: IStyle;\n  listItem: IStyle;\n  chevron: IStyle;\n  overflow: IStyle;\n  overflowButton: IStyle;\n  itemLink: IStyle;\n  item: IStyle;\n}\n"]}
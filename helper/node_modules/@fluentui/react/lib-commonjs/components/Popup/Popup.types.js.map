{"version":3,"file":"Popup.types.js","sourceRoot":"../src/","sources":["components/Popup/Popup.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\n\n/**\n * {@docCategory Popup}\n */\nexport interface IPopupProps extends React.HTMLAttributes<HTMLDivElement>, React.RefAttributes<HTMLDivElement> {\n  /**\n   * Aria role for popup\n   */\n  role?: string;\n\n  /**\n   * Accessible label text for the popup.\n   */\n  ariaLabel?: string;\n\n  /**\n   *  Defines the element id referencing the element containing label text for popup.\n   */\n  ariaLabelledBy?: string;\n\n  /**\n   * Defines the element id referencing the element containing the description for the popup.\n   */\n  ariaDescribedBy?: string;\n\n  /**\n   * A callback function for when the popup is dismissed from the close button or light dismiss. If provided, will\n   * handle escape key press and call this. The event will be stopped/canceled.\n   */\n  onDismiss?: (ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement> | KeyboardEvent) => any;\n\n  /**\n   *  Optional class name for the root popup div.\n   */\n  className?: string;\n\n  /**\n   * If true, when this component is unmounted, focus will be restored to the element that had focus when the component\n   * first mounted.\n   * @defaultvalue true\n   * @deprecated use restoreFocus callback instead\n   */\n  shouldRestoreFocus?: boolean;\n\n  /**\n   * Called when the component is unmounting, and focus needs to be restored. If this is provided,\n   * focus will not be restored automatically, and you'll need to call `params.originalElement.focus()`.\n   */\n  onRestoreFocus?: (params: IPopupRestoreFocusParams) => void;\n\n  /**\n   * Puts aria-hidden=true on all non-ancestors of the current popup, for screen readers.\n   * @defaultvalue true\n   * @deprecated Setting this to `false` is deprecated since it breaks modal behavior for some screen readers.\n   * It will not be supported in future versions of the library.\n   */\n  enableAriaHiddenSiblings?: boolean;\n}\n\n/**\n * Parameters passed to `onRestoreFocus` callback of `Popup` and related components.\n * {@docCategory Popup}\n */\nexport interface IPopupRestoreFocusParams {\n  /** Element the underlying Popup believes focus should go to */\n  originalElement?: HTMLElement | Window | null;\n  /** Whether the popup currently contains focus */\n  containsFocus: boolean;\n  /** Whether the document the popup belongs to contains focus (or false if unknown) */\n  documentContainsFocus: boolean;\n}\n"]}
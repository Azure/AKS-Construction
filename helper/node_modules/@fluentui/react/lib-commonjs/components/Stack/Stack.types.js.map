{"version":3,"file":"Stack.types.js","sourceRoot":"../src/","sources":["components/Stack/Stack.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type {\n  IComponentStyles,\n  IHTMLSlot,\n  ISlotProp,\n  IComponent,\n  IStyleableComponentProps,\n  ISlottableProps,\n} from '@fluentui/foundation-legacy';\n\n/**\n * Defines a type made by the union of the different values that the align-items and justify-content flexbox\n * properties can take.\n * {@docCategory Stack}\n */\nexport type Alignment =\n  | 'start'\n  | 'end'\n  | 'center'\n  | 'space-between'\n  | 'space-around'\n  | 'space-evenly'\n  | 'baseline'\n  | 'stretch';\n\n/**\n * {@docCategory Stack}\n */\nexport type IStackComponent = IComponent<IStackProps, IStackTokens, IStackStyles>;\n\n// The following two types are redundant with IStackComponent but are needed until TS function return widening issue\n// is resolved: https://github.com/Microsoft/TypeScript/issues/241\n// For now, these helper types can be used to provide return type safety when specifying tokens and styles functions.\n\n/**\n * {@docCategory Stack}\n */\nexport type IStackTokenReturnType = ReturnType<Extract<IStackComponent['tokens'], Function>>;\n\n/**\n * {@docCategory Stack}\n */\nexport type IStackStylesReturnType = ReturnType<Extract<IStackComponent['styles'], Function>>;\n\n/**\n * {@docCategory Stack}\n */\nexport type IStackSlot = ISlotProp<IStackProps>;\n\n/**\n * {@docCategory Stack}\n */\nexport interface IStackSlots {\n  /**\n   * Defines root slot of the component.\n   */\n  root?: IHTMLSlot;\n\n  /**\n   * Defines a slot that is placed inside the root slot in order to achieve wrapping. Only used when the wrap\n   * property is set to true.\n   */\n  inner?: IHTMLSlot;\n}\n\n/**\n * {@docCategory Stack}\n */\nexport interface IStackProps\n  extends ISlottableProps<IStackSlots>,\n    IStyleableComponentProps<IStackProps, IStackTokens, IStackStyles>,\n    React.HTMLAttributes<HTMLElement> {\n  /**\n   * Defines how to render the Stack.\n   */\n  as?: React.ElementType<React.HTMLAttributes<HTMLElement>>;\n\n  /**\n   * Defines whether to render Stack children horizontally.\n   * @defaultvalue false\n   */\n  horizontal?: boolean;\n\n  /**\n   * Defines whether to render Stack children in the opposite direction (bottom-to-top if it's a vertical Stack and\n   * right-to-left if it's a horizontal Stack).\n   * @defaultvalue false\n   */\n  reversed?: boolean;\n\n  /**\n   * Defines how to align Stack children horizontally (along the x-axis).\n   */\n  horizontalAlign?: Alignment;\n\n  /**\n   * Defines how to align Stack children vertically (along the y-axis).\n   */\n  verticalAlign?: Alignment;\n\n  /**\n   * Defines whether the Stack should take up 100% of the height of its parent.\n   * This property is required to be set to true when using the `grow` flag on children in vertical oriented Stacks.\n   * Stacks are rendered as block elements and grow horizontally to the container already.\n   * @defaultvalue false\n   */\n  verticalFill?: boolean;\n\n  /**\n   * Defines whether Stack children should not shrink to fit the available space.\n   * @defaultvalue false\n   */\n  disableShrink?: boolean;\n\n  /**\n   * Defines how much to grow the Stack in proportion to its siblings.\n   */\n  grow?: boolean | number | 'inherit' | 'initial' | 'unset';\n\n  /**\n   * Defines the spacing between Stack children.\n   * The property is specified as a value for 'row gap', followed optionally by a value for 'column gap'.\n   * If 'column gap' is omitted, it's set to the same value as 'row gap'.\n   * @deprecated Use `tokens.childrenGap` instead.\n   */\n  gap?: number | string;\n\n  /**\n   * Defines the maximum width that the Stack can take.\n   * @deprecated Use `tokens.maxWidth` instead.\n   */\n  maxWidth?: number | string;\n\n  /**\n   * Defines the maximum height that the Stack can take.\n   * @deprecated Use `tokens.maxHeight` instead.\n   */\n  maxHeight?: number | string;\n\n  /**\n   * Defines the inner padding of the Stack.\n   * @deprecated Use `tokens.padding` instead.\n   */\n  padding?: number | string;\n\n  /**\n   * Defines whether Stack children should wrap onto multiple rows or columns when they are about to overflow\n   * the size of the Stack.\n   * @defaultvalue false\n   */\n  wrap?: boolean;\n\n  /**\n   * Defines if scoped style selectors are enabled for the Stack component, which greatly helps in style recalculation\n   * performance, but requires children of the Stack to be able to accept a className prop (excluding Fragments).\n   * @defaultvalue false\n   */\n  enableScopedSelectors?: boolean;\n}\n\n/**\n * {@docCategory Stack}\n */\nexport interface IStackTokens {\n  /**\n   * Defines the spacing between Stack children.\n   * The property is specified as a value for 'row gap', followed optionally by a value for 'column gap'.\n   * If 'column gap' is omitted, it's set to the same value as 'row gap'.\n   */\n  childrenGap?: number | string;\n\n  /**\n   * Defines a maximum height for the Stack.\n   */\n  maxHeight?: number | string;\n\n  /**\n   * Defines a maximum width for the Stack.\n   */\n  maxWidth?: number | string;\n\n  /**\n   * Defines the padding to be applied to the Stack contents relative to its border.\n   */\n  padding?: number | string;\n}\n\n/**\n * {@docCategory Stack}\n */\nexport type IStackStyles = IComponentStyles<IStackSlots>;\n"]}
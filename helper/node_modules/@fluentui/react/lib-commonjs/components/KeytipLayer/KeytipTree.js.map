{"version":3,"file":"KeytipTree.js","sourceRoot":"../src/","sources":["components/KeytipLayer/KeytipTree.ts"],"names":[],"mappings":"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","sourcesContent":["import { find, isElementVisibleAndNotHidden, values } from '../../Utilities';\nimport { ktpTargetFromSequences, mergeOverflows, sequencesToID } from '../../utilities/keytips/KeytipUtils';\nimport { KTP_LAYER_ID } from '../../utilities/keytips/KeytipConstants';\nimport type { IKeytipProps } from '../../Keytip';\nimport type { IKeytipTreeNode } from './IKeytipTreeNode';\n\n/**\n * This class is responsible for handling the parent/child relationships between keytips\n */\nexport class KeytipTree {\n  public currentKeytip?: IKeytipTreeNode;\n  public root: IKeytipTreeNode;\n  public nodeMap: { [nodeId: string]: IKeytipTreeNode } = {};\n\n  /**\n   * KeytipTree constructor\n   */\n  constructor() {\n    // Root has no keytipSequence\n    this.root = {\n      id: KTP_LAYER_ID,\n      children: [],\n      parent: '',\n      keySequences: [],\n    };\n    this.nodeMap[this.root.id] = this.root;\n  }\n\n  /**\n   * Add a keytip node to this KeytipTree\n   *\n   * @param keytipProps - Keytip to add to the Tree\n   * @param uniqueID - Unique ID for this keytip\n   * @param persisted - T/F if this keytip should be marked as persisted\n   */\n  public addNode(keytipProps: IKeytipProps, uniqueID: string, persisted?: boolean): void {\n    const fullSequence = this._getFullSequence(keytipProps);\n    const nodeID = sequencesToID(fullSequence);\n\n    // Take off the last item to calculate the parent sequence\n    fullSequence.pop();\n    // Parent ID is the root if there aren't any more sequences\n    const parentID = this._getParentID(fullSequence);\n\n    // Create node and add to map\n    const node = this._createNode(nodeID, parentID, [], keytipProps, persisted);\n    this.nodeMap[uniqueID] = node;\n\n    // Try to add self to parents children\n    const parents = this.getNodes([parentID]);\n    parents.forEach(parent => parent.children.push(nodeID));\n  }\n\n  /**\n   * Updates a node in the tree\n   *\n   * @param keytipProps - Keytip props to update\n   * @param uniqueID - Unique ID for this keytip\n   */\n  public updateNode(keytipProps: IKeytipProps, uniqueID: string): void {\n    const fullSequence = this._getFullSequence(keytipProps);\n    const nodeID = sequencesToID(fullSequence);\n\n    // Take off the last item to calculate the parent sequence\n    fullSequence.pop();\n    // Parent ID is the root if there aren't any more sequences\n    const parentID = this._getParentID(fullSequence);\n    const node = this.nodeMap[uniqueID];\n    const prevParent = node.parent;\n    if (node) {\n      // Fix parent nodes if needed\n      if (prevParent !== parentID) {\n        // If parent has changed, remove child from old parent\n        this._removeChildFromParents(prevParent, node.id);\n      }\n      if (node.id !== nodeID) {\n        // If the ID of the node has changed, update node's parent's array of children with new ID\n        const parents = this.getNodes([parentID]);\n        parents.forEach(parent => {\n          const index = parent.children.indexOf(node.id);\n          index >= 0 ? (parent.children[index] = nodeID) : parent.children.push(nodeID);\n        });\n      }\n\n      // Update values\n      node.id = nodeID;\n      node.keySequences = keytipProps.keySequences;\n      node.overflowSetSequence = keytipProps.overflowSetSequence;\n      node.onExecute = keytipProps.onExecute;\n      node.onReturn = keytipProps.onReturn;\n      node.hasDynamicChildren = keytipProps.hasDynamicChildren;\n      node.hasMenu = keytipProps.hasMenu;\n      node.parent = parentID;\n      node.disabled = keytipProps.disabled;\n    }\n  }\n\n  /**\n   * Removes a node from the KeytipTree\n   *\n   * @param sequence - full string of the node to remove\n   */\n  public removeNode(keytipProps: IKeytipProps, uniqueID: string): void {\n    const fullSequence = this._getFullSequence(keytipProps);\n    const nodeID = sequencesToID(fullSequence);\n\n    // Take off the last sequence to calculate the parent ID\n    fullSequence.pop();\n\n    // Parent ID is the root if there aren't any more sequences\n    this._removeChildFromParents(this._getParentID(fullSequence), nodeID);\n\n    if (this.nodeMap[uniqueID]) {\n      // Remove the node from the nodeMap\n      delete this.nodeMap[uniqueID];\n    }\n  }\n\n  /**\n   * Searches the currentKeytip's children to exactly match a sequence. Will not match disabled nodes but\n   * will match persisted nodes\n   *\n   * @param keySequence - string to match\n   * @param currentKeytip - The keytip whose children will try to match\n   * @returns The node that exactly matched the keySequence, or undefined if none matched\n   */\n  public getExactMatchedNode(keySequence: string, currentKeytip: IKeytipTreeNode): IKeytipTreeNode | undefined {\n    const possibleNodes = this.getNodes(currentKeytip.children);\n    const matchingNodes = possibleNodes.filter((node: IKeytipTreeNode) => {\n      return this._getNodeSequence(node) === keySequence && !node.disabled;\n    });\n\n    // If we found no nodes, we are done\n    if (matchingNodes.length === 0) {\n      return undefined;\n    }\n\n    // Since the matching nodes all have the same key sequence,\n    // Grab the first one build the correct selector\n    const node = matchingNodes[0];\n\n    // If we have exactly one node, return it\n    if (matchingNodes.length === 1) {\n      return node;\n    }\n\n    // Get the potential target elements based on a selector from the sequences\n    const keySequences = node.keySequences;\n    const overflowSetSequence = node.overflowSetSequence;\n    const fullKeySequences = overflowSetSequence ? mergeOverflows(keySequences, overflowSetSequence) : keySequences;\n    const keytipTargetSelector = ktpTargetFromSequences(fullKeySequences);\n    const potentialTargetElements = document.querySelectorAll(keytipTargetSelector);\n\n    // If we have less nodes than the potential target elements,\n    // we won't be able to map element to node, return the first node.\n    // Note, the number of nodes could be more than the number of potential\n    // target elements, if an OverflowSet is involved\n    if (matchingNodes.length < potentialTargetElements.length) {\n      return node;\n    }\n\n    // Attempt to find the node that corresponds to the first visible/non-hidden element\n    const matchingIndex = Array.from(potentialTargetElements).findIndex((element: HTMLElement) =>\n      isElementVisibleAndNotHidden(element),\n    );\n    if (matchingIndex !== -1) {\n      return matchingNodes[matchingIndex];\n    }\n\n    // We did not find any visible elements associated with any of the nodes.\n    // We may be dealing with a keytip that is a submenu in an OverflowSet.\n    // Worst case, fall back to the first node returned\n    const overflowNode = matchingNodes.find(matchingNode => matchingNode.hasOverflowSubMenu);\n    return overflowNode || node;\n  }\n\n  /**\n   * Searches the currentKeytip's children to find nodes that start with the given sequence. Will not match\n   * disabled nodes but will match persisted nodes\n   *\n   * @param keySequence - string to partially match\n   * @param currentKeytip - The keytip whose children will try to partially match\n   * @returns List of tree nodes that partially match the given sequence\n   */\n  public getPartiallyMatchedNodes(keySequence: string, currentKeytip: IKeytipTreeNode): IKeytipTreeNode[] {\n    // Get children that are persisted\n    const possibleNodes = this.getNodes(currentKeytip.children);\n    return possibleNodes.filter((node: IKeytipTreeNode) => {\n      return this._getNodeSequence(node).indexOf(keySequence) === 0 && !node.disabled;\n    });\n  }\n\n  /**\n   * Get the non-persisted children of the give node\n   * If no node is given, will use the 'currentKeytip'\n   *\n   * @param node - Node to get the children for\n   * @returns List of node IDs that are the children of the node\n   */\n  public getChildren(node?: IKeytipTreeNode): string[] {\n    if (!node) {\n      node = this.currentKeytip;\n      if (!node) {\n        return [];\n      }\n    }\n    const children = node.children;\n    return Object.keys(this.nodeMap).reduce((nodes: string[], key: string): string[] => {\n      if (children.indexOf(this.nodeMap[key].id) >= 0 && !this.nodeMap[key].persisted) {\n        nodes.push(this.nodeMap[key].id);\n      }\n      return nodes;\n    }, []);\n  }\n\n  /**\n   * Gets all nodes from their IDs\n   *\n   * @param ids - List of keytip IDs\n   * @returns Array of nodes that match the given IDs, can be empty\n   */\n  public getNodes(ids: string[]): IKeytipTreeNode[] {\n    return Object.keys(this.nodeMap).reduce((nodes: IKeytipTreeNode[], key: string): IKeytipTreeNode[] => {\n      if (ids.indexOf(this.nodeMap[key].id) >= 0) {\n        nodes.push(this.nodeMap[key]);\n      }\n      return nodes;\n    }, []);\n  }\n\n  /**\n   * Gets a single node from its ID\n   *\n   * @param id - ID of the node to get\n   * @returns Node with the given ID, if found\n   */\n  public getNode(id: string): IKeytipTreeNode | undefined {\n    const nodeMapValues = values<IKeytipTreeNode>(this.nodeMap);\n    return find(nodeMapValues, (node: IKeytipTreeNode): boolean => {\n      return node.id === id;\n    });\n  }\n\n  /**\n   * Tests if the currentKeytip in this.keytipTree is the parent of 'keytipProps'\n   *\n   * @param keytipProps - Keytip to test the parent for\n   * @returns T/F if the currentKeytip is this keytipProps' parent\n   */\n  public isCurrentKeytipParent(keytipProps: IKeytipProps): boolean {\n    if (this.currentKeytip) {\n      let fullSequence = [...keytipProps.keySequences];\n      if (keytipProps.overflowSetSequence) {\n        fullSequence = mergeOverflows(fullSequence, keytipProps.overflowSetSequence);\n      }\n      // Take off the last sequence to calculate the parent ID\n      fullSequence.pop();\n      // Parent ID is the root if there aren't any more sequences\n      const parentID = fullSequence.length === 0 ? this.root.id : sequencesToID(fullSequence);\n      let matchesCurrWithoutOverflow = false;\n      if (this.currentKeytip.overflowSetSequence) {\n        const currKeytipIdWithoutOverflow = sequencesToID(this.currentKeytip.keySequences);\n        matchesCurrWithoutOverflow = currKeytipIdWithoutOverflow === parentID;\n      }\n      return matchesCurrWithoutOverflow || this.currentKeytip.id === parentID;\n    }\n    return false;\n  }\n\n  private _getParentID(fullSequence: string[]): string {\n    return fullSequence.length === 0 ? this.root.id : sequencesToID(fullSequence);\n  }\n\n  private _getFullSequence(keytipProps: IKeytipProps): string[] {\n    let fullSequence = [...keytipProps.keySequences];\n    if (keytipProps.overflowSetSequence) {\n      fullSequence = mergeOverflows(fullSequence, keytipProps.overflowSetSequence);\n    }\n    return fullSequence;\n  }\n\n  private _getNodeSequence(node: IKeytipTreeNode): string {\n    let fullSequence = [...node.keySequences];\n    if (node.overflowSetSequence) {\n      fullSequence = mergeOverflows(fullSequence, node.overflowSetSequence);\n    }\n    return fullSequence[fullSequence.length - 1];\n  }\n\n  private _createNode(\n    id: string,\n    parentId: string,\n    children: string[],\n    keytipProps: IKeytipProps,\n    persisted?: boolean,\n  ): IKeytipTreeNode {\n    const {\n      keySequences,\n      hasDynamicChildren,\n      overflowSetSequence,\n      hasMenu,\n      onExecute,\n      onReturn,\n      disabled,\n      hasOverflowSubMenu,\n    } = keytipProps;\n    const node = {\n      id,\n      keySequences,\n      overflowSetSequence,\n      parent: parentId,\n      children,\n      onExecute,\n      onReturn,\n      hasDynamicChildren,\n      hasMenu,\n      disabled,\n      persisted,\n      hasOverflowSubMenu,\n    };\n    node.children = Object.keys(this.nodeMap).reduce((array: string[], nodeMapKey: string): string[] => {\n      if (this.nodeMap[nodeMapKey].parent === id) {\n        array.push(this.nodeMap[nodeMapKey].id);\n      }\n      return array;\n    }, []);\n    return node;\n  }\n\n  private _removeChildFromParents(parentID: string, childID: string): void {\n    const parents = this.getNodes([parentID]);\n    parents.forEach(parent => {\n      const childIndex = parent.children.indexOf(childID);\n      if (childIndex >= 0) {\n        parent.children.splice(childIndex, 1);\n      }\n    });\n  }\n}\n"]}
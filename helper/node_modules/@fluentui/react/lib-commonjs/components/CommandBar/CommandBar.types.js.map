{"version":3,"file":"CommandBar.types.js","sourceRoot":"../src/","sources":["components/CommandBar/CommandBar.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { IContextualMenuItem } from '../../ContextualMenu';\nimport type { IButtonStyles, IButtonProps } from '../../Button';\nimport type { ICommandBarData } from './CommandBar.base';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { IRefObject, IStyleFunctionOrObject, IComponentAs } from '../../Utilities';\nimport type { ITooltipHostProps } from '../../Tooltip';\nimport type { IResizeGroupProps } from '../ResizeGroup/ResizeGroup.types';\n\n/**\n * {@docCategory CommandBar}\n */\nexport interface ICommandBar {\n  /**\n   * Sets focus to the active command in the list.\n   */\n  focus(): void;\n\n  /**\n   * Remeasures the available space.\n   */\n  remeasure(): void;\n}\n\n/**\n * {@docCategory CommandBar}\n */\nexport interface ICommandBarProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Optional callback to access the ICommandBar interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ICommandBar>;\n\n  /**\n   * Items to render. ICommandBarItemProps extends IContextualMenuItem.\n   */\n  items: ICommandBarItemProps[];\n\n  /**\n   * Items to render on the right side (or left, in RTL). ICommandBarItemProps extends IContextualMenuItem.\n   */\n  farItems?: ICommandBarItemProps[];\n\n  /**\n   * Default items to have in the overflow menu. ICommandBarItemProps extends IContextualMenuItem.\n   */\n  overflowItems?: ICommandBarItemProps[];\n\n  /**\n   * Props to be passed to overflow button.\n   * If `menuProps` are passed through this prop, any items provided will be prepended to any\n   * computed overflow items.\n   */\n  overflowButtonProps?: IButtonProps;\n\n  /**\n   * Custom component for the ResizeGroup.\n   */\n  resizeGroupAs?: IComponentAs<IResizeGroupProps>;\n\n  /**\n   * Custom component for the overflow button.\n   */\n  overflowButtonAs?: IComponentAs<IButtonProps>;\n\n  /**\n   * Custom component for the near and far item buttons. Not used for overflow menu items.\n   */\n  buttonAs?: IComponentAs<IButtonProps>;\n\n  /**\n   * When true, items will be 'shifted' off the front of the array when reduced, and unshifted during grow.\n   */\n  shiftOnReduce?: boolean;\n\n  /**\n   * Custom function to reduce data if items do not fit in a given space.\n   * Return `undefined` if no more steps can be taken to avoid an infinite loop.\n   */\n  onReduceData?: (data: ICommandBarData) => ICommandBarData | undefined;\n\n  /**\n   * Custom function to grow data if items are too small for the given space.\n   * Return `undefined` if no more steps can be taken to avoid an infinite loop.\n   */\n  onGrowData?: (data: ICommandBarData) => ICommandBarData | undefined;\n\n  /**\n   * Callback invoked when data has been reduced.\n   */\n  onDataReduced?: (movedItem: ICommandBarItemProps) => void;\n\n  /**\n   * Callback invoked when data has been grown.\n   */\n  onDataGrown?: (movedItem: ICommandBarItemProps) => void;\n\n  /**\n   * Function to be called every time data is rendered. It provides the data that was actually rendered.\n   * A use case would be adding telemetry when a particular control is shown in an overflow or dropped\n   * as a result of `onReduceData`, or to count the number of renders that an implementation of\n   * `onReduceData` triggers.\n   */\n  dataDidRender?: (renderedData: any) => void;\n\n  /**\n   * Additional css class to apply to the command bar\n   */\n  className?: string;\n\n  /**\n   * Accessibility text to be read by the screen reader when the user's\n   * focus enters the command bar. The screen reader will read this text\n   * after reading information about the first focusable item in the command bar.\n   */\n  ariaLabel?: string;\n\n  /**\n   * When using farItems, primaryGroupAriaLabel and farItemsGroupAriaLabel function as\n   * labels for each group that are exposed to screen reader users.\n   * This helps clarify when a screen reader user is entering or leaving each group.\n   */\n  primaryGroupAriaLabel?: string;\n\n  /**\n   * When using farItems, primaryGroupAriaLabel and farItemsGroupAriaLabel function as\n   * labels for each group that are exposed to screen reader users.\n   * This helps clarify when a screen reader user is entering or leaving each group.\n   */\n  farItemsGroupAriaLabel?: string;\n\n  /**\n   * Customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ICommandBarStyleProps, ICommandBarStyles>;\n\n  /**\n   * Theme provided by HOC.\n   */\n  theme?: ITheme;\n}\n\n/**\n * ICommandBarItemProps extends IContextualMenuItem and adds a few CommandBar-specific props.\n * {@docCategory CommandBar}\n */\nexport interface ICommandBarItemProps extends IContextualMenuItem {\n  /**\n   * Show only an icon for this item, not text.\n   * Does not apply if item is in the overflow.\n   * @defaultvalue false\n   */\n  iconOnly?: boolean;\n\n  /**\n   * Props for the tooltip when in `iconOnly` mode.\n   */\n  tooltipHostProps?: ITooltipHostProps;\n\n  /**\n   * Custom styles for individual button\n   */\n  buttonStyles?: IButtonStyles;\n\n  /**\n   * A custom cache key to be used for this item. If `cacheKey` is changed, the cache will invalidate.\n   * Defaults to `key` value.\n   */\n  cacheKey?: string;\n\n  /**\n   * Context under which the item is being rendered.\n   * This value is mutated by the CommandBar and is useful for adjusting the `onRender` function.\n   */\n  renderedInOverflow?: boolean;\n\n  /**\n   * Method to override the render of the individual command bar button.\n   * Not used when item is rendered in overflow.\n   * @defaultvalue CommandBarButton\n   */\n  commandBarButtonAs?: IComponentAs<ICommandBarItemProps>;\n}\n\n/**\n * {@docCategory CommandBar}\n */\nexport interface ICommandBarStyleProps {\n  theme: ITheme;\n  className?: string;\n}\n\n/**\n * {@docCategory CommandBar}\n */\nexport interface ICommandBarStyles {\n  root?: IStyle;\n  primarySet?: IStyle;\n  secondarySet?: IStyle;\n}\n"]}
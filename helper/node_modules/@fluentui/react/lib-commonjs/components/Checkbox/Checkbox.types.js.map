{"version":3,"file":"Checkbox.types.js","sourceRoot":"../src/","sources":["components/Checkbox/Checkbox.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { IStyle, ITheme } from '@fluentui/style-utilities';\nimport type { IRefObject, IRenderFunction, IStyleFunctionOrObject } from '@fluentui/utilities';\nimport type { IIconProps } from '../Icon/Icon.types';\n\n/**\n * Checkbox class interface.\n * {@docCategory Checkbox}\n */\nexport interface ICheckbox {\n  /** Gets the current indeterminate state. */\n  indeterminate: boolean;\n\n  /** Gets the current checked state. */\n  checked: boolean;\n\n  /** Sets focus to the checkbox. */\n  focus: () => void;\n}\n\n/**\n * Checkbox properties.\n * {@docCategory Checkbox}\n */\nexport interface ICheckboxProps extends React.RefAttributes<HTMLDivElement> {\n  /**\n   * Optional callback to access the `ICheckbox` interface. Use this instead of `ref` for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ICheckbox>;\n\n  /**\n   * Class name to provide on the root element, in addition to the `ms-Checkbox` class.\n   */\n  className?: string;\n\n  /**\n   * Checked state. Mutually exclusive with `defaultChecked`. Use this if you control the checked state at a higher\n   * level and plan to pass in the correct value based on handling `onChange` events and re-rendering.\n   */\n  checked?: boolean;\n\n  /**\n   * Default checked state. Mutually exclusive with `checked`. Use this if you want an uncontrolled component,\n   * meaning the Checkbox instance maintains its own state.\n   */\n  defaultChecked?: boolean;\n\n  /**\n   * Label to display next to the checkbox.\n   */\n  label?: string;\n\n  /**\n   * Disabled state of the checkbox.\n   */\n  disabled?: boolean;\n\n  /**\n   * Required state of the checkbox.\n   */\n  required?: boolean;\n\n  /**\n   * Callback that is called when the checked value has changed.\n   */\n  onChange?: (ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => void;\n\n  /**\n   * Title text applied to the root element and the hidden checkbox input.\n   * (Use `label` instead for the visible label.)\n   */\n  title?: string;\n\n  /**\n   * ID for the checkbox input.\n   */\n  id?: string;\n\n  /**\n   * Name for the checkbox input. This is intended for use with forms and NOT displayed in the UI.\n   */\n  name?: string;\n\n  /**\n   * Optional props that will be applied to the input element, *before* other props are applied.\n   * Note that if you provide, for example, `disabled` as well as `inputProps.disabled`, the\n   * top-level prop (`disabled` in this case) will take precedence.\n   *\n   * Including `data-*` props in `inputProps` is supported but currently requires casting since\n   * TS 3.7 doesn't provide a way to allow all keys with a certain prefix.\n   */\n  inputProps?: React.ButtonHTMLAttributes<HTMLElement | HTMLButtonElement>;\n\n  /**\n   * Determines whether the checkbox should be shown before the label (`start`) or after (`end`).\n   * @defaultvalue 'start'\n   */\n  boxSide?: 'start' | 'end';\n\n  /**\n   * Theme provided by HOC.\n   */\n  theme?: ITheme;\n\n  /**\n   * Accessible label for the checkbox.\n   */\n  ariaLabel?: string;\n\n  /**\n   * ID for element that contains label information for the checkbox.\n   */\n  ariaLabelledBy?: string;\n\n  /**\n   * ID for element that provides extended information for the checkbox.\n   */\n  ariaDescribedBy?: string;\n\n  /**\n   * The position in the parent set (if in a set) for `aria-posinset`.\n   */\n  ariaPositionInSet?: number;\n\n  /**\n   * The total size of the parent set (if in a set) for `aria-setsize`.\n   */\n  ariaSetSize?: number;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ICheckboxStyleProps, ICheckboxStyles>;\n\n  /**\n   * Custom render function for the label.\n   */\n  onRenderLabel?: IRenderFunction<ICheckboxProps>;\n\n  /**\n   * Custom icon props for the check mark rendered by the checkbox\n   */\n  checkmarkIconProps?: IIconProps;\n\n  /**\n   * Optional controlled indeterminate visual state for checkbox. Setting indeterminate state takes visual precedence\n   * over `checked` or `defaultChecked` props given but does not affect checked state.\n   *\n   * This should not be a toggleable state. On load, the checkbox will receive indeterminate visual state.\n   * After the first user click, your supplied `onChange` callback should remove the indeterminate state\n   * (without modifying the checked state), exposing the true state of the checkbox.\n   */\n  indeterminate?: boolean;\n\n  /**\n   * Optional uncontrolled indeterminate visual state for checkbox. Setting indeterminate state takes visual precedence\n   * over `checked` or `defaultChecked` props given but does not affect checked state.\n   *\n   * This should not be a toggleable state. On load, the checkbox will receive indeterminate visual state.\n   * After the user's first click, it will be removed, exposing the true state of the checkbox.\n   */\n  defaultIndeterminate?: boolean;\n}\n\n/**\n * {@docCategory Checkbox}\n */\nexport interface ICheckboxStyleProps {\n  theme: ITheme;\n  className?: string;\n  disabled?: boolean;\n  checked?: boolean;\n  reversed?: boolean;\n  indeterminate?: boolean;\n  isUsingCustomLabelRender: boolean;\n}\n\n/**\n * {@docCategory Checkbox}\n */\nexport interface ICheckboxStyles {\n  /**\n   * Style for the root element (a button) of the checkbox component in the default enabled/unchecked state.\n   */\n  root?: IStyle;\n\n  /**\n   * INTERNAL: This is mostly an internal implementation detail which you should avoid styling.\n   * This refers to the `<input type=\"checkbox\">` element that is typically hidden and not rendered on screen.\n   */\n  input?: IStyle;\n\n  /**\n   * Style for the label part (contains the customized checkbox + text) when enabled.\n   */\n  label?: IStyle;\n\n  /**\n   * Style for checkbox in its default unchecked/enabled state.\n   */\n  checkbox?: IStyle;\n\n  /**\n   * Style for the checkmark in the default enabled/unchecked state.\n   */\n  checkmark?: IStyle;\n\n  /**\n   * Style for text appearing with the checkbox in its default enabled state.\n   */\n  text?: IStyle;\n}\n"]}
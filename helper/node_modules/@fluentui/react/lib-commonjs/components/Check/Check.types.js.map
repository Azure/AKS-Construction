{"version":3,"file":"Check.types.js","sourceRoot":"../src/","sources":["components/Check/Check.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\n\n/**\n * {@docCategory Check}\n */\nexport interface ICheckProps extends React.RefAttributes<HTMLDivElement> {\n  /**\n   * Gets the component ref.\n   */\n  componentRef?: IRefObject<ICheckProps>;\n\n  /**\n   * Whether the component is currently checked.\n   * @defaultvalue false\n   */\n  checked?: boolean;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules\n   */\n  styles?: IStyleFunctionOrObject<ICheckStyleProps, ICheckStyles>;\n\n  /**\n   * @deprecated Not used\n   */\n  alwaysShowCheck?: boolean;\n\n  /**\n   * Theme provided by HOC.\n   */\n  theme?: ITheme;\n\n  /**\n   * Additional css class to apply to the Check\n   */\n  className?: string;\n\n  /**\n   * Whether to use fast icon components. The icons can't be targeted by customization but are\n   * still customizable via class names.\n   * @defaultvalue true\n   */\n  useFastIcons?: boolean;\n}\n\n/**\n * {@docCategory Check}\n */\nexport type ICheckStyleProps = Required<Pick<ICheckProps, 'theme'>> &\n  Pick<ICheckProps, 'className' | 'checked'> & {\n    /**\n     * Custom height/width for the checkbox.\n     * @defaultvalue '18px'\n     */\n    height?: string;\n\n    /**\n     * Custom height/width for the checkbox.\n     * @defaultvalue '18px'\n     * @deprecated Use `height`\n     */\n    checkBoxHeight?: string;\n  };\n\n/**\n * {@docCategory Check}\n */\nexport interface ICheckStyles {\n  /**\n   * Style for the root element.\n   */\n  root: IStyle;\n\n  /**\n   * The 'check' icon styles.\n   */\n  check: IStyle;\n\n  /**\n   * The 'circle' icon styles.\n   */\n  circle: IStyle;\n\n  /**\n   * Check host style\n   * @deprecated Not used directly within the component. Instead, use `CheckGlobalClassNames.checkHost` from\n   * `Check.styles.ts` to get the static class name to apply to the parent element of the Check.\n   */\n  checkHost: IStyle;\n}\n"]}
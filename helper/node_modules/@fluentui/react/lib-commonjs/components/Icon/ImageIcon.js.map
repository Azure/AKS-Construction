{"version":3,"file":"ImageIcon.js","sourceRoot":"../src/","sources":["components/Icon/ImageIcon.tsx"],"names":[],"mappings":";;;;AAAA,6BAA+B;AAC/B,wCAAuC;AACvC,6CAA6E;AAC7E,6CAAoD;AAGpD;;;;GAIG;AACI,IAAM,SAAS,GAA6C,UAAA,KAAK;IAC9D,IAAA,SAAS,GAAiB,KAAK,UAAtB,EAAE,UAAU,GAAK,KAAK,WAAV,CAAW;IAExC,IAAM,WAAW,GAAG,0BAAc,CAAuC,KAAK,EAAE,iCAAqB,EAAE;QACrG,YAAY;QACZ,iBAAiB;QACjB,OAAO;QACP,kBAAkB;KACnB,CAAC,CAAC;IACH,IAAM,OAAO,GAAG,UAAU,CAAC,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;IACtD,IAAM,OAAO,GACX,OAAO;QACP,KAAK,CAAC,iBAAiB,CAAC;QACxB,KAAK,CAAC,KAAK;QACX,UAAU,CAAC,YAAY,CAAC;QACxB,UAAU,CAAC,iBAAiB,CAAC;QAC7B,UAAU,CAAC,KAAK,CAAC;IAEnB,gGAAgG;IAChG,IAAM,cAAc,GAAG;QACrB,iBAAiB,EAAE,KAAK,CAAC,iBAAiB,CAAC;QAC3C,kBAAkB,EAAE,KAAK,CAAC,kBAAkB,CAAC;QAC7C,KAAK,EAAE,KAAK,CAAC,KAAK;KACnB,CAAC;IAEF,IAAM,cAAc,GAAG,OAAO;QAC5B,CAAC,CAAC,EAAE;QACJ,CAAC,CAAC;YACE,aAAa,EAAE,IAAI;SACpB,CAAC;IAEN,OAAO,CACL,gDAAS,cAAc,EAAM,WAAW,IAAE,SAAS,EAAE,eAAG,CAAC,qBAAO,EAAE,wBAAU,CAAC,IAAI,EAAE,wBAAU,CAAC,KAAK,EAAE,SAAS,CAAC;QAC7G,oBAAC,aAAK,uBAAK,cAAc,EAAM,UAAU,IAAE,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,IAAI,CACtE,CACP,CAAC;AACJ,CAAC,CAAC;AApCW,QAAA,SAAS,aAoCpB","sourcesContent":["import * as React from 'react';\nimport { Image } from '../Image/Image';\nimport { css, getNativeProps, htmlElementProperties } from '../../Utilities';\nimport { classNames, MS_ICON } from './Icon.styles';\nimport type { IImageIconProps } from './Icon.types';\n\n/**\n * Fast icon component which only supports images (not font glyphs) and can't be targeted by customizations.\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\n * {@docCategory Icon}\n */\nexport const ImageIcon: React.FunctionComponent<IImageIconProps> = props => {\n  const { className, imageProps } = props;\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, htmlElementProperties, [\n    'aria-label',\n    'aria-labelledby',\n    'title',\n    'aria-describedby',\n  ]);\n  const altText = imageProps.alt || props['aria-label'];\n  const hasName =\n    altText ||\n    props['aria-labelledby'] ||\n    props.title ||\n    imageProps['aria-label'] ||\n    imageProps['aria-labelledby'] ||\n    imageProps.title;\n\n  // move naming or describing attributes from the container (where they are invalid) to the image\n  const imageNameProps = {\n    'aria-labelledby': props['aria-labelledby'],\n    'aria-describedby': props['aria-describedby'],\n    title: props.title,\n  };\n\n  const containerProps = hasName\n    ? {}\n    : {\n        'aria-hidden': true,\n      };\n\n  return (\n    <div {...containerProps} {...nativeProps} className={css(MS_ICON, classNames.root, classNames.image, className)}>\n      <Image {...imageNameProps} {...imageProps} alt={hasName ? altText : ''} />\n    </div>\n  );\n};\n"]}
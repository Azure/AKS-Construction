{"version":3,"file":"ShimmerElementsGroup.base.js","sourceRoot":"../src/","sources":["components/Shimmer/ShimmerElementsGroup/ShimmerElementsGroup.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, memoizeFunction } from '../../../Utilities';\nimport { ShimmerElementType, ShimmerElementsDefaultHeights } from '../Shimmer.types';\nimport { ShimmerLine } from '../ShimmerLine/ShimmerLine';\nimport { ShimmerGap } from '../ShimmerGap/ShimmerGap';\nimport { ShimmerCircle } from '../ShimmerCircle/ShimmerCircle';\nimport type { IRawStyle } from '../../../Styling';\nimport type {\n  IShimmerElementsGroupProps,\n  IShimmerElementsGroupStyleProps,\n  IShimmerElementsGroupStyles,\n} from './ShimmerElementsGroup.types';\nimport type { IShimmerElement } from '../Shimmer.types';\nimport type { IShimmerLineStyles } from '../ShimmerLine/ShimmerLine.types';\nimport type { IShimmerGapStyles } from '../ShimmerGap/ShimmerGap.types';\nimport type { IShimmerCircleStyles } from '../ShimmerCircle/ShimmerCircle.types';\n\nconst getClassNames = classNamesFunction<IShimmerElementsGroupStyleProps, IShimmerElementsGroupStyles>();\n\n/**\n * {@docCategory Shimmer}\n */\nexport const ShimmerElementsGroupBase: React.FunctionComponent<IShimmerElementsGroupProps> = props => {\n  const {\n    styles,\n    width = 'auto',\n    shimmerElements,\n    rowHeight = findMaxElementHeight(shimmerElements || []),\n    flexWrap = false,\n    theme,\n    backgroundColor,\n  } = props;\n\n  const classNames = getClassNames(styles!, {\n    theme: theme!,\n    flexWrap,\n  });\n\n  return (\n    <div style={{ width: width }} className={classNames.root}>\n      {getRenderedElements(shimmerElements, backgroundColor, rowHeight)}\n    </div>\n  );\n};\n\nfunction getRenderedElements(\n  shimmerElements?: IShimmerElement[],\n  backgroundColor?: string,\n  rowHeight?: number,\n): React.ReactNode {\n  const renderedElements: React.ReactNode = shimmerElements ? (\n    shimmerElements.map(\n      // false positive\n      // eslint-disable-next-line array-callback-return\n      (element: IShimmerElement, index: number): JSX.Element => {\n        const { type, ...filteredElem } = element;\n        const { verticalAlign, height } = filteredElem;\n        const styles = getElementStyles(verticalAlign, type, height, backgroundColor, rowHeight);\n\n        switch (element.type) {\n          case ShimmerElementType.circle:\n            return <ShimmerCircle key={index} {...filteredElem} styles={styles} />;\n          case ShimmerElementType.gap:\n            return <ShimmerGap key={index} {...filteredElem} styles={styles} />;\n          case ShimmerElementType.line:\n            return <ShimmerLine key={index} {...filteredElem} styles={styles} />;\n        }\n      },\n    )\n  ) : (\n    <ShimmerLine height={ShimmerElementsDefaultHeights.line} />\n  );\n\n  return renderedElements;\n}\n\nconst getElementStyles = memoizeFunction(\n  (\n    verticalAlign: 'center' | 'bottom' | 'top' | undefined,\n    elementType: ShimmerElementType,\n    elementHeight: number | undefined,\n    backgroundColor?: string,\n    rowHeight?: number,\n  ): IShimmerCircleStyles | IShimmerGapStyles | IShimmerLineStyles => {\n    const dif: number = rowHeight && elementHeight ? rowHeight - elementHeight : 0;\n\n    let borderStyle: IRawStyle | undefined;\n\n    if (!verticalAlign || verticalAlign === 'center') {\n      borderStyle = {\n        borderBottomWidth: `${dif ? Math.floor(dif / 2) : 0}px`,\n        borderTopWidth: `${dif ? Math.ceil(dif / 2) : 0}px`,\n      };\n    } else if (verticalAlign && verticalAlign === 'top') {\n      borderStyle = {\n        borderBottomWidth: `${dif}px`,\n        borderTopWidth: `0px`,\n      };\n    } else if (verticalAlign && verticalAlign === 'bottom') {\n      borderStyle = {\n        borderBottomWidth: `0px`,\n        borderTopWidth: `${dif}px`,\n      };\n    }\n\n    if (backgroundColor) {\n      switch (elementType) {\n        case ShimmerElementType.circle:\n          return {\n            root: { ...borderStyle, borderColor: backgroundColor },\n            svg: { fill: backgroundColor },\n          };\n        case ShimmerElementType.gap:\n          return {\n            root: { ...borderStyle, borderColor: backgroundColor, backgroundColor: backgroundColor },\n          };\n        case ShimmerElementType.line:\n          return {\n            root: { ...borderStyle, borderColor: backgroundColor },\n            topLeftCorner: { fill: backgroundColor },\n            topRightCorner: { fill: backgroundColor },\n            bottomLeftCorner: { fill: backgroundColor },\n            bottomRightCorner: { fill: backgroundColor },\n          };\n      }\n    }\n\n    return {\n      root: borderStyle,\n    };\n  },\n);\n\n/**\n * User should not worry to provide which of the elements is the highest so we do the calculation for him.\n * Plus if user forgot to specify the height we assign their defaults.\n */\nfunction findMaxElementHeight(shimmerElements: IShimmerElement[]): number {\n  const shimmerElementsDefaulted: IShimmerElement[] = shimmerElements.map(\n    (element: IShimmerElement): IShimmerElement => {\n      switch (element.type) {\n        case ShimmerElementType.circle:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.circle;\n          }\n          break;\n        case ShimmerElementType.line:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.line;\n          }\n          break;\n        case ShimmerElementType.gap:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.gap;\n          }\n          break;\n      }\n      return element;\n    },\n  );\n\n  const rowHeight = shimmerElementsDefaulted.reduce((acc: number, next: IShimmerElement): number => {\n    return next.height ? (next.height > acc ? next.height : acc) : acc;\n  }, 0);\n\n  return rowHeight;\n}\n"]}
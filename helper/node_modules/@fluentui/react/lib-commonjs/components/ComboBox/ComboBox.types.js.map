{"version":3,"file":"ComboBox.types.js","sourceRoot":"../src/","sources":["components/ComboBox/ComboBox.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { IIconProps } from '../../Icon';\nimport type { ISelectableOption, ISelectableDroppableTextProps } from '../../SelectableOption';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { IButtonStyles, IButtonProps } from '../../Button';\nimport type { IRefObject, IRenderFunction } from '../../Utilities';\nimport type { IComboBoxClassNames } from './ComboBox.classNames';\nimport type { IAutofillProps } from '../../Autofill';\n\n/**\n * {@docCategory ComboBox}\n */\nexport interface IComboBox {\n  /**\n   * All selected options.\n   */\n  readonly selectedOptions: IComboBoxOption[];\n\n  /**\n   * If there is a menu open, this will dismiss it.\n   */\n  dismissMenu: () => void;\n\n  /**\n   * Sets focus to the input in the ComboBox.\n   * @param shouldOpenOnFocus - Whether to open the menu when the input gets focus\n   * @param useFocusAsync - Whether to focus the input asynchronously\n   */\n  focus(shouldOpenOnFocus?: boolean, useFocusAsync?: boolean): void;\n}\n\n/**\n * {@docCategory ComboBox}\n */\nexport interface IComboBoxOption extends ISelectableOption {\n  /**\n   * Specific styles for each ComboBox option. To give common styles to all options, use\n   * `IComboBoxProps.comboBoxOptionStyles` instead.\n   */\n  styles?: Partial<IComboBoxOptionStyles>;\n\n  /**\n   * Whether to use the `ariaLabel` prop instead of the `text` prop to set the preview text as well\n   * as the `aria-label`. This is for scenarios where the `text` prop is used for embedded data.\n   */\n  useAriaLabelAsText?: boolean;\n}\n\n/**\n * {@docCategory ComboBox}\n */\nexport interface IComboBoxProps\n  extends ISelectableDroppableTextProps<IComboBox, IComboBox>,\n    React.RefAttributes<HTMLDivElement> {\n  /**\n   * Optional ref to access the `IComboBox` interface. Use this instead of `ref` for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IComboBox>;\n\n  /**\n   * Collection of options for this ComboBox.\n   */\n  options: IComboBoxOption[];\n\n  /**\n   * Called when a ComboBox item is clicked.\n   */\n  onItemClick?: (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number) => void;\n\n  /**\n   * Called when either:\n   * 1) The selected option changes.\n   * 2) A manually edited value is submitted. In this case there may not be a matched option if `allowFreeform`\n   *    is also true (and hence only `value` would be provided; the other parameters would be unspecified).\n   *\n   * The value passed to the callback (4th paramenter) reflects the changed option's text, or the user-typed input when\n   * freeform is allowed.\n   */\n  onChange?: (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string) => void;\n\n  /**\n   * Called when the user changes the pending value in ComboBox, either by typing in the\n   * input or hovering over options. When typing, the behavior varies depending on `autoComplete`\n   * and `allowFreeform` settings.\n   *\n   * In all cases, when the pending value is reset, all parameters will be undefined.\n   *\n   * When hovering options: `option` and `index` will be provided, and `value` will be undefined.\n   *\n   * Typing with `allowFreeform` on: If there's an option matching the input (an exact match if\n   * `autoComplete` is off, or a prefix match otherwise), `option` and `index` are provided and\n   * `value` is undefined. Otherwise only `value` is provided.\n   *\n   * Typing with `allowFreeform` off (or unspecified): If `autoComplete` is on (or unspecified),\n   * and the user types text matching the start of an option within a timeout, `option` and `index`\n   * are provided and `value` is undefined. If `autoComplete` is off, typing does nothing.\n   *\n   * If you simply want to be notified of raw text input, use the prop `onInputValueChange`.\n   */\n  onPendingValueChanged?: (option?: IComboBoxOption, index?: number, value?: string) => void;\n\n  /**\n   * Called when the user types in to the input of the combo box\n   *\n   * Ideal if you want to be notified of raw text input\n   */\n  onInputValueChange?: (text: string) => void;\n\n  /**\n   * Called when the ComboBox menu is launched.\n   */\n  onMenuOpen?: () => void;\n\n  /**\n   * Called when the ComboBox menu is dismissed.\n   */\n  onMenuDismissed?: () => void;\n\n  /**\n   * Called before the menu gets dismissed.\n   */\n  onMenuDismiss?: () => void;\n\n  /**\n   * Called when the options should be resolved, if they have been updated or\n   * if they need to be passed in the first time.\n   */\n  onResolveOptions?: (options: IComboBoxOption[]) => IComboBoxOption[] | PromiseLike<IComboBoxOption[]>;\n\n  /**\n   * Called when the ComboBox requests the list to scroll to a specific element.\n   */\n  onScrollToItem?: (itemIndex: number) => void;\n\n  /**\n   * Whether the ComboBox allows freeform user input, rather than restricting to the provided options.\n   */\n  allowFreeform?: boolean;\n\n  /**\n   * When true, the Combobox will allow the user to type freely while the Combobox is focused.\n   * On Blur, the value will be set to the matching option, or the previous selection if there is no match.\n   * @defaultvalue false\n   */\n  allowFreeInput?: boolean;\n\n  /**\n   * Whether the ComboBox auto completes. As the user is entering text, potential matches will be\n   * suggested from the list of options. If the ComboBox is expanded, this will also scroll to the\n   * suggested option and give it a selected style.\n   *\n   * @defaultvalue \"on\"\n   */\n  autoComplete?: 'on' | 'off';\n\n  /**\n   * Value to show in the input. Does not have to map to an option.\n   */\n  text?: string;\n\n  /**\n   * When multiple items are selected, this will be used to separate values in the ComboBox input.\n   *\n   * @defaultvalue \", \"\n   */\n  multiSelectDelimiter?: string;\n\n  /**\n   * The IconProps to use for the caret down (expand) button of the ComboBox.\n   */\n  buttonIconProps?: IIconProps;\n\n  /**\n   * Props to pass through to the Autofill component (the input field) inside the ComboBox.\n   * WARNING: These props (except the callbacks) may override ComboBox's defaults and cause issues.\n   */\n  autofill?: IAutofillProps;\n\n  /**\n   * Theme provided by HOC.\n   */\n  theme?: ITheme;\n\n  /**\n   * Custom styles for this component.\n   */\n  styles?: Partial<IComboBoxStyles>;\n\n  /**\n   * Custom function for providing the classNames for the ComboBox. Can be used to provide\n   * all styles for the component instead of applying them on top of the default styles.\n   */\n  getClassNames?: (\n    theme: ITheme,\n    isOpen: boolean,\n    disabled: boolean,\n    required: boolean,\n    focused: boolean,\n    allowFreeForm: boolean,\n    hasErrorMessage: boolean,\n    className?: string,\n  ) => IComboBoxClassNames;\n\n  /**\n   * Styles for the caret down (expand) button.\n   */\n  caretDownButtonStyles?: Partial<IButtonStyles>;\n\n  /**\n   * Default styles that should be applied to ComboBox options.\n   */\n  comboBoxOptionStyles?: Partial<IComboBoxOptionStyles>;\n\n  /**\n   * If the options list is scrollable, whether to position the selected option at the top of the\n   * callout when it is opened (unless it has reached the end of the scrollbar).\n   * @defaultvalue false;\n   */\n  scrollSelectedToTop?: boolean;\n\n  /**\n   * Add additional content above the option list in the callout.\n   */\n  onRenderUpperContent?: IRenderFunction<IComboBoxProps>;\n\n  /**\n   * Add additional content below the option list in the callout.\n   */\n  onRenderLowerContent?: IRenderFunction<IComboBoxProps>;\n\n  /**\n   * Custom width for options list dropdown. Mutually exclusive with `useComboBoxAsMenuWidth`.\n   */\n  dropdownWidth?: number;\n\n  /**\n   * Whether to use the ComboBox field width as the menu's width.\n   * Mutually exclusive with `dropdownWidth`.\n   */\n  useComboBoxAsMenuWidth?: boolean;\n\n  /**\n   * Custom max width for the options list dropdown.\n   */\n  dropdownMaxWidth?: number;\n\n  /**\n   * Whether to hide the ComboBox's caret (expand) button element from screen readers. This is true\n   * (hidden) by default because all functionality is handled by the input element, and the arrow\n   * button is only meant to be decorative.\n   * @defaultvalue true\n   */\n  isButtonAriaHidden?: boolean;\n\n  /**\n   * Optional ID of an element providing a description of the ComboBox for screen reader users.\n   */\n  ariaDescribedBy?: string;\n\n  /**\n   * Whether to show/hide the menu when it's opened/closed (rather than creating/destroying it).\n   * This will improve perf of the menu opening but could potentially have a negative impact on\n   * overall perf by increasing initial render time (since the ComboBox will render the menu hidden\n   * on mount) and keeping more elements in the DOM. Should only be used when perf to open/close\n   * the menu is important.\n   *\n   * Note: This may increase the amount of time it takes for the ComboBox itself to mount.\n   */\n  persistMenu?: boolean;\n\n  /**\n   * Whether the options list callout should restore focus after being dismissed. Set to false to\n   * prevent the menu from trying to re-focus the element that had focus before the menu was opened.\n   * @defaultvalue true;\n   */\n  shouldRestoreFocus?: boolean;\n\n  /**\n   * Additional props for the caret down (expand) button.\n   */\n  iconButtonProps?: IButtonProps;\n\n  /**\n   * Custom render function for the label text.\n   */\n  onRenderLabel?: IRenderFunction<IOnRenderComboBoxLabelProps>;\n}\n\n/**\n * {@docCategory ComboBox}\n */\nexport interface IOnRenderComboBoxLabelProps {\n  /**\n   * Props to render the ComboBox.\n   */\n  props: IComboBoxProps;\n\n  /**\n   * Accessible text for label when ComboBox is multiselected.\n   */\n  multiselectAccessibleText?: string;\n}\n\n/**\n * {@docCategory ComboBox}\n */\nexport interface IComboBoxStyles {\n  /**\n   * Style for the container which has the ComboBox and the label.\n   * (In most other components this would be called `root`.)\n   */\n  container: IStyle;\n\n  /**\n   * Style for the label element of the ComboBox.\n   */\n  label: IStyle;\n\n  /**\n   * Style for the label element of the ComboBox in the disabled state.\n   */\n  labelDisabled: IStyle;\n\n  /**\n   * Base styles for the wrapper element containing the input field and caret button, applied to\n   * all state variants.\n   *\n   * Unlike in most components, this is NOT the actual root element which also contains the label\n   * as well as the field; for that, use `container`.\n   */\n  root: IStyle;\n\n  /**\n   * Styles for the wrapper element containing the input field and caret button, applied when\n   * the ComboBox has an error message.\n   */\n  rootError: IStyle;\n\n  /**\n   * Styles for the wrapper element containing the input field and caret button, applied when\n   * `IComboBoxProps.allowFreeform` is false.\n   */\n  rootDisallowFreeForm: IStyle;\n\n  /**\n   * Styles for the wrapper element containing the input field and caret button, applied any time\n   * the ComboBox is hovered (unless it's disabled).\n   */\n  rootHovered: IStyle;\n\n  /**\n   * Styles for the wrapper element containing the input field and caret button, applied any time\n   * the ComboBox is active (unless it's disabled).\n   */\n  rootPressed: IStyle;\n\n  /**\n   * Styles for the wrapper element containing the input field and caret button, applied any time\n   * the ComboBox is focused (unless it's disabled).\n   */\n  rootFocused: IStyle;\n\n  /**\n   * Styles for the wrapper element containing the input field and caret button, applied when the\n   * ComboBox is disabled. These override all the other styles.\n   *\n   * NOTE: Hover/focused/active styles are not applied for disabled ComboBoxes.\n   */\n  rootDisabled: IStyle;\n\n  /**\n   * Base styles for the input element which contains the currently selected option.\n   */\n  input: IStyle;\n\n  /**\n   * Style override for the input element when ComboBox is disabled.\n   */\n  inputDisabled: IStyle;\n\n  /**\n   * Styles for the error message text of the ComboBox.\n   */\n  errorMessage: IStyle;\n\n  /**\n   * Styles for the callout.\n   */\n  callout: IStyle;\n\n  /**\n   * Styles for the options list container element.\n   */\n  optionsContainerWrapper: IStyle;\n\n  /**\n   * Styles for the container of all the ComboBox options.\n   * Includes the headers and dividers.\n   */\n  optionsContainer: IStyle;\n\n  /**\n   * Styles for a header in the options.\n   */\n  header: IStyle;\n\n  /**\n   * Styles for a divider in the options.\n   */\n  divider: IStyle;\n\n  /**\n   * Styles for hidden screen reader text.\n   */\n  screenReaderText: IStyle;\n}\n\n/**\n * {@docCategory ComboBox}\n */\nexport interface IComboBoxOptionStyles extends IButtonStyles {\n  /**\n   * Styles for the text inside the ComboBox option. This should be used instead of the description\n   * in IButtonStyles because we custom render the text in the ComboBox options.\n   */\n  optionText: IStyle;\n\n  /**\n   * Styles for the ComboBox option text's wrapper.\n   */\n  optionTextWrapper: IStyle;\n}\n"]}
{"version":3,"file":"Keytip.js","sourceRoot":"../src/","sources":["components/Keytip/Keytip.tsx"],"names":[],"mappings":";;;;AAAA,6BAA+B;AAC/B,6CAAqE;AACrE,mEAA6F;AAC7F,yCAAwC;AACxC,uDAAuD;AACvD,iDAAgD;AAChD,iDAA2E;AAI3E;;GAEG;AACH;IAA4B,kCAAiC;IAA7D;;IAqDA,CAAC;IApDQ,uBAAM,GAAb;QACQ,IAAA,KAAgD,IAAI,CAAC,KAAK,EAAxD,YAAY,kBAAA,EAAE,MAAM,YAAA,EAAE,mBAAmB,yBAAe,CAAC;QAC3D,IAAA,YAAY,GAAK,IAAI,CAAC,KAAK,aAAf,CAAgB;QAElC,IAAI,YAAoB,CAAC;QACzB,gDAAgD;QAChD,IAAI,mBAAmB,EAAE;YACvB,YAAY,GAAG,oCAAsB,CAAC,4BAAc,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC,CAAC;SAC1F;aAAM;YACL,YAAY,GAAG,oCAAsB,CAAC,YAAY,CAAC,CAAC;SACrD;QAED,IAAM,OAAO,GAAG,8CAAkC,CAAC,YAAY,CAAC,CAAC;QAEjE,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,yCAAK,CAAC;SACd;QAED,YAAY,GAAG,OAAO,CAAC;QAEvB,IAAI,MAAM,EAAE;YACV,gEAAgE;YAChE,yBAAyB;YACzB,YAAY,yCACP,YAAY,KACf,WAAW,EAAE,IAAI,EACjB,eAAe,EAAE,gCAAe,CAAC,WAAW,GAC7C,CAAC;SACH;QAED,IAAI,CAAC,YAAY,IAAI,YAAY,CAAC,eAAe,KAAK,SAAS,EAAE;YAC/D,mDAAmD;YACnD,YAAY,yCACP,YAAY,KACf,eAAe,EAAE,gCAAe,CAAC,YAAY,GAC9C,CAAC;SACH;QAED,OAAO,CACL,oBAAC,iBAAO,uBACF,YAAY,IAChB,aAAa,EAAE,KAAK,EACpB,UAAU,EAAE,IAAI,EAChB,cAAc,EAAE,CAAC,EACjB,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,sCAAsB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,gCAAgB,EAClE,sBAAsB,EAAE,IAAI,EAC5B,MAAM,EAAE,YAAY;YAEpB,oBAAC,6BAAa,uBAAK,IAAI,CAAC,KAAK,EAAI,CACzB,CACX,CAAC;IACJ,CAAC;IACH,aAAC;AAAD,CAAC,AArDD,CAA4B,KAAK,CAAC,SAAS,GAqD1C;AArDY,wBAAM","sourcesContent":["import * as React from 'react';\nimport { getFirstVisibleElementFromSelector } from '../../Utilities';\nimport { mergeOverflows, ktpTargetFromSequences } from '../../utilities/keytips/KeytipUtils';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../ContextualMenu';\nimport { KeytipContent } from './KeytipContent';\nimport { getCalloutStyles, getCalloutOffsetStyles } from './Keytip.styles';\nimport type { IKeytipProps } from './Keytip.types';\nimport type { Target } from '@fluentui/react-hooks';\n\n/**\n * A callout corresponding to another Fabric component to describe a key sequence that will activate that component\n */\nexport class Keytip extends React.Component<IKeytipProps, {}> {\n  public render(): JSX.Element {\n    const { keySequences, offset, overflowSetSequence } = this.props;\n    let { calloutProps } = this.props;\n\n    let keytipTarget: Target;\n    // Take into consideration the overflow sequence\n    if (overflowSetSequence) {\n      keytipTarget = ktpTargetFromSequences(mergeOverflows(keySequences, overflowSetSequence));\n    } else {\n      keytipTarget = ktpTargetFromSequences(keySequences);\n    }\n\n    const element = getFirstVisibleElementFromSelector(keytipTarget);\n\n    if (!element) {\n      return <></>;\n    }\n\n    keytipTarget = element;\n\n    if (offset) {\n      // Set callout to top-left corner, will be further positioned in\n      // getCalloutOffsetStyles\n      calloutProps = {\n        ...calloutProps,\n        coverTarget: true,\n        directionalHint: DirectionalHint.topLeftEdge,\n      };\n    }\n\n    if (!calloutProps || calloutProps.directionalHint === undefined) {\n      // Default callout directional hint to BottomCenter\n      calloutProps = {\n        ...calloutProps,\n        directionalHint: DirectionalHint.bottomCenter,\n      };\n    }\n\n    return (\n      <Callout\n        {...calloutProps}\n        isBeakVisible={false}\n        doNotLayer={true}\n        minPagePadding={0}\n        styles={offset ? getCalloutOffsetStyles(offset) : getCalloutStyles}\n        preventDismissOnScroll={true}\n        target={keytipTarget}\n      >\n        <KeytipContent {...this.props} />\n      </Callout>\n    );\n  }\n}\n"]}
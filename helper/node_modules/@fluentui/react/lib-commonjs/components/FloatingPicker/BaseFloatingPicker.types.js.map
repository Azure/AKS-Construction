{"version":3,"file":"BaseFloatingPicker.types.js","sourceRoot":"../src/","sources":["components/FloatingPicker/BaseFloatingPicker.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { SuggestionsStore } from './Suggestions/SuggestionsStore';\nimport type { ISuggestionModel, ISuggestionItemProps } from '../../Pickers';\nimport type { ISuggestionsControlProps } from './Suggestions/Suggestions.types';\nimport type { IRefObject } from '../../Utilities';\nimport type { ICalloutProps } from '../Callout/Callout.types';\n\nexport interface IBaseFloatingPicker {\n  /** Whether the suggestions are shown */\n  isSuggestionsShown: boolean;\n\n  /** On queryString changed */\n  onQueryStringChanged: (input: string) => void;\n\n  /** Hides the picker */\n  hidePicker: () => void;\n\n  /** Shows the picker\n   * @param updateValue - Optional param to indicate whether to update the query string\n   */\n  showPicker: (updateValue?: boolean) => void;\n\n  /** Gets the suggestions */\n  suggestions: any[];\n\n  /** Gets the input text */\n  inputText: string;\n}\n\n// Type T is the type of the item that is displayed\n// and searched for by the people picker. For example, if the picker is\n// displaying persona's than type T could either be of Persona or Ipersona props\nexport interface IBaseFloatingPickerProps<T> extends React.ClassAttributes<any> {\n  componentRef?: IRefObject<IBaseFloatingPicker>;\n\n  /**\n   * The suggestions store\n   */\n  suggestionsStore: SuggestionsStore<T>;\n\n  /**\n   * The suggestions to show on zero query, return null if using as a controlled component\n   */\n  onZeroQuerySuggestion?: (selectedItems?: T[]) => T[] | PromiseLike<T[]> | null;\n\n  /**\n   * The input element to listen on events\n   */\n  inputElement?: HTMLInputElement | null;\n\n  /**\n   * Function that specifies how an individual suggestion item will appear.\n   */\n  onRenderSuggestionsItem?: (props: T, itemProps: ISuggestionItemProps<T>) => JSX.Element;\n  /**\n   * A callback for what should happen when a person types text into the input.\n   * Returns the already selected items so the resolver can filter them out.\n   * If used in conjunction with resolveDelay this will only kick off after the delay throttle.\n   * Return null if using as a controlled component\n   */\n  onResolveSuggestions: (filter: string, selectedItems?: T[]) => T[] | PromiseLike<T[]> | null;\n\n  /**\n   * A callback for when the input has been changed\n   */\n  onInputChanged?: (filter: string) => void;\n\n  /**\n   * The delay time in ms before resolving suggestions, which is kicked off when input has been changed.\n   * e.g. If a second input change happens within the resolveDelay time, the timer will start over.\n   * Only until after the timer completes will onResolveSuggestions be called.\n   */\n  resolveDelay?: number;\n\n  /**\n   * A callback for when a suggestion is clicked\n   */\n  onChange?: (item: T) => void;\n\n  /**\n   * ClassName for the picker.\n   */\n  className?: string;\n  /**\n   * The properties that will get passed to the Suggestions component.\n   */\n  pickerSuggestionsProps?: IBaseFloatingPickerSuggestionProps;\n\n  /**\n   * The properties that will get passed to the Callout component.\n   */\n  pickerCalloutProps?: ICalloutProps;\n\n  /**\n   * A callback for when an item is removed from the suggestion list\n   */\n  onRemoveSuggestion?: (item: T) => void;\n  /**\n   * A function used to validate if raw text entered into the well can be added\n   */\n  onValidateInput?: (input: string) => boolean;\n  /**\n   * The text to display while searching for more results in a limited suggestions list\n   */\n  searchingText?: ((props: { input: string }) => string) | string;\n\n  /**\n   * Function that specifies how arbitrary text entered into the well is handled.\n   */\n  createGenericItem?: (input: string, isValid: boolean) => ISuggestionModel<T>;\n\n  /**\n   * The callback that should be called to see if the force resolve command should be shown\n   */\n  showForceResolve?: () => boolean;\n\n  /**\n   * The items that the base picker should currently display as selected.\n   * If this is provided then the picker will act as a controlled component.\n   */\n  selectedItems?: T[];\n\n  /**\n   * A callback to get text from an item. Used to autofill text in the pickers.\n   */\n  getTextFromItem?: (item: T, currentValue?: string) => string;\n\n  /**\n   * Width for the suggestions callout\n   */\n  calloutWidth?: number;\n\n  /**\n   * The callback that should be called when the suggestions are shown\n   */\n  onSuggestionsShown?: () => void;\n\n  /**\n   * The callback that should be called when the suggestions are hidden\n   */\n  onSuggestionsHidden?: () => void;\n\n  /**\n   * If using as a controlled component, the items to show in the suggestion list\n   */\n  suggestionItems?: T[];\n}\n\n/**\n * Props which are passed on to the inner Suggestions component\n */\nexport type IBaseFloatingPickerSuggestionProps = Pick<\n  ISuggestionsControlProps<any>,\n  'shouldSelectFirstItem' | 'headerItemsProps' | 'footerItemsProps' | 'showRemoveButtons'\n>;\n"]}
{"version":3,"file":"ContextualMenuItem.types.js","sourceRoot":"../src/","sources":["components/ContextualMenu/ContextualMenuItem.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { IContextualMenuItem } from './ContextualMenu.types';\nimport type { IMenuItemClassNames } from './ContextualMenu.classNames';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IButtonStyles } from '../../Button';\n\n/**\n * {@docCategory ContextualMenu}\n */\nexport interface IContextualMenuRenderItem {\n  /**\n   * Function to open this item's subMenu, if present.\n   */\n  openSubMenu: () => void;\n\n  /**\n   * Function to close this item's subMenu, if present.\n   */\n  dismissSubMenu: () => void;\n\n  /**\n   * Dismiss the menu this item belongs to.\n   */\n  dismissMenu: (dismissAll?: boolean) => void;\n}\n\n/**\n * {@docCategory ContextualMenu}\n */\nexport interface IContextualMenuItemProps extends React.HTMLAttributes<IContextualMenuItemProps> {\n  /**\n   * Optional callback to access the IContextualMenuRenderItem interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IContextualMenuRenderItem>;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IContextualMenuItemStyleProps, IContextualMenuItemStyles>;\n\n  /**\n   * Theme provided by High-Order Component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Additional css class to apply to the ContextualMenuItem\n   * @defaultvalue undefined\n   */\n  className?: string;\n\n  /**\n   * The item to display\n   */\n  item: IContextualMenuItem;\n\n  /**\n   * Classnames for different aspects of a menu item\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  classNames: IMenuItemClassNames;\n\n  /**\n   * Index of the item\n   */\n  index: number;\n\n  /**\n   * If this item has icons\n   */\n  hasIcons: boolean | undefined;\n\n  /**\n   * Click handler for the checkmark\n   */\n  onCheckmarkClick?: (item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement>) => void;\n\n  /**\n   * This prop will get set by ContextualMenu and can be called to open this item's subMenu, if present.\n   */\n  openSubMenu?: (item: any, target: HTMLElement) => void;\n\n  /**\n   * This prop will get set by ContextualMenu and can be called to close this item's subMenu, if present.\n   */\n  dismissSubMenu?: () => void;\n\n  /**\n   * This prop will get set by ContextualMenu and can be called to close the menu this item belongs to.\n   * If dismissAll is true, all menus will be closed.\n   */\n  dismissMenu?: (ev?: any, dismissAll?: boolean) => void;\n\n  /**\n   * This prop will get set by the wrapping component and will return the element that wraps this ContextualMenuItem.\n   * Used for openSubMenu.\n   */\n  getSubmenuTarget?: () => HTMLElement | undefined;\n}\n\n/**\n * {@docCategory ContextualMenu}\n */\nexport interface IContextualMenuItemStyleProps {\n  /**\n   * Theme provided by High-Order Component.\n   */\n  theme: ITheme;\n\n  /**\n   * Accept custom classNames\n   */\n  className?: string;\n\n  /**\n   * Whether or not the menu item is disabled.\n   */\n  disabled: boolean;\n\n  /**\n   * Whether or not the menu item is expanded.\n   */\n  expanded: boolean;\n\n  /**\n   * Whether or not the menu item is checked.\n   */\n  checked: boolean;\n\n  /**\n   * Indicates if a menu item is an anchor link.\n   */\n  isAnchorLink: boolean;\n\n  /**\n   * Indicates if the icon used is of the known set of icons.\n   */\n  knownIcon: boolean;\n\n  /**\n   * The optional class name to apply to the item element.\n   */\n  itemClassName?: string;\n\n  /**\n   * The optional class name to apply to the divider element.\n   */\n  dividerClassName?: string;\n\n  /**\n   * The optional class name to apply to the icon element.\n   */\n  iconClassName?: string;\n\n  /**\n   * The optional class name to apply to the sub-menu if present.\n   */\n  subMenuClassName?: string;\n\n  /**\n   * Whether or not the primary section of a split menu item is disabled.\n   */\n  primaryDisabled?: boolean;\n}\n\n/**\n * {@docCategory ContextualMenu}\n */\nexport interface IContextualMenuItemStyles extends IButtonStyles {\n  /**\n   * Style for the root element.\n   */\n  root?: IStyle;\n\n  /**\n   * Styles for a menu item that is an anchor link.\n   */\n  item?: IStyle;\n\n  /**\n   * Styles for a divider item of a ContextualMenu.\n   */\n  divider?: IStyle;\n\n  /**\n   * Styles for the content inside the button/link of the menuItem.\n   */\n  linkContent?: IStyle;\n\n  /**\n   * Styles for a menu item that is an anchor link.\n   */\n  anchorLink?: IStyle;\n\n  /**\n   * Styles for the icon element of a menu item.\n   */\n  icon?: IStyle;\n\n  /**\n   * Default icon color style for known icons.\n   */\n  iconColor?: IStyle;\n\n  /**\n   * Default style for checkmark icons.\n   */\n  checkmarkIcon?: IStyle;\n\n  /**\n   * Styles for the submenu icon of a menu item.\n   */\n  subMenuIcon?: IStyle;\n\n  /**\n   * Styles for the label of a menu item.\n   */\n  label?: IStyle;\n\n  /**\n   * Styles for the secondary text of a menu item.\n   */\n  secondaryText?: IStyle;\n\n  /**\n   * Styles for the container of a split menu item.\n   */\n  splitContainer?: IStyle;\n\n  /**\n   * Styles for the primary portion of a split menu item.\n   */\n  splitPrimary?: IStyle;\n\n  /**\n   * Styles for the menu portion of a split menu item.\n   */\n  splitMenu?: IStyle;\n\n  /**\n   * Styles for a menu item that is a link.\n   */\n  linkContentMenu?: IStyle;\n\n  /**\n   * Styles for hidden screen reader text.\n   */\n  screenReaderText?: IStyle;\n}\n\nexport interface IContextualMenuItemRenderFunctions {\n  /**\n   * Rendering function for check mark icon\n   */\n  renderCheckMarkIcon: (props: IContextualMenuItemProps, customClassNames?: string[]) => React.ReactNode;\n\n  /**\n   * Rendering function for item icon\n   */\n  renderItemIcon: (props: IContextualMenuItemProps, customClassNames?: string[]) => React.ReactNode;\n\n  /**\n   * Rendering function for item label\n   */\n  renderItemName: (props: IContextualMenuItemProps, customClassNames?: string[]) => React.ReactNode;\n\n  /**\n   * Rendering function for secondary text label\n   */\n  renderSecondaryText: (props: IContextualMenuItemProps, customClassNames?: string[]) => React.ReactNode;\n\n  /**\n   * Rendering function for submenu icon\n   */\n  renderSubMenuIcon: (props: IContextualMenuItemProps, customClassNames?: string[]) => React.ReactNode;\n}\n"]}
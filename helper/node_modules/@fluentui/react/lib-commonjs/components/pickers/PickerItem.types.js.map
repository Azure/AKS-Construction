{"version":3,"file":"PickerItem.types.js","sourceRoot":"../src/","sources":["components/pickers/PickerItem.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { IRefObject } from '../../Utilities';\nimport { IIconProps } from '../Icon/Icon.types';\n/**\n * PickerItem component.\n * {@docCategory Pickers}\n */\nexport interface IPickerItem {}\n\n/**\n * PickerItem props common for any type of items.\n * {@docCategory Pickers}\n */\nexport interface IPickerItemProps<T> extends React.AllHTMLAttributes<HTMLElement> {\n  /**\n   * Optional callback to access the IPickerItem interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IPickerItem>;\n\n  /** The item of Type T (Persona, Tag, or any other custom item provided). */\n  item: T;\n\n  /** Index number of the item in the array of picked items. */\n  index: number;\n\n  /** Whether the picked item is selected or not. */\n  selected?: boolean;\n\n  /** Callback issued when the item is removed from the array of picked items. */\n  onRemoveItem?: () => void;\n\n  /**\n   * Internal Use only, gives a callback to the renderer to call when an item has changed.\n   * This allows the base picker to keep track of changes in the items.\n   */\n  onItemChange?: (item: T, index: number) => void;\n\n  /** Unique key for each picked item. */\n  key?: string | number;\n\n  /** Aria-label for the picked item remove button. */\n  removeButtonAriaLabel?: string;\n\n  /**\n   *  Props for the icon used in the remove button.\n   *  @defaultvalue `{ iconName:'Cancel' }`\n   */\n  removeButtonIconProps?: IIconProps;\n}\n"]}
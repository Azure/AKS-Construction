{"version":3,"file":"BasePicker.types.js","sourceRoot":"../src/","sources":["components/pickers/BasePicker.types.ts"],"names":[],"mappings":";;;AA0RA;;;GAGG;AACH,IAAY,eASX;AATD,WAAY,eAAe;IACzB,2BAA2B;IAC3B,uDAAK,CAAA;IAEL,wEAAwE;IACxE,2DAAO,CAAA;IAEP,6BAA6B;IAC7B,2DAAO,CAAA;AACT,CAAC,EATW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAS1B","sourcesContent":["import * as React from 'react';\nimport { Autofill } from '../../Autofill';\nimport type { IPickerItemProps } from './PickerItem.types';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport type { ISuggestionModel, ISuggestionsProps } from './Suggestions/Suggestions.types';\nimport type { ICalloutProps } from '../../Callout';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { ISuggestionItemProps } from '../pickers/Suggestions/SuggestionsItem.types';\nimport type { IReactProps } from '../../common/React.types';\nimport { IIconProps } from '../Icon/Icon.types';\n\n/**\n * BasePicker component.\n * {@docCategory Pickers}\n */\nexport interface IBasePicker<T> {\n  /** Gets the current value of the input. */\n  items: T[] | undefined;\n\n  /** Sets focus to the focus zone. */\n  focus: () => void;\n\n  /** Set focus to the input */\n  focusInput: () => void;\n\n  /**\n   * When called, will take the currently selected suggestion and complete it.\n   * If called with forceComplete true, it will attempt to force the current suggestion\n   * to complete, must provide both createGenericSuggestion, so the text can be turned into\n   * an object in the right shape, and onValidateInput, so the object knows if it's correct or not.\n   */\n  completeSuggestion: (forceComplete?: boolean) => void;\n}\n\n/**\n * Type T is the type of the item that is displayed\n * and searched for by the picker. For example, if the picker is\n * displaying persona's then type T could either be of Persona or IPersona props\n * {@docCategory Pickers}\n */\nexport interface IBasePickerProps<T> extends IReactProps<any> {\n  /**\n   * Optional callback to access the IBasePicker interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IBasePicker<T>>;\n\n  /**\n   * Function that specifies how the selected item will appear.\n   */\n  onRenderItem?: (props: IPickerItemProps<T>) => JSX.Element;\n\n  /**\n   * Function that specifies how an individual suggestion item will appear.\n   */\n  onRenderSuggestionsItem?: (props: T, itemProps: ISuggestionItemProps<T>) => JSX.Element;\n\n  /**\n   * A callback for what should happen when a person types text into the input.\n   * Returns the already selected items so the resolver can filter them out.\n   * If used in conjunction with resolveDelay this will only kick off after the delay throttle.\n   */\n  onResolveSuggestions: (filter: string, selectedItems?: T[]) => T[] | PromiseLike<T[]>;\n\n  /**\n   * The delay time in ms before resolving suggestions, which is kicked off when input has been changed.\n   * e.g. If a second input change happens within the resolveDelay time, the timer will start over.\n   * Only until after the timer completes will onResolveSuggestions be called.\n   */\n  resolveDelay?: number;\n\n  /**\n   * A callback for what should happen when a user clicks within the input area.\n   * @deprecated Please use `onEmptyResolveSuggestions` instead, as the suggestions aren't about\n   * setting focus as they are about resolving suggestions when there is no input.\n   */\n  onEmptyInputFocus?: (selectedItems?: T[]) => T[] | PromiseLike<T[]>;\n\n  /**\n   * A callback for what should happen when suggestions are shown without\n   * input provided.\n   * Returns the already selected items so the resolver can filter them out.\n   * If used in conjunction with resolveDelay this will only kick off after the delay throttle.\n   */\n  onEmptyResolveSuggestions?: (selectedItems?: T[]) => T[] | PromiseLike<T[]>;\n\n  /**\n   * Initial items that have already been selected and should appear in the people picker.\n   */\n  defaultSelectedItems?: T[];\n\n  /**\n   * A callback for when the selected list of items changes.\n   */\n  onChange?: (items?: T[]) => void;\n\n  /**\n   * A callback for when the user put focus on the picker\n   * @deprecated Use `inputProps.onFocus` instead\n   */\n  onFocus?: React.FocusEventHandler<HTMLInputElement | Autofill>;\n\n  /**\n   * A callback for when the user moves the focus away from the picker\n   */\n  onBlur?: React.FocusEventHandler<HTMLInputElement | Autofill>;\n\n  /**\n   * A callback to get text from an item. Used to autofill text in the pickers.\n   */\n  getTextFromItem?: (item: T, currentValue?: string) => string;\n\n  /**\n   * A callback that gets the rest of the results when a user clicks get more results.\n   */\n  onGetMoreResults?: (filter: string, selectedItems?: T[]) => T[] | PromiseLike<T[]>;\n\n  /**\n   * ClassName for the picker.\n   */\n  className?: string;\n\n  /**\n   * The properties that will get passed to the Suggestions component.\n   */\n  pickerSuggestionsProps?: IBasePickerSuggestionsProps;\n\n  /**\n   * The properties that will get passed to the Callout component.\n   */\n  pickerCalloutProps?: ICalloutProps;\n\n  /**\n   * AutoFill input native props\n   * @defaultvalue undefined\n   */\n  inputProps?: IInputProps;\n\n  /**\n   * A callback for when an item is removed from the suggestion list\n   */\n  onRemoveSuggestion?: (item: T) => void;\n\n  /**\n   * A function used to validate if raw text entered into the well can be added into the selected items list\n   */\n  onValidateInput?: (input: string) => ValidationState;\n\n  /**\n   * The text to display while searching for more results in a limited suggestions list\n   */\n  searchingText?: ((props: { input: string }) => string) | string;\n\n  /**\n   * Flag for disabling the picker.\n   * @defaultvalue false\n   */\n  disabled?: boolean;\n\n  /**\n   * Restrict the amount of selectable items.\n   * @defaultvalue undefined\n   */\n  itemLimit?: number;\n\n  /**\n   * Function that specifies how arbitrary text entered into the well is handled.\n   */\n  createGenericItem?: (input: string, ValidationState: ValidationState) => ISuggestionModel<T> | T;\n\n  /**\n   * Aria label for the \"X\" button in the selected item component.\n   * @defaultvalue ''\n   */\n  removeButtonAriaLabel?: string;\n\n  /**\n   * The text that will be announced when a suggestion is removed. A default value is only provided for English.\n   * @default 'removed \\{0\\}'\n   */\n  suggestionRemovedText?: string;\n\n  /**\n   * Optional aria-label that will be placed on the element that has the role \"combobox\"\n   * attached. Additionally aria-labelled by will get added to the supporting input element contained\n   * with in the combobox container\n   */\n  ['aria-label']?: string;\n\n  /**\n   * A callback to process a selection after the user selects something from the picker. If the callback returns null,\n   * the item will not be added to the picker.\n   */\n  onItemSelected?: (selectedItem?: T) => T | PromiseLike<T> | null;\n\n  /**\n   * The items that the base picker should currently display as selected.\n   * If this is provided then the picker will act as a controlled component.\n   */\n  selectedItems?: T[];\n\n  /**\n   * Aria label for the displayed selection. A good value would be something like \"Selected Contacts\".\n   * @defaultvalue ''\n   */\n  selectionAriaLabel?: string;\n\n  /**\n   * Override the role used for the element containing selected items.\n   * Update this if onRenderItem does not return elements with role=\"listitem\".\n   * A good alternative would be 'group'.\n   * @defaultvalue 'list'\n   */\n  selectionRole?: string;\n\n  /**\n   * A callback used to modify the input string.\n   */\n  onInputChange?: (input: string) => string;\n\n  /**\n   * A callback to override the default behavior of adding the selected suggestion on dismiss. If it returns true or\n   * nothing, the selected item will be added on dismiss. If false, the selected item will not be added on dismiss.\n   *\n   */\n  onDismiss?: (ev?: any, selectedItem?: T) => boolean | void;\n\n  /**\n   * Adds an additional alert for the currently selected suggestion. This prop should be set to true for IE11 and below,\n   * as it enables proper screen reader behavior for each suggestion (since aria-activedescendant does not work\n   * with IE11). It should not be set for modern browsers (Edge, Chrome).\n   * @defaultvalue false\n   */\n  enableSelectedSuggestionAlert?: boolean;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IBasePickerStyleProps, IBasePickerStyles>;\n\n  /**\n   * Theme provided by styled() function.\n   */\n  theme?: ITheme;\n\n  /**\n   *  Props for the icon used in the item's remove button.\n   *  @defaultvalue `{ iconName:'Cancel' }`\n   */\n  removeButtonIconProps?: IIconProps;\n}\n\n/**\n * Subset of picker options that may be legally passed through a picker to its\n * internal Suggestions component.\n * {@docCategory Pickers}\n */\nexport interface IBasePickerSuggestionsProps<T = any>\n  extends Pick<\n    ISuggestionsProps<T>,\n    | 'onRenderNoResultFound'\n    | 'suggestionsHeaderText'\n    | 'mostRecentlyUsedHeaderText'\n    | 'noResultsFoundText'\n    | 'className'\n    | 'suggestionsClassName'\n    | 'suggestionsItemClassName'\n    | 'searchForMoreIcon'\n    | 'searchForMoreText'\n    | 'forceResolveText'\n    | 'loadingText'\n    | 'searchingText'\n    | 'resultsFooterFull'\n    | 'resultsFooter'\n    | 'resultsMaximumNumber'\n    | 'showRemoveButtons'\n    | 'suggestionsAvailableAlertText'\n    | 'suggestionsContainerAriaLabel'\n    | 'showForceResolve'\n    | 'removeButtonIconProps'\n  > {}\n\n/**\n * Validation state of the user's input.\n * {@docCategory Pickers}\n */\nexport enum ValidationState {\n  /** User input is valid. */\n  valid,\n\n  /** User input could be valid or invalid, its state is not known yet. */\n  warning,\n\n  /** User input is invalid. */\n  invalid,\n}\n\n/**\n * Pickers' input props interface\n * {@docCategory Pickers}\n */\nexport interface IInputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Screen reader label to apply to an input element.\n   */\n  'aria-label'?: string;\n\n  /**\n   * The default value to be visible when the autofill first created.\n   * This is different than placeholder text because the placeholder text will disappear and re-appear. This\n   * text persists until deleted or changed.\n   */\n  defaultVisibleValue?: string;\n}\n\n/**\n * The props needed to construct styles.\n * {@docCategory Pickers}\n */\nexport type IBasePickerStyleProps = Pick<IBasePickerProps<any>, 'theme' | 'className' | 'disabled'> & {\n  /** Whether text style area is focused */\n  isFocused?: boolean;\n\n  /** Optional pickerInput className */\n  inputClassName?: string;\n};\n\n/**\n * Represents the stylable areas of the control.\n * {@docCategory Pickers}\n */\nexport interface IBasePickerStyles {\n  /** Root element of any picker extending from BasePicker (wraps all the elements). */\n  root: IStyle;\n\n  /**\n   * Refers to the elements already selected (picked) wrapped by `itemsWrapper` along with the input to type\n   * a new selection.\n   */\n  text: IStyle;\n\n  /** Refers to the items already selected (picked). */\n  itemsWrapper: IStyle;\n\n  /** Refers to the input were to type new selections (picks). */\n  input: IStyle;\n\n  /** Refers to helper element used for accessibility tools (hidden from view on screen). */\n  screenReaderText: IStyle;\n}\n"]}
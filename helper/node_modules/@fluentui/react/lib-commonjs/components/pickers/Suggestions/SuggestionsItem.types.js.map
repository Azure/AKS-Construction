{"version":3,"file":"SuggestionsItem.types.js","sourceRoot":"../src/","sources":["components/pickers/Suggestions/SuggestionsItem.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { IStyle, ITheme } from '../../../Styling';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../../Utilities';\nimport type { ISuggestionModel } from './Suggestions.types';\nimport { IIconProps } from '../../Icon/Icon.types';\n/**\n * SuggestionItem component.\n * {@docCategory Pickers}\n */\nexport interface ISuggestionsItem {}\n\n/**\n * Suggestion item props. Refers to the each individual suggested items rendered within Suggestions callout.\n * Type T is the type of the item that is displayed.\n * {@docCategory Pickers}\n */\nexport interface ISuggestionItemProps<T> {\n  /**\n   * Optional callback to access the ISuggestionItem interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ISuggestionsItem>;\n\n  /** Individual suggestion object containing its properties. */\n  suggestionModel: ISuggestionModel<T>;\n\n  /** Optional renderer to override the default one for each type of picker. */\n  RenderSuggestion: (item: T, suggestionItemProps: ISuggestionItemProps<T>) => JSX.Element;\n\n  /** Callback for when the user clicks on the suggestion. */\n  onClick: (ev: React.MouseEvent<HTMLButtonElement>) => void;\n\n  /** Callback for when the item is removed from the array of suggested items. */\n  onRemoveItem: (ev: React.MouseEvent<HTMLButtonElement>) => void;\n\n  /** Optional className for the root element of the suggestion item. */\n  className?: string;\n\n  /** Unique id of the suggested item. */\n  id?: string;\n\n  /** Whether the remove button should be rendered or not. */\n  showRemoveButton?: boolean;\n\n  /** An override for the 'selected' property of the SuggestionModel. */\n  isSelectedOverride?: boolean;\n\n  /**\n   * The ARIA label for the button to remove the suggestion from the list.\n   */\n  removeButtonAriaLabel?: string;\n\n  /** Call to provide customized styling that will layer on top of the variant rules. */\n  styles?: IStyleFunctionOrObject<ISuggestionsItemStyleProps, ISuggestionsItemStyles>;\n\n  /** Theme provided by High-Order Component. */\n  theme?: ITheme;\n\n  /**\n   *  Props for the icon used in the item's remove button.\n   *  @defaultvalue `{ iconName:'Cancel' }`\n   */\n  removeButtonIconProps?: IIconProps;\n}\n\n/**\n * The props needed to construct SuggestionItem styles.\n * {@docCategory Pickers}\n */\nexport type ISuggestionsItemStyleProps = Required<Pick<ISuggestionItemProps<any>, 'theme'>> &\n  Pick<ISuggestionItemProps<any>, 'className'> & {\n    /** Whether the suggestion item is selected or not. */\n    suggested?: boolean;\n  };\n\n/**\n * Represents the stylable areas of the SuggestionItem.\n * {@docCategory Pickers}\n */\nexport interface ISuggestionsItemStyles {\n  /** Root element of the suggested item. */\n  root: IStyle;\n\n  /** Refers to the CommandButton holding the content of the suggested item. */\n  itemButton: IStyle;\n\n  /** Refers to the remove button in case it's rendered. */\n  closeButton: IStyle;\n}\n"]}
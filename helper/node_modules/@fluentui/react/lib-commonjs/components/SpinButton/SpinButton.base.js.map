{"version":3,"file":"SpinButton.base.js","sourceRoot":"../src/","sources":["components/SpinButton/SpinButton.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IconButton } from '../../Button';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport {\n  KeyCodes,\n  calculatePrecision,\n  classNamesFunction,\n  precisionRound,\n  getNativeProps,\n  getPropsWithDefaults,\n  divProperties,\n} from '../../Utilities';\nimport { getArrowButtonStyles } from './SpinButton.styles';\nimport { KeyboardSpinDirection } from './SpinButton.types';\nimport { Position } from '../../Positioning';\nimport { useAsync, useControllableValue, useWarnings, useId, usePrevious } from '@fluentui/react-hooks';\nimport type { ISpinButtonProps, ISpinButtonStyleProps, ISpinButtonStyles } from './SpinButton.types';\n\ninterface ISpinButtonInternalState {\n  spinningByMouse?: boolean;\n  stepTimeoutHandle: number;\n  /** Allows access to the latest `value` inside reused callbacks (to avoid stale capture issues) */\n  latestValue: string | undefined;\n  /** Allows access to the latest `intermediateValue` inside reused callbacks (to avoid stale capture issues) */\n  latestIntermediateValue: string | undefined;\n}\n\nconst getClassNames = classNamesFunction<ISpinButtonStyleProps, ISpinButtonStyles>();\n\nconst COMPONENT_NAME = 'SpinButton';\nconst DEFAULT_PROPS: Required<\n  Pick<\n    ISpinButtonProps,\n    // These are explicitly specified so that only the things which actually have defaults\n    // get marked as required in ISpinButtonPropsWithDefaults below\n    'disabled' | 'label' | 'step' | 'labelPosition' | 'incrementButtonIcon' | 'decrementButtonIcon'\n  >\n> = {\n  disabled: false,\n  label: '',\n  step: 1,\n  labelPosition: Position.start,\n  incrementButtonIcon: { iconName: 'ChevronUpSmall' },\n  decrementButtonIcon: { iconName: 'ChevronDownSmall' },\n};\ntype ISpinButtonPropsWithDefaults = ISpinButtonProps & typeof DEFAULT_PROPS;\n\nconst INITIAL_STEP_DELAY = 400;\nconst STEP_DELAY = 75;\n\nconst useComponentRef = (\n  props: ISpinButtonProps,\n  input: React.RefObject<HTMLDivElement>,\n  value: string | undefined,\n) => {\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      get value() {\n        return value;\n      },\n      focus() {\n        if (input.current) {\n          input.current.focus();\n        }\n      },\n    }),\n    [input, value],\n  );\n};\n\nconst noOp = (): void => {\n  /**\n   * A noop input change handler. Using onInput instead of onChange was meant to address an issue\n   * which apparently has been resolved in React 16 (https://github.com/facebook/react/issues/7027).\n   * The no-op onChange handler was still needed because React gives console errors if an input\n   * doesn't have onChange.\n   *\n   * TODO (Fabric 8?) - switch to just calling onChange (this is a breaking change for any tests,\n   * ours or 3rd-party, which simulate entering text in a SpinButton)\n   */\n};\n\n/** Clamp the value to the provided min and/or max */\nconst clampValue = (value: number, { min, max }: { max?: number; min?: number }) => {\n  if (typeof max === 'number') {\n    value = Math.min(value, max);\n  }\n  if (typeof min === 'number') {\n    value = Math.max(value, min);\n  }\n  return value;\n};\n\nexport const SpinButtonBase: React.FunctionComponent<ISpinButtonProps> = React.forwardRef<\n  HTMLDivElement,\n  ISpinButtonProps\n>((propsWithoutDefaults, ref) => {\n  const props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults) as ISpinButtonPropsWithDefaults;\n  const {\n    disabled,\n    label,\n    min,\n    max,\n    step,\n    defaultValue,\n    value: valueFromProps,\n    precision: precisionFromProps,\n    labelPosition,\n    iconProps,\n    incrementButtonIcon,\n    incrementButtonAriaLabel,\n    decrementButtonIcon,\n    decrementButtonAriaLabel,\n    ariaLabel,\n    ariaDescribedBy,\n    upArrowButtonStyles: customUpArrowButtonStyles,\n    downArrowButtonStyles: customDownArrowButtonStyles,\n    theme,\n    ariaPositionInSet,\n    ariaSetSize,\n    ariaValueNow,\n    ariaValueText,\n    className,\n    inputProps,\n    onDecrement,\n    onIncrement,\n    iconButtonProps,\n    onValidate,\n    onChange,\n    styles,\n  } = props;\n\n  const input = React.useRef<HTMLInputElement>(null);\n  const inputId = useId('input');\n  const labelId = useId('Label');\n\n  const [isFocused, setIsFocused] = React.useState(false);\n  const [keyboardSpinDirection, setKeyboardSpinDirection] = React.useState(KeyboardSpinDirection.notSpinning);\n  const async = useAsync();\n\n  const precision = React.useMemo(() => {\n    return precisionFromProps ?? Math.max(calculatePrecision(step), 0);\n  }, [precisionFromProps, step]);\n\n  /**\n   * Actual current value. If `props.value` is provided (controlled), it will always be used.\n   * If not (uncontrolled), this tracks the current value based on user modifications.\n   * Note that while the user is editing text in the field, this will not be updated until \"commit\"\n   * (blur or press enter).\n   */\n  const [value, setValue] = useControllableValue(valueFromProps, defaultValue ?? String(min || 0), onChange);\n  /**\n   * \"Uncommitted\" internal value while the user is editing text in the field. This lets us wait to\n   * call `onChange` (and possibly update the real value) until the user \"commits\" the value by\n   * pressing enter or blurring the field.\n   */\n  const [intermediateValue, setIntermediateValue] = React.useState<string>();\n\n  const { current: internalState } = React.useRef<ISpinButtonInternalState>({\n    stepTimeoutHandle: -1,\n    latestValue: undefined,\n    latestIntermediateValue: undefined,\n  });\n  // On each render, update this saved value used by callbacks. (This should be safe even if render\n  // is called multiple times, because an event handler or timeout callback will only run once.)\n  internalState.latestValue = value;\n  internalState.latestIntermediateValue = intermediateValue;\n\n  const previousValueFromProps = usePrevious(valueFromProps);\n  React.useEffect(() => {\n    // If props.value changes while editing, clear the intermediate value\n    if (valueFromProps !== previousValueFromProps && intermediateValue !== undefined) {\n      setIntermediateValue(undefined);\n    }\n  }, [valueFromProps, previousValueFromProps, intermediateValue]);\n\n  const classNames = getClassNames(styles, {\n    theme: theme!,\n    disabled,\n    isFocused,\n    keyboardSpinDirection,\n    labelPosition,\n    className,\n  });\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties, [\n    'onBlur',\n    'onFocus',\n    'className',\n    'onChange',\n  ]);\n\n  /** Validate (commit) function called on blur or enter keypress. */\n  const validate = React.useCallback(\n    (ev: React.SyntheticEvent<HTMLElement>): void => {\n      // Only run validation if the value changed\n      const enteredValue = internalState.latestIntermediateValue;\n      if (enteredValue !== undefined && enteredValue !== internalState.latestValue) {\n        let newValue: string | undefined;\n        if (onValidate) {\n          newValue = onValidate(enteredValue, ev) as string | undefined;\n        } else if (enteredValue && enteredValue.trim().length && !isNaN(Number(enteredValue))) {\n          // default validation handling\n          newValue = String(clampValue(Number(enteredValue), { min, max }));\n        }\n        if (newValue !== undefined && newValue !== internalState.latestValue) {\n          // Commit the value if it changed\n          setValue(newValue, ev);\n        }\n      }\n\n      // Done validating, so clear the intermediate typed value (if any)\n      setIntermediateValue(undefined);\n    },\n    [internalState, max, min, onValidate, setValue],\n  );\n\n  /**\n   * Stop spinning (clear any currently pending update and set spinning to false)\n   */\n  const stop = React.useCallback((): void => {\n    if (internalState.stepTimeoutHandle >= 0) {\n      async.clearTimeout(internalState.stepTimeoutHandle);\n      internalState.stepTimeoutHandle = -1;\n    }\n    if (internalState.spinningByMouse || keyboardSpinDirection !== KeyboardSpinDirection.notSpinning) {\n      internalState.spinningByMouse = false;\n      setKeyboardSpinDirection(KeyboardSpinDirection.notSpinning);\n    }\n  }, [internalState, keyboardSpinDirection, async]);\n\n  /**\n   * Update the value with the given stepFunction.\n   * Also starts spinning for mousedown events by scheduling another update with setTimeout.\n   * @param stepFunction - function to use to step by\n   * @param event - The event that triggered the updateValue\n   */\n  const updateValue = React.useCallback(\n    (\n      stepFunction: Required<ISpinButtonProps>['onIncrement'],\n      ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLInputElement>,\n    ): void => {\n      ev.persist();\n\n      if (internalState.latestIntermediateValue !== undefined) {\n        // Edge case: if intermediateValue is set, this means that the user was editing the input\n        // text and then started spinning (either with mouse or keyboard). We need to validate and\n        // call onChange before starting to spin.\n        if (ev.type === 'keydown' || ev.type === 'mousedown') {\n          // For the arrow keys, we have to manually trigger validation.\n          // (For the buttons, validation will happen automatically since the input's onBlur will\n          // be triggered after mousedown on the button completes.)\n          validate(ev);\n        }\n        async.requestAnimationFrame(() => {\n          // After handling any value updates, do the spinning update\n          updateValue(stepFunction, ev);\n        });\n        return;\n      }\n\n      // Call the step function and update the value.\n      // (Note: we access the latest value via internalState (not directly) to ensure we don't use\n      // a stale captured value. This is mainly important for spinning by mouse, where we trigger\n      // additional calls to the original updateValue function via setTimeout. It also lets us\n      // avoid useCallback deps on frequently changing values.)\n      const newValue = stepFunction(internalState.latestValue || '', ev) as string | undefined;\n      if (newValue !== undefined && newValue !== internalState.latestValue) {\n        setValue(newValue, ev);\n      }\n\n      // Schedule the next spin if applicable\n      // (will be canceled if there's a mouseup before the timeout runs)\n      const wasSpinning = internalState.spinningByMouse;\n      internalState.spinningByMouse = ev.type === 'mousedown';\n      if (internalState.spinningByMouse) {\n        internalState.stepTimeoutHandle = async.setTimeout(\n          () => {\n            updateValue(stepFunction, ev);\n          },\n          wasSpinning ? STEP_DELAY : INITIAL_STEP_DELAY, // the first step is slower\n        );\n      }\n    },\n    [internalState, async, validate, setValue],\n  );\n\n  /** Composed increment handler (uses `props.onIncrement` or default) */\n  const handleIncrement = React.useCallback(\n    (newValue: string): string | void => {\n      if (onIncrement) {\n        return onIncrement(newValue);\n      } else {\n        let numericValue = clampValue(Number(newValue) + Number(step), { max });\n        numericValue = precisionRound(numericValue, precision);\n        return String(numericValue);\n      }\n    },\n    [precision, max, onIncrement, step],\n  );\n\n  /** Composed decrement handler (uses `props.onDecrement` or default) */\n  const handleDecrement = React.useCallback(\n    (newValue: string): string | void => {\n      if (onDecrement) {\n        return onDecrement(newValue);\n      } else {\n        let numericValue = clampValue(Number(newValue) - Number(step), { min });\n        numericValue = precisionRound(numericValue, precision);\n        return String(numericValue);\n      }\n    },\n    [precision, min, onDecrement, step],\n  );\n\n  /** Handles when the user types in the input */\n  const handleInputChange = (ev: React.FormEvent<HTMLInputElement>): void => {\n    setIntermediateValue((ev.target as HTMLInputElement).value);\n  };\n\n  /** Composed focus handler (does internal stuff and calls `props.onFocus`) */\n  const handleFocus = (ev: React.FocusEvent<HTMLInputElement>): void => {\n    // We can't set focus on a non-existing element\n    if (!input.current) {\n      return;\n    }\n    if (internalState.spinningByMouse || keyboardSpinDirection !== KeyboardSpinDirection.notSpinning) {\n      stop();\n    }\n    input.current.select();\n    setIsFocused(true);\n    props.onFocus?.(ev);\n  };\n\n  /** Composed blur handler (does internal stuff and calls `props.onBlur`) */\n  const handleBlur = (ev: React.FocusEvent<HTMLInputElement>): void => {\n    validate(ev);\n    setIsFocused(false);\n    props.onBlur?.(ev);\n  };\n\n  /** Update value when arrow keys are pressed, commit on enter, or revert on escape */\n  const handleKeyDown = (ev: React.KeyboardEvent<HTMLInputElement>): void => {\n    // eat the up and down arrow keys to keep focus in the spinButton\n    // (especially when a spinButton is inside of a FocusZone)\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which === KeyCodes.up || ev.which === KeyCodes.down || ev.which === KeyCodes.enter) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n    if (disabled) {\n      stop();\n      return;\n    }\n\n    let spinDirection = KeyboardSpinDirection.notSpinning;\n\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.up:\n        spinDirection = KeyboardSpinDirection.up;\n        updateValue(handleIncrement, ev);\n        break;\n      case KeyCodes.down:\n        spinDirection = KeyboardSpinDirection.down;\n        updateValue(handleDecrement, ev);\n        break;\n      case KeyCodes.enter:\n        // Commit the edited value\n        validate(ev);\n        break;\n      case KeyCodes.escape:\n        // Revert to previous value\n        setIntermediateValue(undefined);\n        break;\n    }\n    // style the increment/decrement button to look active\n    // when the corresponding up/down arrow keys trigger a step\n    if (keyboardSpinDirection !== spinDirection) {\n      setKeyboardSpinDirection(spinDirection);\n    }\n  };\n\n  /** Stop spinning on keyUp if the up or down arrow key fired this event */\n  const handleKeyUp = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (disabled || ev.which === KeyCodes.up || ev.which === KeyCodes.down) {\n        stop();\n        return;\n      }\n    },\n    [disabled, stop],\n  );\n\n  const handleIncrementMouseDown = React.useCallback(\n    (ev: React.MouseEvent<HTMLElement>): void => {\n      updateValue(handleIncrement, ev);\n    },\n    [handleIncrement, updateValue],\n  );\n\n  const handleDecrementMouseDown = React.useCallback(\n    (ev: React.MouseEvent<HTMLElement>): void => {\n      updateValue(handleDecrement, ev);\n    },\n    [handleDecrement, updateValue],\n  );\n\n  useComponentRef(props, input, value);\n  useDebugWarnings(props);\n\n  const valueIsNumber = !!value && !isNaN(Number(value)); // Number('') is 0 which may not be desirable\n\n  const labelContent = (iconProps || label) && (\n    <div className={classNames.labelWrapper}>\n      {iconProps && <Icon {...iconProps} className={classNames.icon} aria-hidden=\"true\" />}\n      {label && (\n        <Label id={labelId} htmlFor={inputId} className={classNames.label} disabled={disabled}>\n          {label}\n        </Label>\n      )}\n    </div>\n  );\n\n  return (\n    <div className={classNames.root} ref={ref}>\n      {labelPosition !== Position.bottom && labelContent}\n      <div\n        {...nativeProps}\n        className={classNames.spinButtonWrapper}\n        aria-label={ariaLabel && ariaLabel}\n        aria-posinset={ariaPositionInSet}\n        aria-setsize={ariaSetSize}\n        data-ktp-target={true}\n      >\n        <input\n          // Display intermediateValue while editing the text (before commit)\n          value={intermediateValue ?? value}\n          id={inputId}\n          onChange={noOp}\n          onInput={handleInputChange}\n          className={classNames.input}\n          type=\"text\"\n          autoComplete=\"off\"\n          role=\"spinbutton\"\n          aria-labelledby={label && labelId}\n          // TODO: test what happens while editing\n          aria-valuenow={ariaValueNow ?? (valueIsNumber ? Number(value) : undefined)}\n          aria-valuetext={ariaValueText ?? (valueIsNumber ? undefined : value)}\n          aria-valuemin={min}\n          aria-valuemax={max}\n          aria-describedby={ariaDescribedBy}\n          onBlur={handleBlur}\n          ref={input}\n          onFocus={handleFocus}\n          onKeyDown={handleKeyDown}\n          onKeyUp={handleKeyUp}\n          disabled={disabled}\n          aria-disabled={disabled}\n          data-lpignore\n          data-ktp-execute-target={true}\n          {...inputProps}\n        />\n        <span className={classNames.arrowButtonsContainer}>\n          <IconButton\n            styles={getArrowButtonStyles(theme!, true, customUpArrowButtonStyles)}\n            className={'ms-UpButton'}\n            checked={keyboardSpinDirection === KeyboardSpinDirection.up}\n            disabled={disabled}\n            iconProps={incrementButtonIcon}\n            onMouseDown={handleIncrementMouseDown}\n            onMouseLeave={stop}\n            onMouseUp={stop}\n            tabIndex={-1}\n            ariaLabel={incrementButtonAriaLabel}\n            data-is-focusable={false}\n            {...iconButtonProps}\n          />\n          <IconButton\n            styles={getArrowButtonStyles(theme!, false, customDownArrowButtonStyles)}\n            className={'ms-DownButton'}\n            checked={keyboardSpinDirection === KeyboardSpinDirection.down}\n            disabled={disabled}\n            iconProps={decrementButtonIcon}\n            onMouseDown={handleDecrementMouseDown}\n            onMouseLeave={stop}\n            onMouseUp={stop}\n            tabIndex={-1}\n            ariaLabel={decrementButtonAriaLabel}\n            data-is-focusable={false}\n            {...iconButtonProps}\n          />\n        </span>\n      </div>\n      {labelPosition === Position.bottom && labelContent}\n    </div>\n  );\n});\nSpinButtonBase.displayName = COMPONENT_NAME;\n\nconst useDebugWarnings = (props: ISpinButtonProps) => {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: COMPONENT_NAME,\n      props,\n      mutuallyExclusive: { value: 'defaultValue' },\n    });\n  }\n};\n"]}
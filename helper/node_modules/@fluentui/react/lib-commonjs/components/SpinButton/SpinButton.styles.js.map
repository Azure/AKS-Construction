{"version":3,"file":"SpinButton.styles.js","sourceRoot":"../src/","sources":["components/SpinButton/SpinButton.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import { concatStyleSets, HighContrastSelector, IconFontSizes, getInputFocusStyle } from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\nimport { Position } from '../../Positioning';\nimport type { IRawStyle, ITheme } from '../../Styling';\nimport type { IButtonStyles } from '../../Button';\nimport type { ISpinButtonStyles, ISpinButtonStyleProps } from './SpinButton.types';\n\nconst ARROW_BUTTON_WIDTH = 23;\nconst ARROW_BUTTON_ICON_SIZE = 8;\nconst DEFAULT_HEIGHT = 32;\nconst DEFAULT_MIN_WIDTH = 86;\nconst LABEL_MARGIN = 10;\n\nconst getDisabledStyles = memoizeFunction(\n  (theme: ITheme): IRawStyle => {\n    const { semanticColors } = theme;\n\n    const SpinButtonTextColorDisabled = semanticColors.disabledText;\n    const SpinButtonBackgroundColorDisabled = semanticColors.disabledBackground;\n\n    return {\n      backgroundColor: SpinButtonBackgroundColorDisabled,\n      pointerEvents: 'none',\n      cursor: 'default',\n      color: SpinButtonTextColorDisabled,\n      selectors: {\n        ':after': {\n          borderColor: SpinButtonBackgroundColorDisabled,\n        },\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    };\n  },\n);\n\nexport const getArrowButtonStyles = memoizeFunction(\n  (theme: ITheme, isUpArrow: boolean, customSpecificArrowStyles?: Partial<IButtonStyles>): IButtonStyles => {\n    const { palette, semanticColors, effects } = theme;\n\n    // TODO: after updating the semanticColor slots all this need to be reevaluated.\n    const ArrowButtonTextColor = palette.neutralSecondary;\n    const ArrowButtonTextColorHovered = semanticColors.buttonText;\n    const ArrowButtonTextColorPressed = semanticColors.buttonText;\n\n    const ArrowButtonBackgroundHovered = semanticColors.buttonBackgroundHovered;\n    const ArrowButtonBackgroundPressed = semanticColors.buttonBackgroundPressed;\n\n    const defaultArrowButtonStyles: IButtonStyles = {\n      root: {\n        outline: 'none',\n        display: 'block',\n        height: '50%',\n        width: ARROW_BUTTON_WIDTH,\n        padding: 0,\n        backgroundColor: 'transparent',\n        textAlign: 'center',\n        cursor: 'default',\n        color: ArrowButtonTextColor,\n        selectors: {\n          '&.ms-DownButton': {\n            borderRadius: `0 0 ${effects.roundedCorner2} 0`,\n          },\n          '&.ms-UpButton': {\n            borderRadius: `0 ${effects.roundedCorner2} 0 0`,\n          },\n        },\n      },\n      rootHovered: {\n        backgroundColor: ArrowButtonBackgroundHovered,\n        color: ArrowButtonTextColorHovered,\n      },\n      rootChecked: {\n        backgroundColor: ArrowButtonBackgroundPressed,\n        color: ArrowButtonTextColorPressed,\n        selectors: {\n          [HighContrastSelector]: {\n            backgroundColor: 'Highlight',\n            color: 'HighlightText',\n          },\n        },\n      },\n      rootPressed: {\n        backgroundColor: ArrowButtonBackgroundPressed,\n        color: ArrowButtonTextColorPressed,\n        selectors: {\n          [HighContrastSelector]: {\n            backgroundColor: 'Highlight',\n            color: 'HighlightText',\n          },\n        },\n      },\n      rootDisabled: {\n        opacity: 0.5,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'GrayText',\n            opacity: 1,\n          },\n        },\n      },\n      icon: {\n        fontSize: ARROW_BUTTON_ICON_SIZE,\n        marginTop: 0,\n        marginRight: 0,\n        marginBottom: 0,\n        marginLeft: 0,\n      },\n    };\n\n    // No specific styles needed as of now.\n    const defaultUpArrowButtonStyles: Partial<IButtonStyles> = {};\n\n    const defaultDownArrowButtonStyles: Partial<IButtonStyles> = {};\n\n    return concatStyleSets(\n      defaultArrowButtonStyles,\n      isUpArrow ? defaultUpArrowButtonStyles : defaultDownArrowButtonStyles,\n      customSpecificArrowStyles,\n    ) as IButtonStyles;\n  },\n);\n\nexport const getStyles = (props: ISpinButtonStyleProps): ISpinButtonStyles => {\n  const { theme, className, labelPosition, disabled, isFocused } = props;\n  const { palette, semanticColors, effects, fonts } = theme;\n  const SpinButtonRootBorderColor = semanticColors.inputBorder;\n  const SpinButtonRootBackgroundColor = semanticColors.inputBackground;\n  const SpinButtonRootBorderColorHovered = semanticColors.inputBorderHovered;\n  const SpinButtonRootBorderColorFocused = semanticColors.inputFocusBorderAlt;\n  const SpinButtonInputTextColor = semanticColors.inputText;\n  const SpinButtonInputTextColorSelected = palette.white;\n  const SpinButtonInputBackgroundColorSelected = semanticColors.inputBackgroundChecked;\n  const SpinButtonIconDisabledColor = semanticColors.disabledText;\n\n  return {\n    root: [\n      fonts.medium,\n      {\n        outline: 'none',\n        width: '100%',\n        minWidth: DEFAULT_MIN_WIDTH,\n      },\n      className,\n    ],\n\n    labelWrapper: [\n      {\n        display: 'inline-flex',\n        alignItems: 'center',\n      },\n      labelPosition === Position.start && {\n        height: DEFAULT_HEIGHT,\n        float: 'left',\n        marginRight: LABEL_MARGIN,\n      },\n      labelPosition === Position.end && {\n        height: DEFAULT_HEIGHT,\n        float: 'right',\n        marginLeft: LABEL_MARGIN,\n      },\n      labelPosition === Position.top && {\n        // Due to the lineHeight set on the label (below), the height of the wrapper (contains icon+label)\n        // ends up 1px taller than a standard label height, causing the vertical alignment to be off when\n        // the SpinButton is displayed with the label on top next to other form fields.\n        // Decrease the wrapper's effective height slightly to compensate.\n        marginBottom: -1,\n      },\n    ],\n\n    icon: [\n      {\n        padding: '0 5px',\n        fontSize: IconFontSizes.large,\n      },\n      disabled && {\n        color: SpinButtonIconDisabledColor,\n      },\n    ],\n\n    label: {\n      pointerEvents: 'none',\n      // centering the label with the icon by forcing the exact same height as the icon.\n      lineHeight: IconFontSizes.large,\n    },\n\n    spinButtonWrapper: [\n      {\n        display: 'flex',\n        position: 'relative',\n        boxSizing: 'border-box',\n        height: DEFAULT_HEIGHT,\n        minWidth: DEFAULT_MIN_WIDTH,\n        selectors: {\n          // setting border using pseudo-element here in order to prevent:\n          // input and chevron buttons to overlap border under certain resolutions\n          ':after': {\n            pointerEvents: 'none',\n            content: \"''\",\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            bottom: 0,\n            right: 0,\n            borderWidth: '1px',\n            borderStyle: 'solid',\n            borderColor: SpinButtonRootBorderColor,\n            borderRadius: effects.roundedCorner2,\n          },\n        },\n      },\n      (labelPosition === Position.top || labelPosition === Position.bottom) && {\n        width: '100%',\n      },\n      !disabled && [\n        {\n          selectors: {\n            ':hover': {\n              selectors: {\n                ':after': {\n                  borderColor: SpinButtonRootBorderColorHovered,\n                },\n                [HighContrastSelector]: {\n                  selectors: {\n                    ':after': {\n                      borderColor: 'Highlight',\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n        isFocused && {\n          selectors: {\n            '&&': getInputFocusStyle(SpinButtonRootBorderColorFocused, effects.roundedCorner2),\n          },\n        },\n      ],\n      disabled && getDisabledStyles(theme),\n    ],\n\n    input: [\n      'ms-spinButton-input',\n      {\n        boxSizing: 'border-box',\n        boxShadow: 'none',\n        borderStyle: 'none',\n        flex: 1,\n        margin: 0,\n        fontSize: fonts.medium.fontSize,\n        fontFamily: 'inherit',\n        color: SpinButtonInputTextColor,\n        backgroundColor: SpinButtonRootBackgroundColor,\n        height: '100%',\n        padding: '0 8px 0 9px',\n        outline: 0,\n        display: 'block',\n        minWidth: DEFAULT_MIN_WIDTH - ARROW_BUTTON_WIDTH - 2,\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        cursor: 'text',\n        userSelect: 'text',\n        borderRadius: `${effects.roundedCorner2} 0 0 ${effects.roundedCorner2}`,\n      },\n      !disabled && {\n        selectors: {\n          '::selection': {\n            backgroundColor: SpinButtonInputBackgroundColorSelected,\n            color: SpinButtonInputTextColorSelected,\n            selectors: {\n              [HighContrastSelector]: {\n                backgroundColor: 'Highlight',\n                borderColor: 'Highlight',\n                color: 'HighlightText',\n              },\n            },\n          },\n        },\n      },\n      disabled && getDisabledStyles(theme),\n    ],\n\n    arrowButtonsContainer: [\n      {\n        display: 'block',\n        height: '100%',\n        cursor: 'default',\n      },\n      disabled && getDisabledStyles(theme),\n    ],\n  };\n};\n"]}
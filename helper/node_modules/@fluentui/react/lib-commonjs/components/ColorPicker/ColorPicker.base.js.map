{"version":3,"file":"ColorPicker.base.js","sourceRoot":"../src/","sources":["components/ColorPicker/ColorPicker.base.tsx"],"names":[],"mappings":";;;;AAAA,6BAA+B;AAC/B,6CAAqG;AACrG,6CAA4C;AAC5C,yCAA4C;AAC5C,gEAA+D;AAC/D,kEAAiE;AACjE,yDAAwD;AACxD,uDASsC;AACtC,oDAAoD;AACpD,+EAA8E;AAC9E,2EAA0E;AAC1E,qDAAoD;AACpD,yDAAwD;AACxD,yDAAwD;AACxD,yDAAwD;AACxD,+DAA8D;AAC9D,+DAA8D;AAC9D,4EAA0E;AA4B1E,IAAM,aAAa,GAAG,8BAAkB,EAA8C,CAAC;AAEvF,IAAM,kBAAkB,GAAqB,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AAE9E,IAAM,SAAS,GAAsD;IACnE,GAAG,EAAE,UAAU;IACf,CAAC,EAAE,UAAU;IACb,CAAC,EAAE,YAAY;IACf,CAAC,EAAE,WAAW;IACd,CAAC,EAAE,YAAY;IACf,CAAC,EAAE,mBAAmB;CACvB,CAAC;AAEF;;GAEG;AACH;IAAqC,2CAAqD;IAoCxF,yBAAY,KAAwB;QAApC,YACE,kBAAM,KAAK,CAAC,SAkDb;QA4KO,kBAAY,GAAG,UAAC,EAAiC,EAAE,KAAa;YACtE,KAAI,CAAC,YAAY,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;QAC/B,CAAC,CAAC;QAEM,iBAAW,GAAG,UAAC,EAAiC,EAAE,CAAS;YACjE,KAAI,CAAC,YAAY,CAAC,EAAE,EAAE,iBAAO,CAAC,KAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;QACtD,CAAC,CAAC;QAEF,8DAA8D;QACtD,kBAAY,GAAG,UAAC,EAAiC,EAAE,KAAa;YACtE,IAAM,OAAO,GAAG,KAAI,CAAC,KAAK,CAAC,SAAS,KAAK,cAAc,CAAC,CAAC,CAAC,iBAAO,CAAC,CAAC,CAAC,iBAAO,CAAC;YAC5E,KAAI,CAAC,YAAY,CAAC,EAAE,EAAE,OAAO,CAAC,KAAI,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACtE,CAAC,CAAC;QAyDM,aAAO,GAAG,UAAC,KAAyC;;YACpD,IAAA,KAA0B,KAAI,CAAC,KAAK,EAAlC,KAAK,WAAA,EAAE,YAAY,kBAAe,CAAC;YAC3C,IAAI,CAAC,YAAY,EAAE;gBACjB,OAAO;aACR;YAED,yFAAyF;YACjF,IAAA,KAAK,GAAgB,YAAY,MAA5B,EAAE,SAAS,GAAK,YAAY,UAAjB,CAAkB;YAC1C,IAAM,KAAK,GAAG,SAAS,KAAK,KAAK,CAAC;YAClC,IAAM,OAAO,GAAG,SAAS,KAAK,GAAG,CAAC;YAClC,IAAM,cAAc,GAAG,SAAS,KAAK,GAAG,CAAC;YACzC,IAAM,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,uBAAc,CAAC,CAAC,CAAC,wBAAe,CAAC;YAC3D,IAAI,KAAK,CAAC,MAAM,IAAI,SAAS,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;gBACjE,iEAAiE;gBACjE,IAAI,QAAQ,SAAoB,CAAC;gBACjC,IAAI,KAAK,EAAE;oBACT,QAAQ,GAAG,uCAAkB,CAAC,GAAG,GAAG,uBAAU,CAAC,KAAK,CAAC,CAAC,CAAC;iBACxD;qBAAM,IAAI,OAAO,IAAI,cAAc,EAAE;oBACpC,IAAM,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,iBAAO,CAAC,CAAC,CAAC,iBAAO,CAAC;oBAC5C,QAAQ,GAAG,OAAO,CAAC,KAAK,EAAE,aAAK,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,wBAAe,CAAC,CAAC,CAAC;iBAClE;qBAAM;oBACL,QAAQ,GAAG,mCAAgB,CACzB,uBAAU,CAAC,sCACN,KAAK,gBACP,SAAS,IAAG,MAAM,CAAC,KAAK,CAAC,MACnB,CAAC,CACX,CAAC;iBACH;gBAED,iCAAiC;gBACjC,KAAI,CAAC,YAAY,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;aACpC;iBAAM;gBACL,kEAAkE;gBAClE,sEAAsE;gBACtE,KAAI,CAAC,QAAQ,CAAC,EAAE,YAAY,EAAE,SAAS,EAAE,CAAC,CAAC;aAC5C;QACH,CAAC,CAAC;QArUA,kCAAsB,CAAC,KAAI,CAAC,CAAC;QAE7B,IAAM,OAAO,GAAG,KAAK,CAAC,OAAQ,CAAC,CAAC,4CAA4C;QAE5E,4BAAgB,CAAC,aAAa,EAAE,KAAK,EAAE;YACrC,QAAQ,EAAE,aAAa;YACvB,QAAQ,EAAE,aAAa;YACvB,UAAU,EAAE,eAAe;YAC3B,SAAS,EAAE,cAAc;YACzB,UAAU,EAAE,eAAe;YAC3B,iBAAiB,EAAE,WAAW;SAC/B,CAAC,CAAC;QAEH,mDAAmD;QACnD,IAAI,OAAO,CAAC,GAAG,EAAE;YACf,wDAAwD;YACxD,gBAAI,CAAC,0GAA0G,CAAC,CAAC;SAClH;QAED,KAAI,CAAC,KAAK,GAAG;YACX,KAAK,EAAE,kBAAkB,CAAC,KAAK,CAAC,IAAI,uCAAkB,CAAC,SAAS,CAAE;SACnE,CAAC;QAEF,KAAI,CAAC,mBAAmB,GAAG,EAAS,CAAC;QACrC,KAAwB,UAAkB,EAAlB,yCAAkB,EAAlB,gCAAkB,EAAlB,IAAkB,EAAE;YAAvC,IAAM,SAAS,2BAAA;YAClB,KAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,GAAG,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAI,EAAE,SAAS,CAAC,CAAC;SAChF;QAED,IAAM,cAAc,GAAG,eAAe,CAAC,YAAY,CAAC,OAAwC,CAAC;QAE7F,KAAI,CAAC,WAAW,GAAG;YACjB,4CAA4C;YAC5C,CAAC,EAAE,KAAK,CAAC,QAAQ,IAAI,OAAO,CAAC,GAAG,IAAI,cAAc,CAAC,GAAG;YACtD,CAAC,EAAE,KAAK,CAAC,UAAU,IAAI,OAAO,CAAC,KAAK,IAAI,cAAc,CAAC,KAAK;YAC5D,CAAC,EAAE,KAAK,CAAC,SAAS,IAAI,OAAO,CAAC,IAAI,IAAI,cAAc,CAAC,IAAI;YACzD,CAAC,EAAE,KAAK,CAAC,UAAU,IAAI,OAAO,CAAC,KAAK,IAAI,cAAc,CAAC,KAAK;YAC5D,GAAG,EAAE,KAAK,CAAC,QAAQ,IAAI,OAAO,CAAC,GAAG,IAAI,cAAc,CAAC,GAAG;YACxD,CAAC,EAAE,OAAO,CAAC,YAAY,IAAI,cAAc,CAAC,YAAY;YACtD,2CAA2C;SAC5C,CAAC;QAEF,KAAI,CAAC,QAAQ,0DACR,cAAc;YACjB,kDAAkD;YAClD,cAAc,EAAE,KAAI,CAAC,WAAW,CAAC,CAAC,EAClC,qBAAqB,EAAE,KAAI,CAAC,WAAW,CAAC,CAAC,KACtC,OAAO,CACX,CAAC;;IACJ,CAAC;IAED,sBAAW,kCAAK;aAAhB;YACE,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QAC1B,CAAC;;;OAAA;IAEM,4CAAkB,GAAzB,UAA0B,SAAsC,EAAE,SAAsC;QACtG,oEAAoE;QACpE,IAAI,SAAS,KAAK,IAAI,CAAC,KAAK,EAAE;YAC5B,IAAM,KAAK,GAAG,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7C,IAAI,KAAK,EAAE;gBACT,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;aACrC;SACF;IACH,CAAC;IAEM,gCAAM,GAAb;QAAA,iBA0HC;QAzHC,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACzB,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;QAElC,IAAA,KAAK,GAOH,KAAK,MAPF,EACL,SAAS,GAMP,KAAK,UANE,EACT,MAAM,GAKJ,KAAK,OALD,EACN,SAAS,GAIP,KAAK,UAJE;QACT,mDAAmD;QACnD,KAEE,KAAK,kBAFiC;QADxC,mDAAmD;QACnD,iBAAiB,mBAAG,SAAS,KAAK,MAAM,KAAA,EACxC,YAAY,GACV,KAAK,aADK,CACJ;QACF,IAAA,KAAK,GAAK,IAAI,CAAC,KAAK,MAAf,CAAgB;QAC7B,IAAM,eAAe,GAAG,SAAS,KAAK,cAAc,CAAC;QACrD,IAAM,eAAe,GAAG,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAC5E,IAAM,OAAO,GAAG,eAAe,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACpD,IAAM,OAAO,GAAG,eAAe,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;QAE9D,IAAM,UAAU,GAAG,aAAa,CAAC,MAAO,EAAE;YACxC,KAAK,EAAE,KAAM;YACb,SAAS,WAAA;YACT,SAAS,WAAA;SACV,CAAC,CAAC;QAEH,IAAM,sBAAsB,GAAG,CAAC,UAAU,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QACrG,IAAI,CAAC,iBAAiB,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YACrD,sBAAsB,CAAC,IAAI,CAAC,OAAO,EAAK,OAAO,MAAG,CAAC,CAAC;SACrD;QACD,IAAM,SAAS,GAAG,OAAO,CAAC,mBAAmB,CAAC,OAAO,CAAC,KAAK,EAAE,sBAAsB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAE/F,OAAO,CACL,6BAAK,SAAS,EAAE,UAAU,CAAC,IAAI,EAAE,IAAI,EAAC,OAAO,gBAAa,SAAS;YACjE,6BAAK,SAAS,EAAE,UAAU,CAAC,KAAK;gBAC9B,oBAAC,+BAAc,IACb,KAAK,EAAE,KAAK,EACZ,QAAQ,EAAE,IAAI,CAAC,YAAY,EAC3B,SAAS,EAAE,OAAO,CAAC,WAAW,EAC9B,eAAe,EAAE,OAAO,CAAC,iBAAiB,EAC1C,eAAe,EAAE,OAAO,CAAC,iBAAiB,EAC1C,SAAS,EAAE,UAAU,CAAC,cAAc,GACpC;gBACF,6BAAK,SAAS,EAAE,UAAU,CAAC,aAAa;oBACtC,6BAAK,SAAS,EAAE,UAAU,CAAC,UAAU;wBACnC,oBAAC,yBAAW,IACV,SAAS,EAAC,QAAQ,EAClB,IAAI,EAAC,KAAK;4BACV,mDAAmD;4BACnD,SAAS,EAAE,OAAO,CAAC,GAAG,IAAI,OAAO,CAAC,YAAY,EAC9C,KAAK,EAAE,KAAK,CAAC,CAAC,EACd,QAAQ,EAAE,IAAI,CAAC,WAAW,GAC1B;wBACD,CAAC,iBAAiB,IAAI,CACrB,oBAAC,yBAAW,IACV,SAAS,EAAC,UAAU,EACpB,IAAI,EAAE,SAAqC,EAC3C,SAAS,EAAE,eAAe,CAAC,CAAC,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,EACnF,YAAY,EAAE,KAAK,CAAC,GAAG,EACvB,KAAK,EAAE,OAAO,EACd,QAAQ,EAAE,IAAI,CAAC,YAAY,GAC3B,CACH,CACG;oBACL,KAAK,CAAC,WAAW,IAAI,CACpB,6BAAK,SAAS,EAAE,UAAU,CAAC,cAAc;wBACvC,6BACE,SAAS,EAAE,UAAU,CAAC,WAAW,GAAG,aAAa,EACjD,KAAK,EAAE;gCACL,eAAe,EAAE,KAAK,CAAC,GAAG;6BAC3B,GACD,CACE,CACP,CACG;gBAIN,+BAAO,SAAS,EAAE,UAAU,CAAC,KAAK,EAAE,IAAI,EAAC,OAAO,EAAC,WAAW,EAAC,GAAG,EAAC,WAAW,EAAC,GAAG;oBAC9E;wBACE,4BAAI,SAAS,EAAE,UAAU,CAAC,WAAW;4BACnC,4BAAI,SAAS,EAAE,UAAU,CAAC,YAAY,IAAG,UAAU,CAAC,GAAG,CAAM;4BAC7D,gCAAK,UAAU,CAAC,CAAC,CAAM;4BACvB,gCAAK,UAAU,CAAC,CAAC,CAAM;4BACvB,gCAAK,UAAU,CAAC,CAAC,CAAM;4BACtB,CAAC,iBAAiB,IAAI,4BAAI,SAAS,EAAE,UAAU,CAAC,cAAc,IAAG,OAAO,CAAM,CAC5E,CACC;oBACR;wBACE,gCACG,eAAe,CAAC,GAAG,CAAC,UAAC,IAAoB;4BACxC,IAAI,CAAC,IAAI,KAAK,GAAG,IAAI,IAAI,KAAK,GAAG,CAAC,IAAI,iBAAiB,EAAE;gCACvD,OAAO,IAAI,CAAC;6BACb;4BACD,IAAM,cAAc,GAAG,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;4BACnD,OAAO,CACL,4BAAI,GAAG,EAAE,IAAI;gCACX,oBAAC,qBAAW,qBACV,OAAO,EAAE,cAAc,EACvB,eAAe,EAAE,iCAAe,CAAC,YAAY,EAC7C,IAAI,EAAC,OAAO,IACR,YAAY;oCAEhB,oBAAC,qBAAS,IACR,SAAS,EAAE,UAAU,CAAC,KAAK,EAC3B,QAAQ,EAAE,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EACxC,MAAM,EAAE,KAAI,CAAC,OAAO,EACpB,KAAK,EAAE,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAClC,UAAU,EAAE,KAAK,EACjB,SAAS,EAAE,UAAU,CAAC,IAAI,CAAC,EAC3B,YAAY,EAAC,KAAK,EAClB,OAAO,EAAE,CAAC,CAAC,cAAc,GACzB,CACU,CACX,CACN,CAAC;wBACJ,CAAC,CAAC,CACC,CACC,CACF,CACJ,CACF,CACP,CAAC;IACJ,CAAC;IAEO,0CAAgB,GAAxB,UAAyB,SAAyB;QAC1C,IAAA,KAA0B,IAAI,CAAC,KAAK,EAAlC,KAAK,WAAA,EAAE,YAAY,kBAAe,CAAC;QAC3C,IAAI,YAAY,IAAI,YAAY,CAAC,SAAS,KAAK,SAAS,EAAE;YACxD,OAAO,YAAY,CAAC,KAAK,CAAC;SAC3B;QACD,IAAI,SAAS,KAAK,KAAK,EAAE;YACvB,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;SAC/B;aAAM,IAAI,OAAO,KAAK,CAAC,SAAS,CAAC,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAW,CAAC,EAAE;YACrF,OAAO,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;SACjC;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,yFAAyF;IACjF,0CAAgB,GAAxB,UAAyB,SAAyB;QACxC,IAAA,YAAY,GAAK,IAAI,CAAC,KAAK,aAAf,CAAgB;QACpC,+DAA+D;QAC/D,IAAI,CAAC,YAAY,IAAI,YAAY,CAAC,SAAS,KAAK,SAAS,EAAE;YACzD,OAAO,SAAS,CAAC;SAClB;QAEO,IAAA,KAAK,GAAK,YAAY,MAAjB,CAAkB;QAC/B,wEAAwE;QACxE,IAAI,SAAS,KAAK,KAAK,IAAI,KAAK,CAAC,MAAM,IAAI,uBAAc,IAAI,KAAK,CAAC,MAAM,IAAI,uBAAc,EAAE;YAC3F,OAAO,SAAS,CAAC;SAClB;QAED,IAAM,QAAQ,GAAmB,SAAS,CAAC,SAAS,CAAC,CAAC;QAEtD,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAgBO,uCAAa,GAArB,UAAsB,SAAyB,EAAE,KAAwC,EAAE,QAAiB;;QAC1G,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QAC/B,IAAM,KAAK,GAAG,SAAS,KAAK,KAAK,CAAC;QAClC,IAAM,OAAO,GAAG,SAAS,KAAK,GAAG,CAAC;QAClC,IAAM,cAAc,GAAG,SAAS,KAAK,GAAG,CAAC;QACzC,QAAQ,GAAG,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,uBAAc,CAAC,CAAC,CAAC,wBAAe,CAAC,CAAC;QAEhF,+DAA+D;QAC/D,IAAM,eAAe,GAAG,KAAK,CAAC,CAAC,CAAC,kBAAS,CAAC,CAAC,CAAC,mBAAU,CAAC;QACvD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YACnC,OAAO;SACR;QAED,8EAA8E;QAC9E,IAAI,OAAgB,CAAC;QACrB,IAAI,QAAQ,KAAK,EAAE,EAAE;YACnB,sCAAsC;YACtC,OAAO,GAAG,KAAK,CAAC;SACjB;aAAM,IAAI,KAAK,EAAE;YAChB,yFAAyF;YACzF,2FAA2F;YAC3F,8FAA8F;YAC9F,OAAO,GAAG,QAAQ,CAAC,MAAM,KAAK,uBAAc,CAAC;SAC9C;aAAM,IAAI,OAAO,IAAI,cAAc,EAAE;YACpC,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,wBAAe,CAAC;SAC/C;aAAM;YACL,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,sBAAa,CAAC;SAC7C;QAED,IAAI,CAAC,OAAO,EAAE;YACZ,oFAAoF;YACpF,kFAAkF;YAClF,IAAI,CAAC,QAAQ,CAAC,EAAE,YAAY,EAAE,EAAE,SAAS,WAAA,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;SACjE;aAAM,IAAI,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,KAAK,QAAQ,EAAE;YAChD,uEAAuE;YACvE,yFAAyF;YACzF,8DAA8D;YAC9D,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE;gBAC3B,IAAI,CAAC,QAAQ,CAAC,EAAE,YAAY,EAAE,SAAS,EAAE,CAAC,CAAC;aAC5C;SACF;aAAM;YACL,6CAA6C;YAC7C,IAAM,QAAQ,GAAG,KAAK;gBACpB,CAAC,CAAC,uCAAkB,CAAC,GAAG,GAAG,QAAQ,CAAC;gBACpC,CAAC,CAAC,cAAc;oBAChB,CAAC,CAAC,iBAAO,CAAC,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;oBAClC,CAAC,CAAC,mCAAgB,uCACX,KAAK,gBAEP,SAAS,IAAG,MAAM,CAAC,QAAQ,CAAC,OAC7B,CAAC;YACP,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;SACpC;IACH,CAAC;IAwCD;;;;OAIG;IACK,sCAAY,GAApB,UAAqB,EAAiD,EAAE,QAA4B;QAClG,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO;SACR;QAEK,IAAA,KAA0B,IAAI,CAAC,KAAK,EAAlC,KAAK,WAAA,EAAE,YAAY,kBAAe,CAAC;QAC3C,sEAAsE;QACtE,IAAM,gBAAgB,GAAG,QAAQ,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,IAAI,QAAQ,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG,CAAC;QAE9E,IAAI,gBAAgB,IAAI,YAAY,EAAE;YACpC,2FAA2F;YAC3F,0BAA0B;YAC1B,IAAI,EAAE,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;gBAC7B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;gBAClC,IAAI,EAAE,CAAC,gBAAgB,EAAE;oBACvB,OAAO;iBACR;aACF;YACD,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,YAAY,EAAE,SAAS,EAAE,CAAC,CAAC;SAC7D;IACH,CAAC;IAtYa,4BAAY,GAA+B;QACvD,SAAS,EAAE,OAAO;QAClB,OAAO,EAAE;YACP,mBAAmB,EAAE,6BAA6B;YAClD,GAAG,EAAE,KAAK;YACV,GAAG,EAAE,KAAK;YACV,KAAK,EAAE,OAAO;YACd,IAAI,EAAE,MAAM;YACZ,KAAK,EAAE,OAAO;YACd,YAAY,EAAE,cAAc;YAC5B,YAAY,EAAE,KAAK;YACnB,WAAW,EAAE,wCAAkB,CAAC,YAAY,CAAC,SAAU;YACvD,iBAAiB,EAAE,wCAAkB,CAAC,YAAY,CAAC,eAAgB;YACnE,iBAAiB,EAAE,wCAAkB,CAAC,YAAY,CAAC,eAAgB;YACnE,QAAQ,EAAE,oDAAoD;YAC9D,UAAU,EAAE,iCAAiC;YAC7C,iBAAiB,EAAE,wCAAwC;YAC3D,QAAQ,EAAE,+BAA+B;YACzC,UAAU,EAAE,iCAAiC;YAC7C,SAAS,EAAE,gCAAgC;SAC5C;KACF,CAAC;IAkXJ,sBAAC;CAAA,AAxYD,CAAqC,KAAK,CAAC,SAAS,GAwYnD;AAxYY,0CAAe;AA0Y5B,SAAS,kBAAkB,CAAC,KAAwB;IAC1C,IAAA,KAAK,GAAK,KAAK,MAAV,CAAW;IACxB,OAAO,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,uCAAkB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;AACvE,CAAC","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, initializeComponentRef, warnDeprecations, warn } from '../../Utilities';\nimport { TextField } from '../../TextField';\nimport { TooltipHost } from '../../Tooltip';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ColorRectangle } from './ColorRectangle/ColorRectangle';\nimport { ColorSlider } from './ColorSlider/ColorSlider';\nimport {\n  MAX_COLOR_ALPHA,\n  MAX_COLOR_RGB,\n  MAX_HEX_LENGTH,\n  MAX_RGBA_LENGTH,\n  MIN_HEX_LENGTH,\n  MIN_RGBA_LENGTH,\n  HEX_REGEX,\n  RGBA_REGEX,\n} from '../../utilities/color/consts';\n// These imports are separated to help with bundling\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { getColorFromRGBA } from '../../utilities/color/getColorFromRGBA';\nimport { clamp } from '../../utilities/color/clamp';\nimport { updateA } from '../../utilities/color/updateA';\nimport { updateT } from '../../utilities/color/updateT';\nimport { updateH } from '../../utilities/color/updateH';\nimport { correctRGB } from '../../utilities/color/correctRGB';\nimport { correctHex } from '../../utilities/color/correctHex';\nimport { ColorRectangleBase } from './ColorRectangle/ColorRectangle.base';\nimport type {\n  IColorPickerProps,\n  IColorPickerStyleProps,\n  IColorPickerStyles,\n  IColorPicker,\n  IColorPickerStrings,\n} from './ColorPicker.types';\nimport type { IColor, IRGB } from '../../utilities/color/interfaces';\n\ntype ColorComponent = keyof Pick<IColor, 'r' | 'g' | 'b' | 'a' | 't' | 'hex'>;\ntype ColorErrorKeys = keyof Pick<\n  IColorPickerStrings,\n  'hexError' | 'alphaError' | 'transparencyError' | 'redError' | 'greenError' | 'blueError'\n>;\n\nexport interface IColorPickerState {\n  /** Most recently selected color */\n  color: IColor;\n  /** Color component currently being edited via a text field (if intermediate value is invalid) */\n  editingColor?: {\n    /** Which color component is being edited */\n    component: ColorComponent;\n    /** Currently entered value, which is not valid */\n    value: string;\n  };\n}\n\nconst getClassNames = classNamesFunction<IColorPickerStyleProps, IColorPickerStyles>();\n\nconst allColorComponents: ColorComponent[] = ['hex', 'r', 'g', 'b', 'a', 't'];\n\nconst errorKeys: { [component in ColorComponent]: ColorErrorKeys } = {\n  hex: 'hexError',\n  r: 'redError',\n  g: 'greenError',\n  b: 'blueError',\n  a: 'alphaError',\n  t: 'transparencyError',\n};\n\n/**\n * {@docCategory ColorPicker}\n */\nexport class ColorPickerBase extends React.Component<IColorPickerProps, IColorPickerState> implements IColorPicker {\n  public static defaultProps: Partial<IColorPickerProps> = {\n    alphaType: 'alpha',\n    strings: {\n      rootAriaLabelFormat: 'Color picker, {0} selected.',\n      hex: 'Hex',\n      red: 'Red',\n      green: 'Green',\n      blue: 'Blue',\n      alpha: 'Alpha',\n      transparency: 'Transparency',\n      hueAriaLabel: 'Hue',\n      svAriaLabel: ColorRectangleBase.defaultProps.ariaLabel!,\n      svAriaValueFormat: ColorRectangleBase.defaultProps.ariaValueFormat!,\n      svAriaDescription: ColorRectangleBase.defaultProps.ariaDescription!,\n      hexError: 'Hex values must be between 3 and 6 characters long',\n      alphaError: 'Alpha must be between 0 and 100',\n      transparencyError: 'Transparency must be between 0 and 100',\n      redError: 'Red must be between 0 and 255',\n      greenError: 'Green must be between 0 and 255',\n      blueError: 'Blue must be between 0 and 255',\n    },\n  };\n\n  private _textChangeHandlers: {\n    [K in ColorComponent]: (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => void;\n  };\n  /**\n   * Strings displayed in the UI as text field labels (these are in a separate object for convenient\n   * indexing by short color component name).\n   */\n  private _textLabels: { [K in ColorComponent]: string };\n\n  /** Strings besides red/green/blue/alpha/hex, with defaults for all values except the deprecated `hue` */\n  private _strings: Required<Omit<IColorPickerStrings, ColorComponent | 'hue'>> & Pick<IColorPickerStrings, 'hue'>;\n\n  constructor(props: IColorPickerProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    const strings = props.strings!; // always defined since it's in defaultProps\n\n    warnDeprecations('ColorPicker', props, {\n      hexLabel: 'strings.hex',\n      redLabel: 'strings.red',\n      greenLabel: 'strings.green',\n      blueLabel: 'strings.blue',\n      alphaLabel: 'strings.alpha',\n      alphaSliderHidden: 'alphaType',\n    });\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (strings.hue) {\n      // warnDeprecations can't handle nested deprecated props\n      warn(\"ColorPicker property 'strings.hue' was used but has been deprecated. Use 'strings.hueAriaLabel' instead.\");\n    }\n\n    this.state = {\n      color: _getColorFromProps(props) || getColorFromString('#ffffff')!,\n    };\n\n    this._textChangeHandlers = {} as any;\n    for (const component of allColorComponents) {\n      this._textChangeHandlers[component] = this._onTextChange.bind(this, component);\n    }\n\n    const defaultStrings = ColorPickerBase.defaultProps.strings as Required<IColorPickerStrings>;\n\n    this._textLabels = {\n      /* eslint-disable deprecation/deprecation */\n      r: props.redLabel || strings.red || defaultStrings.red,\n      g: props.greenLabel || strings.green || defaultStrings.green,\n      b: props.blueLabel || strings.blue || defaultStrings.blue,\n      a: props.alphaLabel || strings.alpha || defaultStrings.alpha,\n      hex: props.hexLabel || strings.hex || defaultStrings.hex,\n      t: strings.transparency || defaultStrings.transparency,\n      /* eslint-enable deprecation/deprecation */\n    };\n\n    this._strings = {\n      ...defaultStrings,\n      // these aria labels default to the visible labels\n      alphaAriaLabel: this._textLabels.a,\n      transparencyAriaLabel: this._textLabels.t,\n      ...strings,\n    };\n  }\n\n  public get color(): IColor {\n    return this.state.color;\n  }\n\n  public componentDidUpdate(prevProps: Readonly<IColorPickerProps>, prevState: Readonly<IColorPickerState>): void {\n    // if props changed (as opposed to a state update), update the color\n    if (prevProps !== this.props) {\n      const color = _getColorFromProps(this.props);\n      if (color) {\n        this._updateColor(undefined, color);\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const props = this.props;\n    const strings = this._strings;\n    const textLabels = this._textLabels;\n    const {\n      theme,\n      className,\n      styles,\n      alphaType,\n      // eslint-disable-next-line deprecation/deprecation\n      alphaSliderHidden = alphaType === 'none',\n      tooltipProps,\n    } = props;\n    const { color } = this.state;\n    const useTransparency = alphaType === 'transparency';\n    const colorComponents = ['hex', 'r', 'g', 'b', useTransparency ? 't' : 'a'];\n    const atValue = useTransparency ? color.t : color.a;\n    const atLabel = useTransparency ? textLabels.t : textLabels.a;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      alphaType,\n    });\n\n    const selectedColorAriaParts = [textLabels.r, color.r, textLabels.g, color.g, textLabels.b, color.b];\n    if (!alphaSliderHidden && typeof atValue === 'number') {\n      selectedColorAriaParts.push(atLabel, `${atValue}%`);\n    }\n    const ariaLabel = strings.rootAriaLabelFormat.replace('{0}', selectedColorAriaParts.join(' '));\n\n    return (\n      <div className={classNames.root} role=\"group\" aria-label={ariaLabel}>\n        <div className={classNames.panel}>\n          <ColorRectangle\n            color={color}\n            onChange={this._onSVChanged}\n            ariaLabel={strings.svAriaLabel}\n            ariaDescription={strings.svAriaDescription}\n            ariaValueFormat={strings.svAriaValueFormat}\n            className={classNames.colorRectangle}\n          />\n          <div className={classNames.flexContainer}>\n            <div className={classNames.flexSlider}>\n              <ColorSlider\n                className=\"is-hue\"\n                type=\"hue\"\n                // eslint-disable-next-line deprecation/deprecation\n                ariaLabel={strings.hue || strings.hueAriaLabel}\n                value={color.h}\n                onChange={this._onHChanged}\n              />\n              {!alphaSliderHidden && (\n                <ColorSlider\n                  className=\"is-alpha\"\n                  type={alphaType as 'alpha' | 'transparency'}\n                  ariaLabel={useTransparency ? strings.transparencyAriaLabel : strings.alphaAriaLabel}\n                  overlayColor={color.hex}\n                  value={atValue}\n                  onChange={this._onATChanged}\n                />\n              )}\n            </div>\n            {props.showPreview && (\n              <div className={classNames.flexPreviewBox}>\n                <div\n                  className={classNames.colorSquare + ' is-preview'}\n                  style={{\n                    backgroundColor: color.str,\n                  }}\n                />\n              </div>\n            )}\n          </div>\n\n          {/* Give the table role=group to prevent it from being read as a table (ideally we should\n          just get rid of the table, but this has the potential of breaking consumers) */}\n          <table className={classNames.table} role=\"group\" cellPadding=\"0\" cellSpacing=\"0\">\n            <thead>\n              <tr className={classNames.tableHeader}>\n                <td className={classNames.tableHexCell}>{textLabels.hex}</td>\n                <td>{textLabels.r}</td>\n                <td>{textLabels.g}</td>\n                <td>{textLabels.b}</td>\n                {!alphaSliderHidden && <td className={classNames.tableAlphaCell}>{atLabel}</td>}\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                {colorComponents.map((comp: ColorComponent) => {\n                  if ((comp === 'a' || comp === 't') && alphaSliderHidden) {\n                    return null;\n                  }\n                  const tooltipContent = this._getTooltipValue(comp);\n                  return (\n                    <td key={comp}>\n                      <TooltipHost\n                        content={tooltipContent}\n                        directionalHint={DirectionalHint.bottomCenter}\n                        role=\"alert\"\n                        {...tooltipProps}\n                      >\n                        <TextField\n                          className={classNames.input}\n                          onChange={this._textChangeHandlers[comp]}\n                          onBlur={this._onBlur}\n                          value={this._getDisplayValue(comp)}\n                          spellCheck={false}\n                          ariaLabel={textLabels[comp]}\n                          autoComplete=\"off\"\n                          invalid={!!tooltipContent}\n                        />\n                      </TooltipHost>\n                    </td>\n                  );\n                })}\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n\n  private _getDisplayValue(component: ColorComponent): string {\n    const { color, editingColor } = this.state;\n    if (editingColor && editingColor.component === component) {\n      return editingColor.value;\n    }\n    if (component === 'hex') {\n      return color[component] || '';\n    } else if (typeof color[component] === 'number' && !isNaN(color[component] as number)) {\n      return String(color[component]);\n    }\n    return '';\n  }\n\n  /* Get the error tooltip value for a component if the component is in an invalid state */\n  private _getTooltipValue(component: ColorComponent): string | undefined {\n    const { editingColor } = this.state;\n    // if the component does not have an interim value, it is valid\n    if (!editingColor || editingColor.component !== component) {\n      return undefined;\n    }\n\n    const { value } = editingColor;\n    // for hex, do not show a tooltip if the value is between 3-6 characters\n    if (component === 'hex' && value.length >= MIN_HEX_LENGTH && value.length <= MAX_HEX_LENGTH) {\n      return undefined;\n    }\n\n    const errorKey: ColorErrorKeys = errorKeys[component];\n\n    return this._strings[errorKey];\n  }\n\n  private _onSVChanged = (ev: React.MouseEvent<HTMLElement>, color: IColor): void => {\n    this._updateColor(ev, color);\n  };\n\n  private _onHChanged = (ev: React.MouseEvent<HTMLElement>, h: number): void => {\n    this._updateColor(ev, updateH(this.state.color, h));\n  };\n\n  /** Callback for when the alpha/transparency slider changes */\n  private _onATChanged = (ev: React.MouseEvent<HTMLElement>, value: number): void => {\n    const updater = this.props.alphaType === 'transparency' ? updateT : updateA;\n    this._updateColor(ev, updater(this.state.color, Math.round(value)));\n  };\n\n  private _onTextChange(component: ColorComponent, event: React.FormEvent<HTMLInputElement>, newValue?: string): void {\n    const color = this.state.color;\n    const isHex = component === 'hex';\n    const isAlpha = component === 'a';\n    const isTransparency = component === 't';\n    newValue = (newValue || '').substr(0, isHex ? MAX_HEX_LENGTH : MAX_RGBA_LENGTH);\n\n    // Ignore what the user typed if it contains invalid characters\n    const validCharsRegex = isHex ? HEX_REGEX : RGBA_REGEX;\n    if (!validCharsRegex.test(newValue)) {\n      return;\n    }\n\n    // Determine if the entry is valid (different methods for hex, alpha, and RGB)\n    let isValid: boolean;\n    if (newValue === '') {\n      // Empty string is obviously not valid\n      isValid = false;\n    } else if (isHex) {\n      // Technically hex values of length 3 are also valid, but committing the value here would\n      // cause it to be automatically converted to a value of length 6, which may not be what the\n      // user wanted if they're not finished typing. (Values of length 3 will be committed on blur.)\n      isValid = newValue.length === MAX_HEX_LENGTH;\n    } else if (isAlpha || isTransparency) {\n      isValid = Number(newValue) <= MAX_COLOR_ALPHA;\n    } else {\n      isValid = Number(newValue) <= MAX_COLOR_RGB;\n    }\n\n    if (!isValid) {\n      // If the new value is an empty string or other invalid value, save that to display.\n      // (if the user still hasn't entered anything on blur, the last value is restored)\n      this.setState({ editingColor: { component, value: newValue } });\n    } else if (String(color[component]) === newValue) {\n      // If the new value is the same as the current value, mostly ignore it.\n      // Exception is that if the user was previously editing the value (but hadn't yet entered\n      // a new valid value), we should clear the intermediate value.\n      if (this.state.editingColor) {\n        this.setState({ editingColor: undefined });\n      }\n    } else {\n      // Should be a valid color. Update the value.\n      const newColor = isHex\n        ? getColorFromString('#' + newValue)\n        : isTransparency\n        ? updateT(color, Number(newValue))\n        : getColorFromRGBA({\n            ...color,\n            // Overwrite whichever key is being updated with the new value\n            [component]: Number(newValue),\n          });\n      this._updateColor(event, newColor);\n    }\n  }\n\n  private _onBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    const { color, editingColor } = this.state;\n    if (!editingColor) {\n      return;\n    }\n\n    // If there was an intermediate incorrect value (such as too large or empty), correct it.\n    const { value, component } = editingColor;\n    const isHex = component === 'hex';\n    const isAlpha = component === 'a';\n    const isTransparency = component === 't';\n    const minLength = isHex ? MIN_HEX_LENGTH : MIN_RGBA_LENGTH;\n    if (value.length >= minLength && (isHex || !isNaN(Number(value)))) {\n      // Real value. Clamp to appropriate length (hex) or range (rgba).\n      let newColor: IColor | undefined;\n      if (isHex) {\n        newColor = getColorFromString('#' + correctHex(value));\n      } else if (isAlpha || isTransparency) {\n        const updater = isAlpha ? updateA : updateT;\n        newColor = updater(color, clamp(Number(value), MAX_COLOR_ALPHA));\n      } else {\n        newColor = getColorFromRGBA(\n          correctRGB({\n            ...color,\n            [component]: Number(value),\n          } as IRGB),\n        );\n      }\n\n      // Update state and call onChange\n      this._updateColor(event, newColor);\n    } else {\n      // Intermediate value was an empty string or too short (hex only).\n      // Just clear the intermediate state and revert to the previous value.\n      this.setState({ editingColor: undefined });\n    }\n  };\n\n  /**\n   * Update the displayed color and call change handlers if appropriate.\n   * @param ev - Event if call was triggered by an event (undefined if triggered by props change)\n   * @param newColor - Updated color\n   */\n  private _updateColor(ev: React.SyntheticEvent<HTMLElement> | undefined, newColor: IColor | undefined): void {\n    if (!newColor) {\n      return;\n    }\n\n    const { color, editingColor } = this.state;\n    // For black or white, the hue can change without changing the string.\n    const isDifferentColor = newColor.h !== color.h || newColor.str !== color.str;\n\n    if (isDifferentColor || editingColor) {\n      // If ev is undefined, it's an update from props (which should be unconditionally respected\n      // and not call onChange).\n      if (ev && this.props.onChange) {\n        this.props.onChange(ev, newColor);\n        if (ev.defaultPrevented) {\n          return;\n        }\n      }\n      this.setState({ color: newColor, editingColor: undefined });\n    }\n  }\n}\n\nfunction _getColorFromProps(props: IColorPickerProps): IColor | undefined {\n  const { color } = props;\n  return typeof color === 'string' ? getColorFromString(color) : color;\n}\n"]}
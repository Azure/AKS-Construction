{"version":3,"file":"ColorSlider.types.js","sourceRoot":"../src/","sources":["components/ColorPicker/ColorSlider/ColorSlider.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { ITheme, IStyle } from '../../../Styling';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../../Utilities';\n\n/**\n * {@docCategory ColorPicker}\n */\nexport interface IColorSlider {\n  /** Current value of the slider. */\n  value: number;\n}\n\n/**\n * {@docCategory ColorPicker}\n */\nexport interface IColorSliderProps {\n  /**\n   * Gets the component ref.\n   */\n  componentRef?: IRefObject<IColorSlider>;\n\n  /**\n   * Minimum value of the slider.\n   * @deprecated Will always be 0\n   */\n  minValue?: number;\n\n  /**\n   * Maximum value of the slider.\n   * @deprecated Will be 100 for alpha or transparency sliders, or 359 for hue sliders.\n   */\n  maxValue?: number;\n\n  /**\n   * Current value of the slider.\n   */\n  value?: number;\n\n  /**\n   * Label of the ColorSlider for the benefit of screen reader users.\n   */\n  ariaLabel?: string;\n\n  /**\n   * Type of slider to display.\n   * @defaultvalue 'hue'\n   */\n  type?: 'hue' | 'alpha' | 'transparency';\n\n  /**\n   * If true, the slider represents an alpha slider and will display a gray checkered pattern\n   * in the background. Otherwise, the slider represents a hue slider.\n   * @defaultvalue false\n   * @deprecated Use `type`\n   */\n  isAlpha?: boolean;\n\n  /**\n   * Hex color to use when rendering an alpha or transparency slider's overlay, *without* the `#`.\n   */\n  overlayColor?: string;\n\n  /**\n   * CSS-compatible string for the color of the thumb element.\n   * @deprecated Not used. Use `styles.sliderThumb` instead.\n   */\n  thumbColor?: string;\n\n  /**\n   * Custom style for the overlay element.\n   * @deprecated Use `overlayColor` instead\n   */\n  overlayStyle?: React.CSSProperties;\n\n  /**\n   * Callback issued when the value changes.\n   */\n  onChange?: (event: React.MouseEvent | React.KeyboardEvent, newValue?: number) => void;\n\n  /**\n   * Additional CSS class(es) to apply to the ColorSlider.\n   */\n  className?: string;\n\n  /**\n   * Theme (provided through customization).\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IColorSliderStyleProps, IColorSliderStyles>;\n}\n\n/**\n * {@docCategory ColorPicker}\n */\nexport type IColorSliderStyleProps = Required<Pick<IColorSliderProps, 'theme'>> &\n  Pick<IColorSliderProps, 'className' | 'type'> & {\n    /**\n     * @deprecated Use `type`\n     */\n    isAlpha?: boolean;\n  };\n\n/**\n * {@docCategory ColorPicker}\n */\nexport interface IColorSliderStyles {\n  /**\n   * Style set for the root element.\n   */\n  root?: IStyle;\n\n  /**\n   * Style set for the draggable thumb element.\n   */\n  sliderThumb?: IStyle;\n\n  /**\n   * Style set for the overlay element.\n   */\n  sliderOverlay?: IStyle;\n}\n"]}
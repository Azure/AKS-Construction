{"version":3,"file":"ColorRectangle.types.js","sourceRoot":"../src/","sources":["components/ColorPicker/ColorRectangle/ColorRectangle.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { ITheme, IStyle } from '../../../Styling';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../../Utilities';\nimport type { IColor } from '../../../utilities/color/interfaces';\n\n/**\n * {@docCategory ColorPicker}\n */\nexport interface IColorRectangle {\n  /** Currently selected color. */\n  color: IColor;\n}\n\n/**\n * {@docCategory ColorPicker}\n */\nexport interface IColorRectangleProps {\n  /**\n   * Gets the component ref.\n   */\n  componentRef?: IRefObject<IColorRectangle>;\n\n  /**\n   * Current color of the rectangle.\n   */\n  color: IColor;\n\n  /**\n   * Label of the ColorRectangle for the benefit of screen reader users.\n   * @defaultvalue 'Saturation and brightness'\n   */\n  ariaLabel?: string;\n\n  /**\n   * Format string for the color rectangle's current value as read by screen readers.\n   * The string must include descriptions and two placeholders for the current values:\n   * `{0}` for saturation and `{1}` for value/brightness.\n   * @defaultvalue `'Saturation {0} brightness {1}'`\n   */\n  ariaValueFormat?: string;\n\n  /**\n   * Detailed description for how to use the color rectangle. Moving the thumb horizontally adjusts\n   * saturation and moving it vertically adjusts value (essentially, brightness).\n   * @defaultvalue 'Use left and right arrow keys to set saturation. Use up and down arrow keys to set brightness.'\n   */\n  ariaDescription?: string;\n\n  /**\n   * Minimum width and height.\n   */\n  minSize?: number;\n\n  /**\n   * Additional CSS class(es) to apply to the ColorRectangle.\n   */\n  className?: string;\n\n  /**\n   * Theme (provided through customization).\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IColorRectangleStyleProps, IColorRectangleStyles>;\n\n  /**\n   * Callback for when the color changes.\n   */\n  onChange?: (ev: React.MouseEvent | React.KeyboardEvent, color: IColor) => void;\n}\n\n/**\n * {@docCategory ColorPicker}\n */\nexport interface IColorRectangleStyleProps {\n  /**\n   * Theme (provided through customization).\n   */\n  theme: ITheme;\n\n  /**\n   * Additional CSS class(es) to apply to the ColorRectangle.\n   */\n  className?: string;\n\n  /**\n   * Minimum width and height.\n   */\n  minSize?: number;\n}\n\n/**\n * {@docCategory ColorPicker}\n */\nexport interface IColorRectangleStyles {\n  /**\n   * Style set for the root element.\n   */\n  root?: IStyle;\n\n  /**\n   * Style set for the light-colored rectangle.\n   */\n  light?: IStyle;\n\n  /**\n   * Style set for the dark-colored rectangle.\n   */\n  dark?: IStyle;\n\n  /**\n   * Style set for the draggable thumb element.\n   */\n  thumb?: IStyle;\n\n  /**\n   * Style for a hidden detailed description for screen reader users.\n   */\n  description?: IStyle;\n}\n"]}
{"version":3,"file":"Announced.types.js","sourceRoot":"../src/","sources":["components/Announced/Announced.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { AnnouncedBase } from './Announced.base';\nimport type { IStyle } from '../../Styling';\nimport type { IStyleFunctionOrObject } from '../../Utilities';\nimport type { IReactProps } from '../../common/React.types';\n\n/**\n * {@docCategory Announced}\n */\nexport interface IAnnouncedProps extends IReactProps<AnnouncedBase>, React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * The status message the screen reader should announce.\n   */\n  message?: string;\n\n  /**\n   * Priority with which the screen reader should treat updates to this region.\n   * @default 'polite'\n   */\n  'aria-live'?: 'off' | 'polite' | 'assertive';\n\n  /**\n   * Optionally render the root of this component as another component type or primitive.\n   * The custom type **must** preserve any children or native props passed in.\n   * @default 'div'\n   */\n  as?: React.ElementType;\n\n  /** Call to provide customized styling that will layer on top of the variant rules. */\n  styles?: IStyleFunctionOrObject<{}, IAnnouncedStyles>;\n}\n\n/**\n * {@docCategory Announced}\n */\nexport type IAnnouncedStyleProps = Pick<IAnnouncedProps, 'className'>;\n\n/**\n * {@docCategory Announced}\n */\nexport interface IAnnouncedStyles {\n  /**\n   * Style override for the root element.\n   */\n  root: IStyle;\n\n  /**\n   * Style override for the screen reader text.\n   */\n  screenReaderText: IStyle;\n}\n"]}
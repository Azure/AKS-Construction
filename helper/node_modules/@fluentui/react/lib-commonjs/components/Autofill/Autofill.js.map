{"version":3,"file":"Autofill.js","sourceRoot":"../src/","sources":["components/Autofill/Autofill.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Async, getNativeProps, initializeComponentRef, inputProperties, isIE11, KeyCodes } from '../../Utilities';\nimport type { IAutofill, IAutofillProps } from './Autofill.types';\n\nexport interface IAutofillState {\n  inputValue: string;\n  isComposing: boolean;\n}\n\ninterface ICursorLocation {\n  start: number;\n  end: number;\n  dir: 'forward' | 'backward' | 'none' | undefined;\n}\n\nconst SELECTION_FORWARD = 'forward';\nconst SELECTION_BACKWARD = 'backward';\n\n/**\n * {@docCategory Autofill}\n */\nexport class Autofill extends React.Component<IAutofillProps, IAutofillState> implements IAutofill {\n  public static defaultProps = {\n    enableAutofillOnKeyPress: [KeyCodes.down, KeyCodes.up] as KeyCodes[],\n  };\n\n  private _inputElement = React.createRef<HTMLInputElement>();\n  private _autoFillEnabled = true;\n  private _async: Async;\n\n  public static getDerivedStateFromProps(props: IAutofillProps, state: IAutofillState): IAutofillState | null {\n    // eslint-disable-next-line deprecation/deprecation\n    if (props.updateValueInWillReceiveProps) {\n      // eslint-disable-next-line deprecation/deprecation\n      const updatedInputValue = props.updateValueInWillReceiveProps();\n      // Don't update if we have a null value or the value isn't changing\n      // the value should still update if an empty string is passed in\n      if (updatedInputValue !== null && updatedInputValue !== state.inputValue && !state.isComposing) {\n        return { ...state, inputValue: updatedInputValue };\n      }\n    }\n    return null;\n  }\n\n  constructor(props: IAutofillProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    this.state = {\n      inputValue: props.defaultVisibleValue || '',\n      isComposing: false,\n    };\n  }\n\n  public get cursorLocation(): number | null {\n    if (this._inputElement.current) {\n      const inputElement = this._inputElement.current;\n      if (inputElement.selectionDirection !== SELECTION_FORWARD) {\n        return inputElement.selectionEnd;\n      } else {\n        return inputElement.selectionStart;\n      }\n    } else {\n      return -1;\n    }\n  }\n\n  public get isValueSelected(): boolean {\n    return Boolean(this.inputElement && this.inputElement.selectionStart !== this.inputElement.selectionEnd);\n  }\n\n  public get value(): string {\n    return this._getControlledValue() || this.state.inputValue || '';\n  }\n\n  public get selectionStart(): number | null {\n    return this._inputElement.current ? this._inputElement.current.selectionStart : -1;\n  }\n\n  public get selectionEnd(): number | null {\n    return this._inputElement.current ? this._inputElement.current.selectionEnd : -1;\n  }\n\n  public get inputElement(): HTMLInputElement | null {\n    return this._inputElement.current;\n  }\n\n  public componentDidUpdate(_: any, _1: any, cursor: ICursorLocation | null) {\n    const { suggestedDisplayValue, shouldSelectFullInputValueInComponentDidUpdate, preventValueSelection } = this.props;\n    let differenceIndex = 0;\n\n    if (preventValueSelection) {\n      return;\n    }\n\n    if (\n      this._autoFillEnabled &&\n      this.value &&\n      suggestedDisplayValue &&\n      _doesTextStartWith(suggestedDisplayValue, this.value)\n    ) {\n      let shouldSelectFullRange = false;\n\n      if (shouldSelectFullInputValueInComponentDidUpdate) {\n        shouldSelectFullRange = shouldSelectFullInputValueInComponentDidUpdate();\n      }\n\n      if (shouldSelectFullRange && this._inputElement.current) {\n        this._inputElement.current.setSelectionRange(0, suggestedDisplayValue.length, SELECTION_BACKWARD);\n      } else {\n        while (\n          differenceIndex < this.value.length &&\n          this.value[differenceIndex].toLocaleLowerCase() === suggestedDisplayValue[differenceIndex].toLocaleLowerCase()\n        ) {\n          differenceIndex++;\n        }\n        if (differenceIndex > 0 && this._inputElement.current) {\n          this._inputElement.current.setSelectionRange(\n            differenceIndex,\n            suggestedDisplayValue.length,\n            SELECTION_BACKWARD,\n          );\n        }\n      }\n    } else if (this._inputElement.current) {\n      if (cursor !== null && !this._autoFillEnabled && !this.state.isComposing) {\n        this._inputElement.current.setSelectionRange(cursor.start, cursor.end, cursor.dir);\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n  }\n\n  public render(): JSX.Element {\n    const nativeProps = getNativeProps<React.InputHTMLAttributes<HTMLInputElement>>(this.props, inputProperties);\n    const style = { ...this.props.style, fontFamily: 'inherit' };\n    return (\n      <input\n        autoCapitalize=\"off\"\n        autoComplete=\"off\"\n        aria-autocomplete={'both'}\n        {...nativeProps}\n        style={style}\n        ref={this._inputElement}\n        value={this._getDisplayValue()}\n        onCompositionStart={this._onCompositionStart}\n        onCompositionUpdate={this._onCompositionUpdate}\n        onCompositionEnd={this._onCompositionEnd}\n        // TODO (Fabric 8?) - switch to calling only onChange. See notes in TextField._onInputChange.\n        onChange={this._onChanged}\n        onInput={this._onInputChanged}\n        onKeyDown={this._onKeyDown}\n        onClick={this.props.onClick ? this.props.onClick : this._onClick}\n        data-lpignore={true}\n      />\n    );\n  }\n\n  public focus() {\n    this._inputElement.current && this._inputElement.current.focus();\n  }\n\n  public clear() {\n    this._autoFillEnabled = true;\n    this._updateValue('', false);\n    this._inputElement.current && this._inputElement.current.setSelectionRange(0, 0);\n  }\n\n  public getSnapshotBeforeUpdate(): ICursorLocation | null {\n    const inel = this._inputElement.current;\n\n    if (inel && inel.selectionStart !== this.value.length) {\n      return {\n        start: inel.selectionStart ?? inel.value.length,\n        end: inel.selectionEnd ?? inel.value.length,\n        dir: (inel.selectionDirection as 'forward') || 'backward' || 'none',\n      };\n    }\n    return null;\n  }\n\n  // Composition events are used when the character/text requires several keystrokes to be completed.\n  // Some examples of this are mobile text input and languages like Japanese or Arabic.\n  // Find out more at https://developer.mozilla.org/en-US/docs/Web/Events/compositionstart\n  private _onCompositionStart = (ev: React.CompositionEvent<HTMLInputElement>) => {\n    this.setState({ isComposing: true });\n    this._autoFillEnabled = false;\n  };\n\n  // Composition events are used when the character/text requires several keystrokes to be completed.\n  // Some examples of this are mobile text input and languages like Japanese or Arabic.\n  // Find out more at https://developer.mozilla.org/en-US/docs/Web/Events/compositionstart\n  private _onCompositionUpdate = () => {\n    if (isIE11()) {\n      this._updateValue(this._getCurrentInputValue(), true);\n    }\n  };\n\n  // Composition events are used when the character/text requires several keystrokes to be completed.\n  // Some examples of this are mobile text input and languages like Japanese or Arabic.\n  // Find out more at https://developer.mozilla.org/en-US/docs/Web/Events/compositionstart\n  private _onCompositionEnd = (ev: React.CompositionEvent<HTMLInputElement>) => {\n    const inputValue = this._getCurrentInputValue();\n    this._tryEnableAutofill(inputValue, this.value, false, true);\n    this.setState({ isComposing: false });\n\n    // Due to timing, this needs to be async, otherwise no text will be selected.\n    this._async.setTimeout(() => {\n      // it's technically possible that the value of isComposing is reset during this timeout,\n      // so explicitly trigger this with composing=true here, since it is supposed to be the\n      // update for composition end\n      this._updateValue(this._getCurrentInputValue(), false);\n    }, 0);\n  };\n\n  private _onClick = () => {\n    if (this.value && this.value !== '' && this._autoFillEnabled) {\n      this._autoFillEnabled = false;\n    }\n  };\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLInputElement>) => {\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(ev);\n    }\n\n    // If the event is actively being composed, then don't alert autofill.\n    // Right now typing does not have isComposing, once that has been fixed any should be removed.\n\n    if (!(ev.nativeEvent as any).isComposing) {\n      // eslint-disable-next-line deprecation/deprecation\n      switch (ev.which) {\n        case KeyCodes.backspace:\n          this._autoFillEnabled = false;\n          break;\n        case KeyCodes.left:\n        case KeyCodes.right:\n          if (this._autoFillEnabled) {\n            this.setState({ inputValue: this.props.suggestedDisplayValue || '' });\n            this._autoFillEnabled = false;\n          }\n          break;\n        default:\n          if (!this._autoFillEnabled) {\n            // eslint-disable-next-line deprecation/deprecation\n            if (this.props.enableAutofillOnKeyPress!.indexOf(ev.which) !== -1) {\n              this._autoFillEnabled = true;\n            }\n          }\n          break;\n      }\n    }\n  };\n\n  private _onInputChanged = (ev: React.FormEvent<HTMLElement>) => {\n    const value: string = this._getCurrentInputValue(ev);\n\n    if (!this.state.isComposing) {\n      this._tryEnableAutofill(value, this.value, (ev.nativeEvent as any).isComposing);\n    }\n\n    // If it is not IE11 and currently composing, update the value\n    if (!(isIE11() && this.state.isComposing)) {\n      const nativeEventComposing = (ev.nativeEvent as any).isComposing;\n      const isComposing = nativeEventComposing === undefined ? this.state.isComposing : nativeEventComposing;\n      this._updateValue(value, isComposing);\n    }\n  };\n\n  private _onChanged = (): void => {\n    // Swallow this event, we don't care about it\n    // We must provide it because React PropTypes marks it as required, but onInput serves the correct purpose\n    return;\n  };\n\n  private _getCurrentInputValue(ev?: React.FormEvent<HTMLElement>): string {\n    if (ev && ev.target && (ev.target as HTMLInputElement).value) {\n      return (ev.target as HTMLInputElement).value;\n    } else if (this.inputElement && this.inputElement.value) {\n      return this.inputElement.value;\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * Attempts to enable autofill. Whether or not autofill is enabled depends on the input value,\n   * whether or not any text is selected, and only if the new input value is longer than the old input value.\n   * Autofill should never be set to true if the value is composing. Once compositionEnd is called, then\n   * it should be completed.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent for more information on composition.\n   * @param newValue - new input value\n   * @param oldValue - old input value\n   * @param isComposing - if true then the text is actively being composed and it has not completed.\n   * @param isComposed - if the text is a composed text value.\n   */\n  private _tryEnableAutofill(newValue: string, oldValue: string, isComposing?: boolean, isComposed?: boolean): void {\n    if (\n      !isComposing &&\n      newValue &&\n      this._inputElement.current &&\n      this._inputElement.current.selectionStart === newValue.length &&\n      !this._autoFillEnabled &&\n      (newValue.length > oldValue.length || isComposed)\n    ) {\n      this._autoFillEnabled = true;\n    }\n  }\n\n  /**\n   * Updates the current input value as well as getting a new display value.\n   * @param newValue - The new value from the input\n   */\n  private _updateValue = (newValue: string, composing: boolean) => {\n    // Only proceed if the value is nonempty and is different from the old value\n    // This is to work around the fact that, in IE 11, inputs with a placeholder fire an onInput event on focus\n    if (!newValue && newValue === this.value) {\n      return;\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    const { onInputChange, onInputValueChange } = this.props;\n    if (onInputChange) {\n      newValue = onInputChange?.(newValue, composing) || '';\n    }\n\n    this.setState({ inputValue: newValue }, () => onInputValueChange?.(newValue, composing));\n  };\n\n  private _getDisplayValue(): string {\n    if (this._autoFillEnabled) {\n      return _getDisplayValue(this.value, this.props.suggestedDisplayValue);\n    }\n\n    return this.value;\n  }\n\n  private _getControlledValue(): string | undefined {\n    const { value } = this.props;\n    if (value === undefined || typeof value === 'string') {\n      return value;\n    }\n\n    // eslint-disable-next-line no-console\n    console.warn(`props.value of Autofill should be a string, but it is ${value} with type of ${typeof value}`);\n\n    return value.toString();\n  }\n}\n/**\n * Returns a string that should be used as the display value.\n * It evaluates this based on whether or not the suggested value starts with the input value\n * and whether or not autofill is enabled.\n * @param inputValue - the value that the input currently has.\n * @param suggestedDisplayValue - the possible full value\n */\nfunction _getDisplayValue(inputValue: string, suggestedDisplayValue?: string): string {\n  let displayValue = inputValue;\n  if (suggestedDisplayValue && inputValue && _doesTextStartWith(suggestedDisplayValue, displayValue)) {\n    displayValue = suggestedDisplayValue;\n  }\n  return displayValue;\n}\n\nfunction _doesTextStartWith(text: string, startWith: string): boolean {\n  if (!text || !startWith) {\n    return false;\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    for (const val of [text, startWith]) {\n      if (typeof val !== 'string') {\n        throw new Error(\n          `${\n            Autofill.name\n            // eslint-disable-next-line @fluentui/max-len\n          } received non-string value \"${val}\" of type ${typeof val} from either input's value or suggestedDisplayValue`,\n        );\n      }\n    }\n  }\n\n  return text.toLocaleLowerCase().indexOf(startWith.toLocaleLowerCase()) === 0;\n}\n"]}
{"version":3,"file":"Dialog.types.js","sourceRoot":"../src/","sources":["components/Dialog/Dialog.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { DialogBase } from './Dialog.base';\nimport { DialogType } from './DialogContent.types';\nimport type { IModalProps } from '../../Modal';\nimport type { IDialogContentProps } from './DialogContent.types';\nimport type { IButtonProps } from '../../Button';\nimport type { IWithResponsiveModeState } from '../../ResponsiveMode';\nimport type { IAccessiblePopupProps } from '../../common/IAccessiblePopupProps';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport type { ICSSRule, ICSSPixelUnitRule } from '@fluentui/merge-styles';\n\n/**\n * {@docCategory Dialog}\n */\nexport interface IDialog {}\n\n/**\n * {@docCategory Dialog}\n */\nexport interface IDialogProps\n  extends React.ClassAttributes<DialogBase>,\n    // eslint-disable-next-line deprecation/deprecation\n    IWithResponsiveModeState,\n    IAccessiblePopupProps {\n  children?: React.ReactNode;\n  /**\n   * @deprecated Unused, returns no value\n   */\n  componentRef?: IRefObject<IDialog>;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules\n   */\n  styles?: IStyleFunctionOrObject<IDialogStyleProps, IDialogStyles>;\n\n  /**\n   * Theme provided by HOC.\n   */\n  theme?: ITheme;\n\n  /**\n   * Props to be passed through to Dialog Content\n   */\n  dialogContentProps?: IDialogContentProps;\n\n  /**\n   * A callback function for when the Dialog is dismissed from the close button or light dismiss.\n   * Can also be specified separately in content and modal.\n   */\n  onDismiss?: (ev?: React.MouseEvent<HTMLButtonElement>) => any;\n\n  /**\n   * Whether the dialog is hidden.\n   * @defaultvalue true\n   */\n  hidden?: boolean;\n\n  /**\n   * Props to be passed through to Modal\n   */\n  modalProps?: IModalProps;\n\n  /**\n   * Whether the dialog is displayed.\n   * @defaultvalue false\n   * @deprecated Use `hidden` instead\n   */\n  isOpen?: boolean;\n\n  /**\n   * Whether the overlay is dark themed.\n   * @defaultvalue true\n   * @deprecated Pass through via `modalProps` instead\n   */\n  isDarkOverlay?: boolean;\n\n  /**\n   * A callback function which is called after the Dialog is dismissed and the animation is complete.\n   * @deprecated Pass through via `modalProps` instead\n   */\n  onDismissed?: () => any;\n\n  /**\n   * Whether the dialog can be light dismissed by clicking outside the dialog (on the overlay).\n   * @defaultvalue false\n   * @deprecated Pass through via `modalProps` instead\n   */\n  isBlocking?: boolean;\n\n  /**\n   * Optional class name to be added to the root class\n   * @deprecated Pass through via `modalProps.className` instead\n   */\n  className?: string;\n\n  /**\n   * Optional override for container class\n   * @deprecated Pass through via `modalProps.className` instead\n   */\n  containerClassName?: string;\n\n  /**\n   * A callback function for when the Dialog content is mounted on the overlay layer\n   * @deprecated Pass through via `modalProps.layerProps` instead\n   */\n  onLayerDidMount?: () => void;\n\n  /**\n   * Deprecated at 0.81.2.\n   * @deprecated Use `onLayerDidMount` instead.\n   */\n  onLayerMounted?: () => void;\n\n  /**\n   * The type of Dialog to display.\n   * @defaultvalue DialogType.normal\n   * @deprecated Pass through via `dialogContentProps` instead.\n   */\n  type?: DialogType;\n\n  /**\n   * The title text to display at the top of the dialog.\n   * @deprecated Pass through via `dialogContentProps` instead.\n   */\n  title?: string | JSX.Element;\n\n  /**\n   * The subtext to display in the dialog.\n   * @deprecated Pass through via `dialogContentProps` instead.\n   */\n  subText?: string;\n\n  /**\n   * Optional override content class\n   * @deprecated Pass through via `dialogContentProps` instead as `className`.\n   */\n  contentClassName?: string;\n\n  /**\n   * Other top buttons that will show up next to the close button\n   * @deprecated Pass through via `dialogContentProps` instead.\n   */\n  topButtonsProps?: IButtonProps[];\n\n  /**\n   * Optional id for aria-LabelledBy\n   * @deprecated Pass through via `modalProps.titleAriaId` instead.\n   */\n  ariaLabelledById?: string;\n\n  /**\n   * Optional id for aria-DescribedBy\n   * @deprecated Pass through via `modalProps.subtitleAriaId` instead.\n   */\n  ariaDescribedById?: string;\n\n  /**\n   * Sets the minimum width of the dialog. It limits the width property to be not\n   * smaller than the value specified in min-width.\n   */\n  minWidth?: ICSSRule | ICSSPixelUnitRule;\n\n  /**\n   * Sets the maximum width for the dialog. It limits the width property to be larger\n   * than the value specified in max-width.\n   */\n  maxWidth?: ICSSRule | ICSSPixelUnitRule;\n}\n\n/**\n * {@docCategory Dialog}\n */\nexport interface IDialogStyleProps {\n  /**\n   * Accept theme prop.\n   */\n  theme: ITheme;\n\n  /**\n   * Accept custom classNames\n   */\n  className?: string;\n\n  /**\n   * Optional override for container class\n   * @deprecated Pass through via `modalProps.className` instead.\n   */\n  containerClassName?: string;\n\n  /**\n   * Optional override content class\n   * @deprecated Pass through via `dialogContentProps` instead as `className`.\n   */\n  contentClassName?: string;\n\n  /**\n   * Whether the dialog is hidden.\n   * @defaultvalue false\n   */\n  hidden?: boolean;\n\n  /**\n   * Default min-width for the dialog box.\n   * @defaultvalue '288px'\n   */\n  dialogDefaultMinWidth?: string | ICSSRule | ICSSPixelUnitRule;\n\n  /**\n   * Default max-width for the dialog box.\n   * @defaultvalue '340px'\n   */\n  dialogDefaultMaxWidth?: string | ICSSRule | ICSSPixelUnitRule;\n}\n\n/**\n * {@docCategory Dialog}\n */\nexport interface IDialogStyles {\n  /**\n   * Style for the root element.\n   */\n  root: IStyle;\n  main: IStyle;\n}\n"]}
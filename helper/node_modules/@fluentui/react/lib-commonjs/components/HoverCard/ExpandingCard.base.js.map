{"version":3,"file":"ExpandingCard.base.js","sourceRoot":"../src/","sources":["components/HoverCard/ExpandingCard.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, KeyCodes, Async, initializeComponentRef } from '../../Utilities';\nimport { ExpandingCardMode } from './ExpandingCard.types';\nimport { CardCallout } from './CardCallout/CardCallout';\nimport type { IExpandingCardProps, IExpandingCardStyles, IExpandingCardStyleProps } from './ExpandingCard.types';\n\nconst getClassNames = classNamesFunction<IExpandingCardStyleProps, IExpandingCardStyles>();\n\nexport interface IExpandingCardState {\n  firstFrameRendered: boolean;\n  needsScroll: boolean;\n}\n\nexport class ExpandingCardBase extends React.Component<IExpandingCardProps, IExpandingCardState> {\n  public static defaultProps = {\n    compactCardHeight: 156,\n    expandedCardHeight: 384,\n    directionalHintFixed: true,\n  };\n\n  private _classNames: { [key in keyof IExpandingCardStyles]: string };\n  private _expandedElem = React.createRef<HTMLDivElement>();\n  private _async: Async;\n\n  constructor(props: IExpandingCardProps) {\n    super(props);\n\n    this._async = new Async(this);\n    initializeComponentRef(this);\n\n    this.state = {\n      firstFrameRendered: false,\n      needsScroll: false,\n    };\n  }\n\n  public componentDidMount(): void {\n    this._checkNeedsScroll();\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n  }\n\n  public render(): JSX.Element {\n    const { styles, compactCardHeight, expandedCardHeight, theme, mode, className } = this.props;\n    const { needsScroll, firstFrameRendered } = this.state;\n\n    const finalHeight = compactCardHeight! + expandedCardHeight!;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      compactCardHeight,\n      className,\n      expandedCardHeight,\n      needsScroll: needsScroll,\n      expandedCardFirstFrameRendered: mode === ExpandingCardMode.expanded && firstFrameRendered,\n    });\n\n    const content: JSX.Element = (\n      <div onMouseEnter={this.props.onEnter} onMouseLeave={this.props.onLeave} onKeyDown={this._onKeyDown}>\n        {this._onRenderCompactCard()}\n        {this._onRenderExpandedCard()}\n      </div>\n    );\n\n    return (\n      <CardCallout {...this.props} content={content} finalHeight={finalHeight} className={this._classNames.root} />\n    );\n  }\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which === KeyCodes.escape) {\n      this.props.onLeave && this.props.onLeave(ev);\n    }\n  };\n\n  private _onRenderCompactCard = (): JSX.Element => {\n    return <div className={this._classNames.compactCard}>{this.props.onRenderCompactCard!(this.props.renderData)}</div>;\n  };\n\n  private _onRenderExpandedCard = (): JSX.Element => {\n    // firstFrameRendered helps in initially setting height of expanded card to 1px, even if mode prop is set to\n    // ExpandingCardMode.expanded on first render. This is to make sure transition animation takes place.\n    !this.state.firstFrameRendered &&\n      this._async.requestAnimationFrame(() => {\n        this.setState({\n          firstFrameRendered: true,\n        });\n      });\n\n    return (\n      <div className={this._classNames.expandedCard} ref={this._expandedElem}>\n        <div className={this._classNames.expandedCardScroll}>\n          {this.props.onRenderExpandedCard && this.props.onRenderExpandedCard(this.props.renderData)}\n        </div>\n      </div>\n    );\n  };\n\n  private _checkNeedsScroll = (): void => {\n    const { expandedCardHeight } = this.props;\n    this._async.requestAnimationFrame(() => {\n      if (this._expandedElem.current && this._expandedElem.current.scrollHeight >= expandedCardHeight!) {\n        this.setState({\n          needsScroll: true,\n        });\n      }\n    });\n  };\n}\n"]}
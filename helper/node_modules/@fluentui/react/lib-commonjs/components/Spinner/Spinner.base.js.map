{"version":3,"file":"Spinner.base.js","sourceRoot":"../src/","sources":["components/Spinner/Spinner.base.tsx"],"names":[],"mappings":";;;;AAAA,6BAA+B;AAC/B,iDAA2D;AAC3D,6CAAmG;AAGnG,IAAM,aAAa,GAAG,8BAAkB,EAAsC,CAAC;AAE/E;IAAiC,uCAAmC;IAApE;;IA2CA,CAAC;IApCQ,4BAAM,GAAb;QACE,mDAAmD;QAC7C,IAAA,KAAsF,IAAI,CAAC,KAAK,EAA9F,IAAI,UAAA,EAAE,IAAI,UAAA,EAAE,SAAS,eAAA,EAAE,QAAQ,cAAA,EAAE,MAAM,YAAA,EAAE,KAAK,WAAA,EAAE,KAAK,WAAA,EAAE,SAAS,eAAA,EAAE,aAAa,mBAAe,CAAC;QACvG,IAAM,aAAa,GAAG,SAAS,CAAC;QAChC,IAAM,WAAW,GAAG,0BAAc,CAAuC,IAAI,CAAC,KAAK,EAAE,yBAAa,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;QAE9G,mHAAmH;QACnH,6GAA6G;QAC7G,2CAA2C;QAC3C,IAAI,SAAS,GAAG,IAAI,CAAC;QACrB,IAAI,SAAS,KAAK,SAAS,IAAI,IAAI,KAAK,SAAS,EAAE;YACjD,mDAAmD;YACnD,SAAS,GAAG,IAAI,KAAK,2BAAW,CAAC,KAAK,CAAC,CAAC,CAAC,2BAAW,CAAC,KAAK,CAAC,CAAC,CAAC,2BAAW,CAAC,MAAM,CAAC;SACjF;QAED,IAAM,UAAU,GAAG,aAAa,CAAC,MAAO,EAAE;YACxC,KAAK,EAAE,KAAM;YACb,IAAI,EAAE,SAAS;YACf,SAAS,WAAA;YACT,aAAa,eAAA;SACd,CAAC,CAAC;QAEH,OAAO,CACL,gDAAS,WAAW,IAAE,SAAS,EAAE,UAAU,CAAC,IAAI;YAC9C,6BAAK,SAAS,EAAE,UAAU,CAAC,MAAM,GAAI;YACpC,KAAK,IAAI,6BAAK,SAAS,EAAE,UAAU,CAAC,KAAK,IAAG,KAAK,CAAO;YACxD,aAAa,IAAI,CAChB,6BAAK,IAAI,EAAC,QAAQ,eAAY,QAAQ;gBACpC,oBAAC,yBAAa;oBACZ,6BAAK,SAAS,EAAE,UAAU,CAAC,gBAAgB,IAAG,aAAa,CAAO,CACpD,CACZ,CACP,CACG,CACP,CAAC;IACJ,CAAC;IAzCa,wBAAY,GAAkB;QAC1C,IAAI,EAAE,2BAAW,CAAC,MAAM;QACxB,QAAQ,EAAE,QAAQ;QAClB,aAAa,EAAE,QAAQ;KACxB,CAAC;IAsCJ,kBAAC;CAAA,AA3CD,CAAiC,KAAK,CAAC,SAAS,GA2C/C;AA3CY,kCAAW","sourcesContent":["import * as React from 'react';\nimport { SpinnerType, SpinnerSize } from './Spinner.types';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\nimport type { ISpinnerProps, ISpinnerStyleProps, ISpinnerStyles } from './Spinner.types';\n\nconst getClassNames = classNamesFunction<ISpinnerStyleProps, ISpinnerStyles>();\n\nexport class SpinnerBase extends React.Component<ISpinnerProps, any> {\n  public static defaultProps: ISpinnerProps = {\n    size: SpinnerSize.medium,\n    ariaLive: 'polite',\n    labelPosition: 'bottom',\n  };\n\n  public render() {\n    // eslint-disable-next-line deprecation/deprecation\n    const { type, size, ariaLabel, ariaLive, styles, label, theme, className, labelPosition } = this.props;\n    const statusMessage = ariaLabel;\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['size']);\n\n    // SpinnerType is deprecated. If someone is still using this property, rather than putting the SpinnerType into the\n    // ISpinnerStyleProps, we'll map SpinnerType to its equivalent SpinnerSize and pass that in. Once SpinnerType\n    // finally goes away we should delete this.\n    let styleSize = size;\n    if (styleSize === undefined && type !== undefined) {\n      // eslint-disable-next-line deprecation/deprecation\n      styleSize = type === SpinnerType.large ? SpinnerSize.large : SpinnerSize.medium;\n    }\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      size: styleSize,\n      className,\n      labelPosition,\n    });\n\n    return (\n      <div {...nativeProps} className={classNames.root}>\n        <div className={classNames.circle} />\n        {label && <div className={classNames.label}>{label}</div>}\n        {statusMessage && (\n          <div role=\"status\" aria-live={ariaLive}>\n            <DelayedRender>\n              <div className={classNames.screenReaderText}>{statusMessage}</div>\n            </DelayedRender>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"]}
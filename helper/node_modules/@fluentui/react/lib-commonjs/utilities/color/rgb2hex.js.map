{"version":3,"file":"rgb2hex.js","sourceRoot":"../src/","sources":["utilities/color/rgb2hex.ts"],"names":[],"mappings":";;;AAAA,mCAAyC;AACzC,iCAAgC;AAEhC,wEAAwE;AACxE,SAAgB,OAAO,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS;IACrD,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAC/E,CAAC;AAFD,0BAEC;AAED,yEAAyE;AACzE,SAAS,eAAe,CAAC,GAAW;IAClC,GAAG,GAAG,aAAK,CAAC,GAAG,EAAE,sBAAa,CAAC,CAAC;IAChC,IAAM,GAAG,GAAG,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAE7B,OAAO,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;AAC5C,CAAC","sourcesContent":["import { MAX_COLOR_RGB } from './consts';\nimport { clamp } from './clamp';\n\n/** Converts RGB components to a hex color string (without # prefix). */\nexport function rgb2hex(r: number, g: number, b: number): string {\n  return [_rgbToPaddedHex(r), _rgbToPaddedHex(g), _rgbToPaddedHex(b)].join('');\n}\n\n/** Converts an RGB component to a 0-padded hex component of length 2. */\nfunction _rgbToPaddedHex(num: number): string {\n  num = clamp(num, MAX_COLOR_RGB);\n  const hex = num.toString(16);\n\n  return hex.length === 1 ? '0' + hex : hex;\n}\n"]}
{"version":3,"file":"SelectableDroppableText.types.js","sourceRoot":"../src/","sources":["utilities/selectableOption/SelectableDroppableText.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { IRefObject, IRenderFunction } from '../../Utilities';\nimport type { ICalloutProps } from '../../Callout';\nimport type { IPanelProps } from '../../Panel';\nimport type { ISelectableOption } from '../../utilities/selectableOption/SelectableOption.types';\n\n/**\n * - `TComponent` - Component used for reference properties, such as `componentRef`.\n * - `TListenerElement` - Listener element associated with HTML event callbacks. Optional. If not provided,\n *   `TComponent` is assumed.\n * {@docCategory ISelectableDroppableTextProps}\n */\nexport interface ISelectableDroppableTextProps<TComponent, TListenerElement>\n  extends React.HTMLAttributes<TListenerElement> {\n  /**\n   * Optional callback to access the component interface (usually `IDropdown` or `IComboBox`).\n   * Use this instead of `ref` for accessing the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<TComponent>;\n\n  /**\n   * Descriptive label for the field\n   */\n  label?: string;\n\n  /**\n   * Aria Label for the field for screen reader users.\n   */\n  ariaLabel?: string;\n\n  /**\n   * ID of the field\n   */\n  id?: string;\n\n  /**\n   * Additional class name for the root element.\n   */\n  className?: string;\n\n  /**\n   * The key(s) that will be initially used to set a selected item.\n   *\n   * Mutually exclusive with `selectedKey`.\n   * For Dropdown (but not ComboBox) in multi-select mode, use `defaultSelectedKeys` instead.\n   */\n  defaultSelectedKey?: string | number | string[] | number[] | null;\n\n  /**\n   * The key(s) of the selected item. If you provide this, you must maintain selection\n   * state by observing onChange events and passing a new value in when changed.\n   * Note that passing in `null` will cause selection to be reset.\n   *\n   * Mutually exclusive with `defaultSelectedKey`.\n   * For Dropdown (but not ComboBox) in multi-select mode, use `selectedKeys` instead.\n   */\n  selectedKey?: string | number | string[] | number[] | null;\n\n  /**\n   * Whether multi-choice selections are allowed or not.\n   * @defaultvalue false\n   */\n  multiSelect?: boolean;\n\n  /**\n   * Collection of options for this field\n   */\n  options?: any;\n\n  /**\n   * Optional custom renderer for the option list container\n   */\n  onRenderContainer?: IRenderFunction<ISelectableDroppableTextProps<TComponent, TListenerElement>>;\n\n  /**\n   * Optional custom renderer for the option list\n   */\n  onRenderList?: IRenderFunction<ISelectableDroppableTextProps<TComponent, TListenerElement>>;\n\n  /**\n   * Optional custom renderer for all items, including headers and dividers as well as normal options.\n   */\n  onRenderItem?: IRenderFunction<ISelectableOption>;\n\n  /**\n   * Optional custom renderer for normal and header options only.\n   * Use `onRenderItem` to control rendering for separators as well.\n   */\n  onRenderOption?: IRenderFunction<ISelectableOption>;\n\n  /**\n   * Callback for when the options list callout is dismissed\n   */\n  onDismiss?: () => void;\n\n  /**\n   * Whether or not the field is disabled.\n   */\n  disabled?: boolean;\n\n  /**\n   * Whether or not the field is required.\n   */\n  required?: boolean;\n\n  /**\n   * Custom properties for the Callout used to render the option list.\n   */\n  calloutProps?: ICalloutProps;\n\n  /**\n   * Custom properties for the Panel used to render the option list on small devices.\n   */\n  panelProps?: IPanelProps;\n\n  /**\n   * Error message for the field.\n   */\n  errorMessage?: string;\n\n  /**\n   * Input placeholder text. Displayed until option is selected.\n   */\n  placeholder?: string;\n\n  /**\n   * Whether or not the ComboBox/Dropdown should expand on keyboard focus.\n   * @defaultvalue false\n   */\n  openOnKeyboardFocus?: boolean;\n}\n"]}
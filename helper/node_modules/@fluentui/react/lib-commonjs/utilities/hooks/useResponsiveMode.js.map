{"version":3,"file":"useResponsiveMode.js","sourceRoot":"../src/","sources":["utilities/hooks/useResponsiveMode.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,iDAAgD;AAChD,qDAAmD;AACnD,uEAA+G;AAC/G,uDAAiD;AAEjD;;;;GAIG;AACI,IAAM,iBAAiB,GAAG,UAC/B,UAA+C,EAC/C,sBAAuC;IAEjC,IAAA,KAA8C,KAAK,CAAC,QAAQ,CAAiB,6CAAwB,EAAE,CAAC,EAAvG,kBAAkB,QAAA,EAAE,qBAAqB,QAA8D,CAAC;IAE/G,IAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC;QACjC,IAAM,iBAAiB,GAAG,sCAAiB,CAAC,qBAAS,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;QAE3E,uDAAuD;QACvD,IAAI,kBAAkB,KAAK,iBAAiB,EAAE;YAC5C,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;SAC1C;IACH,CAAC,EAAE,CAAC,UAAU,EAAE,kBAAkB,CAAC,CAAC,CAAC;IAErC,IAAM,GAAG,GAAG,0BAAS,EAAE,CAAC;IACxB,wBAAU,CAAC,GAAG,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAEpC,gGAAgG;IAChG,6GAA6G;IAC7G,KAAK,CAAC,SAAS,CAAC;QACd,IAAI,sBAAsB,KAAK,SAAS,EAAE;YACxC,QAAQ,EAAE,CAAC;SACZ;QACD,8GAA8G;IAChH,CAAC,EAAE,CAAC,sBAAsB,CAAC,CAAC,CAAC;IAE7B,OAAO,sBAAsB,aAAtB,sBAAsB,cAAtB,sBAAsB,GAAI,kBAAkB,CAAC;AACtD,CAAC,CAAC;AA5BW,QAAA,iBAAiB,qBA4B5B","sourcesContent":["import * as React from 'react';\nimport { getWindow } from '@fluentui/utilities';\nimport { useOnEvent } from '@fluentui/react-hooks';\nimport { ResponsiveMode, getResponsiveMode, getInitialResponsiveMode } from '../decorators/withResponsiveMode';\nimport { useWindow } from '../../WindowProvider';\n\n/**\n * Hook to get the current responsive mode (window size category).\n * @param elementRef - Use this element's parent window when determining the responsive mode.\n * @param overrideResponsiveMode - Override the responsive mode. If this param is present, it's always returned.\n */\nexport const useResponsiveMode = (\n  elementRef: React.RefObject<HTMLElement | null>,\n  overrideResponsiveMode?: ResponsiveMode,\n) => {\n  const [lastResponsiveMode, setLastResponsiveMode] = React.useState<ResponsiveMode>(getInitialResponsiveMode());\n\n  const onResize = React.useCallback(() => {\n    const newResponsiveMode = getResponsiveMode(getWindow(elementRef.current));\n\n    // Setting the same value should not cause a re-render.\n    if (lastResponsiveMode !== newResponsiveMode) {\n      setLastResponsiveMode(newResponsiveMode);\n    }\n  }, [elementRef, lastResponsiveMode]);\n\n  const win = useWindow();\n  useOnEvent(win, 'resize', onResize);\n\n  // Call resize function initially on mount, or if the override changes from defined to undefined\n  // (the effect will run on all override changes, but onResize will only be called if it changed to undefined)\n  React.useEffect(() => {\n    if (overrideResponsiveMode === undefined) {\n      onResize();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- only meant to run on mount or when override changes\n  }, [overrideResponsiveMode]);\n\n  return overrideResponsiveMode ?? lastResponsiveMode;\n};\n"]}
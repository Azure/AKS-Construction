{"version":3,"file":"BaseDecorator.js","sourceRoot":"../src/","sources":["utilities/decorators/BaseDecorator.ts"],"names":[],"mappings":";;;;IAGA;QAAmD,yCAA+B;QAKhF,uBAAY,KAAa;YAAzB,YACE,kBAAM,KAAK,CAAC,SAEb;YADC,KAAI,CAAC,2BAA2B,GAAG,KAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;QACjF,CAAC;QAED;;;;;WAKG;QACO,mDAA2B,GAArC,UAAsC,yBAA0D;YAC9F,IAAI,CAAC,0BAA0B,GAAG,yBAAyB,CAAC;YAC5D,IAAI,yBAAyB,EAAE;gBAC7B,IAAI,CAAC,QAAQ,GAAG,wBAAY,CAAC,IAAI,EAAE,yBAAyB,CAAC,CAAC;aAC/D;iBAAM,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACxB,0BAAc,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;aACrC;QACH,CAAC;QACH,oBAAC;IAAD,CAAC,AAxBD,CAAmD,KAAK,CAAC,SAAS,GAwBjE;IAxBY,sCAAa","sourcesContent":["import * as React from 'react';\nimport { hoistMethods, unhoistMethods } from '../../Utilities';\n\nexport class BaseDecorator<TProps, TState> extends React.Component<TProps, TState> {\n  protected _composedComponentInstance: React.Component<TProps, TState>;\n\n  private _hoisted: string[];\n\n  constructor(props: TProps) {\n    super(props);\n    this._updateComposedComponentRef = this._updateComposedComponentRef.bind(this);\n  }\n\n  /**\n   * Updates the ref to the component composed by the decorator, which will also take care of hoisting\n   * (and unhoisting as appropriate) methods from said component.\n   *\n   * Pass this method as the argument to the 'ref' property of the composed component.\n   */\n  protected _updateComposedComponentRef(composedComponentInstance: React.Component<TProps, TState>): void {\n    this._composedComponentInstance = composedComponentInstance;\n    if (composedComponentInstance) {\n      this._hoisted = hoistMethods(this, composedComponentInstance);\n    } else if (this._hoisted) {\n      unhoistMethods(this, this._hoisted);\n    }\n  }\n}\n"]}
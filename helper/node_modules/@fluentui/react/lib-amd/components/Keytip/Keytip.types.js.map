{"version":3,"file":"Keytip.types.js","sourceRoot":"../src/","sources":["components/Keytip/Keytip.types.ts"],"names":[],"mappings":"","sourcesContent":["import type { ICalloutProps } from '../../Callout';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { IStyleFunctionOrObject, Point } from '../../Utilities';\n\n/**\n * {@docCategory Keytips}\n */\nexport interface IKeytipProps {\n  /**\n   * Content to put inside the keytip\n   */\n  content: string;\n\n  /**\n   * Theme for the component\n   */\n  theme?: ITheme;\n\n  /**\n   * T/F if the corresponding control for this keytip is disabled\n   */\n  disabled?: boolean;\n\n  /**\n   * T/F if the keytip is visible\n   */\n  visible?: boolean;\n\n  /**\n   * Function to call when this keytip is activated.\n   * 'executeTarget' is the DOM element marked with 'data-ktp-execute-target'.\n   * 'target' is the DOM element marked with 'data-ktp-target'.\n   */\n  onExecute?: (executeTarget: HTMLElement | null, target: HTMLElement | null) => void;\n\n  /**\n   * Function to call when the keytip is the currentKeytip and a return sequence is pressed.\n   * 'executeTarget' is the DOM element marked with 'data-ktp-execute-target'.\n   * 'target' is the DOM element marked with 'data-ktp-target'.\n   */\n  onReturn?: (executeTarget: HTMLElement | null, target: HTMLElement | null) => void;\n\n  /**\n   * Array of KeySequences which is the full key sequence to trigger this keytip\n   * Should not include initial 'start' key sequence\n   */\n  keySequences: string[];\n\n  /**\n   * Full KeySequence of the overflow set button, will be set automatically if this keytip is inside an overflow\n   */\n  overflowSetSequence?: string[];\n\n  /**\n   * ICalloutProps to pass to the callout element\n   */\n  calloutProps?: ICalloutProps;\n\n  /**\n   * Optional styles for the component.\n   */\n  styles?: IStyleFunctionOrObject<IKeytipStyleProps, IKeytipStyles>;\n\n  /**\n   * Offset x and y for the keytip, added from the top-left corner\n   * By default the keytip will be anchored to the bottom-center of the element\n   */\n  offset?: Point;\n\n  /**\n   * Whether or not this keytip will have children keytips that are dynamically created (DOM is generated on\n   * keytip activation). Common cases are a Pivot or Modal.\n   */\n  hasDynamicChildren?: boolean;\n\n  /**\n   * Whether or not this keytip belongs to a component that has a menu\n   * Keytip mode will stay on when a menu is opened, even if the items in that menu have no keytips\n   */\n  hasMenu?: boolean;\n\n  /**\n   * Whether or not this keytip belongs to a component that is in an overflow menu\n   * and also has a menu\n   */\n  hasOverflowSubMenu?: boolean;\n}\n\n/**\n * Props to style Keytip component\n * {@docCategory Keytips}\n */\nexport interface IKeytipStyleProps {\n  /**\n   * The theme for the keytip.\n   */\n  theme: ITheme;\n\n  /**\n   * Whether the keytip is disabled or not.\n   */\n  disabled?: boolean;\n\n  /**\n   * T/F if the keytip is visible\n   */\n  visible?: boolean;\n}\n\n/**\n * {@docCategory Keytips}\n */\nexport interface IKeytipStyles {\n  /**\n   * Style for the div container surrounding the keytip content.\n   */\n  container: IStyle;\n\n  /**\n   * Style for the keytip content element.\n   */\n  root: IStyle;\n}\n"]}
{"version":3,"file":"WeeklyDayPicker.types.js","sourceRoot":"../src/","sources":["components/WeeklyDayPicker/WeeklyDayPicker.types.ts"],"names":[],"mappings":"","sourcesContent":["import { AnimationDirection } from '../Calendar/Calendar.types';\nimport { DayOfWeek } from '@fluentui/date-time-utilities';\nimport type { IBaseProps, IRefObject, IStyleFunctionOrObject } from '@fluentui/utilities';\nimport type { ICalendarNavigationIcons } from '../Calendar/Calendar.types';\nimport type { ICalendarStrings, IDateFormatting } from '@fluentui/date-time-utilities';\nimport type { IStyle, ITheme } from '@fluentui/style-utilities';\nimport type {\n  ICalendarDayGridProps,\n  ICalendarDayGridStyleProps,\n  ICalendarDayGridStyles,\n} from '../CalendarDayGrid/CalendarDayGrid.types';\n\n/**\n * {@docCategory WeeklyDayPicker}\n */\nexport interface IWeeklyDayPicker {\n  focus(): void;\n}\n\n/**\n * {@docCategory WeeklyDayPicker}\n */\nexport interface IWeeklyDayPickerProps extends IBaseProps<IWeeklyDayPicker>, Partial<ICalendarDayGridProps> {\n  /**\n   * Optional callback to access the IWeeklyDayPicker interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IWeeklyDayPicker>;\n\n  /**\n   * Customized styles for the component.\n   */\n  styles?: IStyleFunctionOrObject<IWeeklyDayPickerStyleProps, IWeeklyDayPickerStyles>;\n\n  /**\n   * Theme (provided through customization).\n   */\n  theme?: ITheme;\n\n  /**\n   * Additional CSS class(es) to apply to the WeeklyDayPicker.\n   */\n  className?: string;\n\n  /**\n   * Localized strings to use in the WeeklyDayPicker\n   */\n  strings: IWeeklyDayPickerStrings;\n\n  /**\n   * Customize navigation icons.\n   */\n  navigationIcons?: IWeeklyDayPickerNavigationIcons;\n\n  /**\n   * The initially selected date.\n   * @default Today's date (`new Date()`)\n   */\n  initialDate?: Date;\n\n  /**\n   * Callback issued when a date is selected\n   * @param date - The date the user selected\n   */\n  onSelectDate?: (date: Date) => void;\n\n  /**\n   * Callback issued when a date in the calendar is navigated\n   * @param date - The date that is navigated to\n   */\n  onNavigateDate?: (date: Date) => void;\n\n  /**\n   * The first day of the week for your locale.\n   * @defaultvalue DayOfWeek.Sunday\n   */\n  firstDayOfWeek?: DayOfWeek;\n\n  /**\n   * Value of today. If unspecified, current time in client machine will be used.\n   */\n  today?: Date;\n\n  /**\n   * Apply additional formatting to dates, for example localized date formatting.\n   */\n  dateTimeFormatter?: IDateFormatting;\n\n  /**\n   * If set the Calendar will not allow navigation to or selection of a date earlier than this value.\n   */\n  minDate?: Date;\n\n  /**\n   * If set the Calendar will not allow navigation to or selection of a date later than this value.\n   */\n  maxDate?: Date;\n\n  /**\n   * If set the Calendar will not allow selection of dates in this array.\n   */\n  restrictedDates?: Date[];\n\n  /**\n   * The cardinal directions for animation to occur during transitions, either horizontal or veritcal\n   */\n  animationDirection?: AnimationDirection;\n\n  /**\n   * Whether to show as a month picker. If false, shows only one week\n   * @defaultvalue false\n   */\n  showFullMonth?: boolean;\n\n  /**\n   * How many weeks to show if showFullMonth=true. If not provided, will show enough weeks to display the current\n   * month, between 4 and 6 depending\n   * @defaultvalue undefined\n   */\n  weeksToShow?: number;\n}\n\n/**\n * {@docCategory WeeklyDayPicker}\n */\nexport type IWeeklyDayPickerNavigationIcons = Pick<ICalendarNavigationIcons, 'leftNavigation' | 'rightNavigation'>;\n\n/**\n * {@docCategory WeeklyDayPicker}\n */\nexport interface IWeeklyDayPickerStrings extends ICalendarStrings {\n  /**\n   * Aria-label for the \"previous week\" button in picker.\n   */\n  prevWeekAriaLabel?: string;\n\n  /**\n   * Aria-label for the \"next week\" button in picker.\n   */\n  nextWeekAriaLabel?: string;\n}\n\n/**\n * {@docCategory WeeklyDayPicker}\n */\nexport interface IWeeklyDayPickerStyleProps extends ICalendarDayGridStyleProps {\n  /**\n   * Theme provided by High-Order Component.\n   */\n  theme: ITheme;\n\n  /**\n   * Accept custom classNames\n   */\n  className?: string;\n}\n\n/**\n * {@docCategory WeeklyDayPicker}\n */\nexport interface IWeeklyDayPickerStyles extends Partial<ICalendarDayGridStyles> {\n  /**\n   * Style for the root element.\n   */\n  root: IStyle;\n\n  /**\n   * Style for navigation icon button.\n   */\n  navigationIconButton: IStyle;\n\n  /**\n   * Style for disabled element\n   */\n  disabledStyle: IStyle;\n}\n"]}
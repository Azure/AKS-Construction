{"version":3,"file":"SuggestionsStore.js","sourceRoot":"../src/","sources":["components/FloatingPicker/Suggestions/SuggestionsStore.ts"],"names":[],"mappings":";;;;IAOA;QAIE,0BAAY,OAAoC;YAAhD,iBAGC;YA0BO,uBAAkB,GAAG,UAAC,KAA8B;gBAC1D,OAA6B,KAAM,CAAC,IAAI,KAAK,SAAS,CAAC;YACzD,CAAC,CAAC;YAEM,2BAAsB,GAAG,UAAC,UAAmC;gBACnE,IAAI,KAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,EAAE;oBACvC,OAAO,UAAU,CAAC;iBACnB;qBAAM;oBACL,OAAO;wBACL,IAAI,EAAE,UAAU;wBAChB,QAAQ,EAAE,KAAK;wBACf,SAAS,EACP,KAAI,CAAC,YAAY,KAAK,SAAS;4BAC7B,CAAC,CAAC,KAAI,CAAC,YAAY,CAAC,UAAU,CAAC;4BAC/B,CAAC,CAAG,UAA2B,CAAC,IAAI;gCAClB,UAAW,CAAC,IAAI;gCAChC,mDAAmD;gCACnC,UAAW,CAAC,WAAW;qBAC9C,CAAC;iBACH;YACH,CAAC,CAAC;YAhDA,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;YACtB,IAAI,CAAC,YAAY,GAAG,OAAO,IAAI,OAAO,CAAC,YAAY,CAAC;QACtD,CAAC;QAEM,4CAAiB,GAAxB,UAAyB,cAAmB;YAC1C,IAAI,cAAc,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC/C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,mCAAmC,CAAC,cAAc,CAAC,CAAC;aAC7E;iBAAM;gBACL,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;aACvB;QACH,CAAC;QAEM,yCAAc,GAArB;YACE,OAAO,IAAI,CAAC,WAAW,CAAC;QAC1B,CAAC;QAEM,+CAAoB,GAA3B,UAA4B,KAAa;YACvC,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC;QAEM,2CAAgB,GAAvB,UAAwB,KAAa;YACnC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACpC,CAAC;QAEM,8DAAmC,GAA1C,UAA2C,WAA2C;YACpF,OAAO,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACxF,CAAC;QAuBH,uBAAC;IAAD,CAAC,AAtDD,IAsDC;IAtDY,4CAAgB","sourcesContent":["import type { ISuggestionModel, ITag } from '../../../Pickers';\nimport type { IPersonaProps } from '../../../Persona';\n\nexport type SuggestionsStoreOptions<T> = {\n  getAriaLabel?: (item: T) => string;\n};\n\nexport class SuggestionsStore<T> {\n  public suggestions: ISuggestionModel<T>[];\n  private getAriaLabel?: (item: T) => string;\n\n  constructor(options?: SuggestionsStoreOptions<T>) {\n    this.suggestions = [];\n    this.getAriaLabel = options && options.getAriaLabel;\n  }\n\n  public updateSuggestions(newSuggestions: T[]): void {\n    if (newSuggestions && newSuggestions.length > 0) {\n      this.suggestions = this.convertSuggestionsToSuggestionItems(newSuggestions);\n    } else {\n      this.suggestions = [];\n    }\n  }\n\n  public getSuggestions(): ISuggestionModel<T>[] {\n    return this.suggestions;\n  }\n\n  public getSuggestionAtIndex(index: number): ISuggestionModel<T> {\n    return this.suggestions[index];\n  }\n\n  public removeSuggestion(index: number): void {\n    this.suggestions.splice(index, 1);\n  }\n\n  public convertSuggestionsToSuggestionItems(suggestions: Array<ISuggestionModel<T> | T>): ISuggestionModel<T>[] {\n    return Array.isArray(suggestions) ? suggestions.map(this._ensureSuggestionModel) : [];\n  }\n\n  private _isSuggestionModel = (value: ISuggestionModel<T> | T): value is ISuggestionModel<T> => {\n    return (<ISuggestionModel<T>>value).item !== undefined;\n  };\n\n  private _ensureSuggestionModel = (suggestion: ISuggestionModel<T> | T): ISuggestionModel<T> => {\n    if (this._isSuggestionModel(suggestion)) {\n      return suggestion;\n    } else {\n      return {\n        item: suggestion,\n        selected: false,\n        ariaLabel:\n          this.getAriaLabel !== undefined\n            ? this.getAriaLabel(suggestion)\n            : ((suggestion as any) as ITag).name ||\n              (<IPersonaProps>suggestion).text ||\n              // eslint-disable-next-line deprecation/deprecation\n              (<IPersonaProps>suggestion).primaryText,\n      };\n    }\n  };\n}\n"]}
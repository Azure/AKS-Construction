{"version":3,"file":"Calendar.types.js","sourceRoot":"../src/","sources":["components/Calendar/Calendar.types.ts"],"names":[],"mappings":";;;;IA6SA;;OAEG;IACH,IAAY,kBAUX;IAVD,WAAY,kBAAkB;QAC5B;;WAEG;QACH,uEAAU,CAAA;QAEV;;WAEG;QACH,mEAAQ,CAAA;IACV,CAAC,EAVW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAU7B","sourcesContent":["import * as React from 'react';\nimport { DayOfWeek, FirstWeekOfYear, DateRangeType } from '@fluentui/date-time-utilities';\nimport type { IRefObject, IBaseProps, IStyleFunctionOrObject } from '@fluentui/utilities';\nimport type { IStyle, ITheme } from '@fluentui/style-utilities';\nimport type { ICalendarDayProps } from './CalendarDay/CalendarDay.types';\nimport type { ICalendarMonthProps } from './CalendarMonth/CalendarMonth.types';\nimport type { ICalendarStrings, IDateFormatting } from '@fluentui/date-time-utilities';\n\n/**\n * {@docCategory Calendar}\n */\nexport interface ICalendar {\n  /** Sets focus to the selected date. */\n  focus: () => void;\n}\n\n/**\n * {@docCategory Calendar}\n */\nexport interface ICalendarProps extends IBaseProps<ICalendar>, React.RefAttributes<HTMLDivElement> {\n  /**\n   * Optional callback to access the ICalendar interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ICalendar>;\n\n  /**\n   * Customized styles for the calendar component\n   */\n  styles?: IStyleFunctionOrObject<ICalendarStyleProps, ICalendarStyles>;\n\n  /**\n   * Customized props for the calendar day\n   */\n  calendarDayProps?: Partial<ICalendarDayProps>;\n\n  /**\n   * Customized props for the calendar month\n   */\n  calendarMonthProps?: Partial<ICalendarMonthProps>;\n\n  /**\n   * Theme provided by High-Order Component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Optional class name to add to the root element.\n   */\n  className?: string;\n\n  /**\n   * Callback for when a date is selected\n   * @param date - The date the user selected\n   * @param selectedDateRangeArray - The resultant list of dates that are selected based on the date range type set\n   * for the component.\n   */\n  onSelectDate?: (date: Date, selectedDateRangeArray?: Date[]) => void;\n\n  /**\n   * Callback for when calendar is closed\n   */\n  onDismiss?: () => void;\n\n  /**\n   * ID for the calendar\n   */\n  id?: string;\n\n  /**\n   * Default value of the Calendar, if any\n   */\n  value?: Date;\n\n  /**\n   * Value of today. If unspecified, current time in client machine will be used.\n   */\n  today?: Date;\n\n  /**\n   * The date range type indicating how  many days should be selected as the user\n   * selects days\n   * @defaultValue DateRangeType.Day\n   */\n  dateRangeType?: DateRangeType;\n\n  /**\n   * The first day of the week for your locale.\n   * @defaultvalue DayOfWeek.Sunday\n   */\n  firstDayOfWeek?: DayOfWeek;\n\n  /**\n   * Defines when the first week of the year should start.\n   * @defaultvalue FirstWeekOfYear.FirstDay\n   */\n  firstWeekOfYear?: FirstWeekOfYear;\n\n  /**\n   * Whether the month picker is shown beside the day picker or hidden.\n   * @defaultvalue true\n   */\n  isMonthPickerVisible?: boolean;\n\n  /**\n   * Whether the day picker is shown beside the month picker or hidden.\n   * @defaultvalue true\n   */\n  isDayPickerVisible?: boolean;\n\n  /**\n   * Show month picker on top of date picker when visible.\n   * @defaultvalue false\n   */\n  showMonthPickerAsOverlay?: boolean;\n\n  /**\n   * Whether the \"Go to today\" link should be shown or not\n   */\n  showGoToToday?: boolean;\n\n  /**\n   * Whether the calendar should show the week number (weeks 1 to 53) before each week row\n   * @defaultvalue false\n   */\n  showWeekNumbers?: boolean;\n\n  /**\n   * Localized strings to use in the Calendar\n   */\n  strings?: ICalendarStrings;\n\n  /**\n   * Custom navigation icons.\n   */\n  navigationIcons?: ICalendarNavigationIcons;\n\n  /**\n   * Apply additional formatting to dates, for example localized date formatting.\n   */\n  dateTimeFormatter?: IDateFormatting;\n\n  /**\n   * If set the Calendar will not allow navigation to or selection of a date earlier than this value.\n   */\n  minDate?: Date;\n\n  /**\n   * If set the Calendar will not allow navigation to or selection of a date later than this value.\n   */\n  maxDate?: Date;\n\n  /**\n   * If set the Calendar will not allow selection of dates in this array.\n   */\n  restrictedDates?: Date[];\n\n  /**\n   * Whether the calendar should show 6 weeks by default.\n   * @defaultvalue false\n   */\n  showSixWeeksByDefault?: boolean;\n\n  /**\n   * The days that are selectable when `dateRangeType` is `WorkWeek`.\n   * If `dateRangeType` is not `WorkWeek` this property does nothing.\n   * @defaultvalue [Monday,Tuesday,Wednesday,Thursday,Friday]\n   */\n  workWeekDays?: DayOfWeek[];\n\n  /**\n   * Whether the month picker should highlight the current month\n   * @defaultvalue false\n   */\n  highlightCurrentMonth?: boolean;\n\n  /**\n   * Whether the month picker should highlight the selected month\n   * @defaultvalue false\n   */\n  highlightSelectedMonth?: boolean;\n\n  /**\n   * Whether the close button should be shown or not\n   * @defaultvalue false\n   */\n  showCloseButton?: boolean;\n\n  /**\n   * Allows all dates and buttons to be focused, including disabled ones\n   * @defaultvalue false\n   */\n  allFocusable?: boolean;\n}\n\n/**\n * {@docCategory Calendar}\n */\nexport interface ICalendarNavigationIcons {\n  /**\n   * FabricMDL2Icons name for the left navigation icon.  Previous default: ChevronLeft.\n   * @defaultvalue  'Up'\n   */\n  leftNavigation?: string;\n\n  /**\n   * FabricMDL2Icons name for the right navigation icon.  Previous default: ChevronRight.\n   * @defaultvalue  'Down'\n   */\n  rightNavigation?: string;\n\n  /**\n   * Close icon\n   * @defaultvalue  'CalculatorMultiply'\n   */\n  closeIcon?: string;\n}\n\n/**\n * @deprecated Use `ICalendarNavigationIcons`\n */\nexport type ICalendarIconStrings = ICalendarNavigationIcons;\n\n/**\n * @deprecated Use `IDateFormatting`\n */\nexport type ICalendarFormatDateCallbacks = IDateFormatting;\n\n/**\n * {@docCategory Calendar}\n */\nexport interface ICalendarStyleProps {\n  /**\n   * Theme provided by higher-order component.\n   */\n  theme: ITheme;\n\n  /**\n   * Custom CSS class for the calendar.\n   */\n  className?: string;\n\n  /**\n   * Whether the month picker is visible\n   */\n  isMonthPickerVisible?: boolean;\n\n  /**\n   * Whether the day picker is visible\n   */\n  isDayPickerVisible?: boolean;\n\n  /**\n   * Whether only month picker is shown\n   */\n  monthPickerOnly?: boolean;\n\n  /**\n   * Whether the month picker is overlaid on the day picker\n   */\n  showMonthPickerAsOverlay?: boolean;\n\n  /**\n   * @deprecated Use `overlaidWithButton`\n   */\n  overlayedWithButton?: boolean;\n\n  /**\n   * Whether the month and day picker are overlaid and the 'go to today' button is shown\n   */\n  overlaidWithButton?: boolean;\n\n  /**\n   * Whether the go to today button is shown\n   */\n  showGoToToday?: boolean;\n\n  /**\n   * Whether the week numbers are shown\n   */\n  showWeekNumbers?: boolean;\n}\n\n/**\n * {@docCategory Calendar}\n */\nexport interface ICalendarStyles {\n  /**\n   * Style for the root element.\n   */\n  root: IStyle;\n\n  divider: IStyle;\n\n  goTodayButton: IStyle;\n\n  monthPickerWrapper: IStyle;\n\n  liveRegion: IStyle;\n}\n\n/**\n * {@docCategory Calendar}\n */\nexport enum AnimationDirection {\n  /**\n   * Grid will transition out and in horizontally\n   */\n  Horizontal,\n\n  /**\n   * Grid will transition out and in vertically\n   */\n  Vertical,\n}\n"]}
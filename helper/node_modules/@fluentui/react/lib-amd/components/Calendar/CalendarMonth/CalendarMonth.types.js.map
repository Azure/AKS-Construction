{"version":3,"file":"CalendarMonth.types.js","sourceRoot":"../src/","sources":["components/Calendar/CalendarMonth/CalendarMonth.types.ts"],"names":[],"mappings":"","sourcesContent":["import { AnimationDirection } from '../Calendar.types';\nimport type { IBaseProps, IRefObject, IStyleFunctionOrObject } from '@fluentui/utilities';\nimport type { ICalendarNavigationIcons } from '../Calendar.types';\nimport type { ITheme } from '@fluentui/style-utilities';\nimport type { ICalendarPickerStyleProps, ICalendarPickerStyles } from '../CalendarPicker/CalendarPicker.types';\nimport type { ICalendarStrings, IDateFormatting } from '@fluentui/date-time-utilities';\n\n/**\n * {@docCategory Calendar}\n */\nexport interface ICalendarMonth {\n  focus(): void;\n}\n\n/**\n * {@docCategory Calendar}\n */\nexport interface ICalendarMonthProps extends IBaseProps<ICalendarMonth> {\n  /**\n   * Optional callback to access the ICalendarMonth interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ICalendarMonth>;\n\n  /**\n   * Customized styles for the calendar month component\n   */\n  styles?: IStyleFunctionOrObject<ICalendarMonthStyleProps, ICalendarMonthStyles>;\n\n  /**\n   * Theme (provided through customization).\n   */\n  theme?: ITheme;\n\n  /**\n   * Localized strings to use in the Calendar\n   */\n  strings: ICalendarStrings;\n\n  /**\n   * The currently selected date\n   */\n  selectedDate: Date;\n\n  /**\n   * The currently navigated date\n   */\n  navigatedDate: Date;\n\n  /**\n   * Callback issued when a month is selected\n   * @param date - The date the user selected\n   * @param selectedDateRangeArray - The resultant list of dates that are selected based on the date range type set\n   * for the component.\n   */\n  onSelectDate?: (date: Date, selectedDateRangeArray?: Date[]) => void;\n\n  /**\n   * Callback issued when the year is navigated\n   * @param date - The date that is navigated to\n   * @param focusOnNavigatedDay - Whether to set the focus to the navigated date.\n   */\n  onNavigateDate: (date: Date, focusOnNavigatedDay: boolean) => void;\n\n  /**\n   * Custom navigation icons.\n   */\n  navigationIcons?: ICalendarNavigationIcons;\n\n  /**\n   * Value of today. If unspecified, current time in client machine will be used.\n   */\n  today?: Date;\n\n  /**\n   * Callback function when the header is selected\n   */\n  onHeaderSelect?: () => void;\n\n  /**\n   * Apply additional formatting to dates, for example localized date formatting.\n   */\n  dateTimeFormatter?: IDateFormatting;\n\n  /**\n   * If set the Calendar will not allow navigation to or selection of a date earlier than this value.\n   */\n  minDate?: Date;\n\n  /**\n   * If set the Calendar will not allow navigation to or selection of a date later than this value.\n   */\n  maxDate?: Date;\n\n  /**\n   * Whether the month picker should highlight the current month\n   * @defaultvalue false\n   */\n  highlightCurrentMonth?: boolean;\n\n  /**\n   * Whether the month picker should highlight the selected month\n   * @defaultvalue false\n   */\n  highlightSelectedMonth?: boolean;\n\n  /**\n   * Allows all dates and buttons to be focused, including disabled ones\n   * @defaultvalue false\n   */\n  allFocusable?: boolean;\n\n  /**\n   * Additional CSS class(es) to apply to the CalendarMonth.\n   */\n  className?: string;\n\n  /**\n   * Whether the year picker is hidden\n   * @defaultvalue false\n   */\n  yearPickerHidden?: boolean;\n\n  /**\n   * The cardinal directions for animation to occur during transitions, either horizontal or veritcal\n   */\n  animationDirection?: AnimationDirection;\n}\n\n/**\n * {@docCategory Calendar}\n */\nexport interface ICalendarMonthStyleProps extends ICalendarPickerStyleProps {}\n\n/**\n * {@docCategory Calendar}\n */\nexport interface ICalendarMonthStyles extends ICalendarPickerStyles {}\n"]}
{"version":3,"file":"SearchBox.types.js","sourceRoot":"../src/","sources":["components/SearchBox/SearchBox.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { IButtonProps } from '../../Button';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { IStyleFunctionOrObject } from '../../Utilities';\nimport type { IIconProps } from '../../Icon';\n\n/**\n * {@docCategory SearchBox}\n */\nexport interface ISearchBox {\n  /**\n   * Sets focus inside the search input box.\n   */\n  focus(): void;\n\n  /**\n   * Returns whether or not the SearchBox has focus\n   */\n  hasFocus(): boolean;\n}\n\n/**\n * {@docCategory SearchBox}\n */\nexport interface ISearchBoxProps\n  extends React.InputHTMLAttributes<HTMLInputElement>,\n    React.RefAttributes<HTMLDivElement> {\n  /**\n   * Optional callback to access the ISearchBox interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: React.Ref<ISearchBox>;\n\n  /**\n   * Placeholder for the search box.\n   */\n  placeholder?: string;\n\n  /**\n   * @deprecated Use `placeholder` instead.\n   */\n  labelText?: string;\n\n  /**\n   * Callback function for when the typed input for the SearchBox has changed.\n   */\n  onChange?: (event?: React.ChangeEvent<HTMLInputElement>, newValue?: string) => void;\n\n  /**\n   * Callback executed when the user presses enter in the search box.\n   */\n  onSearch?: (newValue: any) => void;\n\n  /**\n   * Callback executed when the user clears the search box by either clicking 'X' or hitting escape.\n   */\n  onClear?: (ev?: any) => void;\n\n  /**\n   * Callback executed when the user presses escape in the search box.\n   */\n  onEscape?: (ev?: any) => void;\n\n  /**\n   * @deprecated Use `onChange` instead. Deprecated at v0.52.2.\n   */\n  onChanged?: (newValue: any) => void;\n\n  /**\n   * The value of the text in the SearchBox.\n   */\n  value?: string;\n\n  /**\n   * The default value of the text in the SearchBox, in the case of an uncontrolled component.\n   */\n  defaultValue?: string;\n\n  /**\n   * CSS class to apply to the SearchBox.\n   */\n  className?: string;\n\n  /**\n   * The aria label of the SearchBox for the benefit of screen readers.\n   */\n  ariaLabel?: string;\n\n  /**\n   * The props for the clear button.\n   */\n  clearButtonProps?: IButtonProps;\n\n  /**\n   * The props for the icon.\n   */\n  iconProps?: Pick<IIconProps, Exclude<keyof IIconProps, 'className'>>;\n\n  /**\n   * Whether or not the SearchBox is underlined.\n   * @defaultvalue false\n   */\n  underlined?: boolean;\n\n  /**\n   * The role assigned to the root DIV element of the SearchBox, useful for defining a landmark role, such as \"search\".\n   */\n  role?: string;\n\n  /**\n   * Theme (provided through customization).\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ISearchBoxStyleProps, ISearchBoxStyles>;\n\n  /**\n   * Whether or not to animate the SearchBox icon on focus.\n   * @defaultvalue false\n   */\n  disableAnimation?: boolean;\n\n  /**\n   * Whether or not to make the icon be always visible (it hides by default when the search box is focused).\n   * @defaultvalue false\n   */\n  showIcon?: boolean;\n}\n\n/**\n * {@docCategory SearchBox}\n */\nexport interface ISearchBoxStyleProps {\n  theme: ITheme;\n  className?: string;\n  disabled?: boolean;\n  hasFocus?: boolean;\n  underlined?: boolean;\n  hasInput?: boolean;\n  disableAnimation?: boolean;\n  showIcon?: boolean;\n}\n\n/**\n * {@docCategory SearchBox}\n */\nexport interface ISearchBoxStyles {\n  root?: IStyle;\n  iconContainer?: IStyle;\n  icon?: IStyle;\n  field?: IStyle;\n  clearButton?: IStyle;\n}\n"]}
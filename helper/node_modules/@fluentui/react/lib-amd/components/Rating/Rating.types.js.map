{"version":3,"file":"Rating.types.js","sourceRoot":"../src/","sources":["components/Rating/Rating.types.ts"],"names":[],"mappings":";;;;IAyIA;;OAEG;IACH,IAAY,UAGX;IAHD,WAAY,UAAU;QACpB,6CAAS,CAAA;QACT,6CAAS,CAAA;IACX,CAAC,EAHW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAGrB","sourcesContent":["import * as React from 'react';\nimport type { IStyle, ITheme, IProcessedStyleSet } from '../../Styling';\nimport type { IRefObject, IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\n\n/**\n * {@docCategory Rating}\n */\nexport interface IRating {\n  /** Current displayed rating value. Will be `min` if the user has not yet set a rating. */\n  rating: number;\n}\n\nexport interface IRatingStarProps {\n  fillPercentage: number;\n  disabled?: boolean;\n  classNames: IProcessedStyleSet<IRatingStyles>;\n  icon: string;\n  starNum?: number;\n  unselectedIcon?: string;\n}\n\n/**\n * Rating component props.\n * {@docCategory Rating}\n */\nexport interface IRatingProps extends React.HTMLAttributes<HTMLDivElement>, React.RefAttributes<HTMLDivElement> {\n  /**\n   * Optional callback to access the IRating interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IRating>;\n\n  /**\n   * Current rating. Must be a number between `min` and `max`. Only provide this if the Rating\n   * is a controlled component where you are maintaining its current state; otherwise, use the\n   * `defaultRating` property.\n   */\n  rating?: number;\n\n  /**\n   * Default rating. Must be a number between `min` and `max`. Only provide this if the Rating\n   * is an uncontrolled component; otherwise, use the `rating` property.\n   */\n  defaultRating?: number;\n\n  /**\n   * Minimum rating. Must be \\>= 0.\n   * @defaultvalue 0 if `allowZeroStars` is true, 1 otherwise\n   * @deprecated Use `allowZeroStars` instead.\n   */\n  min?: number;\n\n  /**\n   * Maximum rating. Must be \\>= `min`.\n   * @defaultvalue 5\n   */\n  max?: number;\n\n  /**\n   * Allow the initial rating value (or updated values passed in through `rating`) to be 0.\n   * Note that a value of 0 still won't be selectable by mouse or keyboard.\n   */\n  allowZeroStars?: boolean;\n\n  /**\n   * Whether the control should be disabled.\n   */\n  disabled?: boolean;\n\n  /**\n   * Custom icon name for selected rating elements.\n   * @defaultvalue FavoriteStarFill\n   */\n  icon?: string;\n\n  /**\n   * Custom icon name for unselected rating elements.\n   * @defaultvalue FavoriteStar\n   */\n  unselectedIcon?: string;\n\n  /**\n   * Optional custom renderer for the star component.\n   */\n  onRenderStar?: IRenderFunction<IRatingStarProps>;\n\n  /**\n   * Size of rating\n   * @defaultvalue Small\n   */\n  size?: RatingSize;\n\n  /**\n   * Callback for when the rating changes.\n   */\n  onChange?: (event: React.FormEvent<HTMLElement>, rating?: number) => void;\n\n  /**\n   * Optional label format for each individual rating star (not the rating control as a whole)\n   * that will be read by screen readers. Placeholder `{0}` is the current rating and placeholder\n   * `{1}` is the max: for example, `\"Select {0} of {1} stars\"`.\n   *\n   * (To set the label for the control as a whole, use `getAriaLabel` or `aria-label`.)\n   *\n   * @defaultvalue ''\n   */\n  ariaLabelFormat?: string;\n\n  /**\n   * Optional flag to mark rating control as readOnly\n   */\n  readOnly?: boolean;\n\n  /**\n   * Optional callback to set the aria-label for rating control in readOnly mode.\n   * Also used as a fallback aria-label if ariaLabel prop is not provided.\n   */\n  getAriaLabel?: (rating: number, max: number) => string;\n\n  /**\n   * Optional aria-label for rating control.\n   * If rating control is readOnly, it is recommended to provide a getAriaLabel prop instead\n   * since otherwise the current rating value will not be read.\n   */\n  ariaLabel?: string;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IRatingStyleProps, IRatingStyles>;\n\n  /**\n   * Theme (provided through customization.)\n   */\n  theme?: ITheme;\n}\n\n/**\n * {@docCategory Rating}\n */\nexport enum RatingSize {\n  Small = 0,\n  Large = 1,\n}\n\n/**\n * {@docCategory Rating}\n */\nexport interface IRatingStyleProps {\n  disabled?: boolean;\n  readOnly?: boolean;\n  theme: ITheme;\n}\n\n/**\n * {@docCategory Rating}\n */\nexport interface IRatingStyles {\n  root: IStyle;\n  ratingStar: IStyle;\n  ratingStarBack: IStyle;\n  ratingStarFront: IStyle;\n  ratingButton: IStyle;\n  ratingStarIsSmall: IStyle;\n  ratingStarIsLarge: IStyle;\n  rootIsSmall: IStyle;\n  rootIsLarge: IStyle;\n  labelText: IStyle;\n  ratingFocusZone: IStyle;\n}\n"]}
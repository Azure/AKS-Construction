{"version":3,"file":"StackItem.types.js","sourceRoot":"../src/","sources":["components/Stack/StackItem/StackItem.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type {\n  IComponentStyles,\n  IHTMLSlot,\n  IComponent,\n  ISlotProp,\n  IStyleableComponentProps,\n} from '@fluentui/foundation-legacy';\n\n/**\n * {@docCategory Stack}\n */\nexport type IStackItemComponent = IComponent<IStackItemProps, IStackItemTokens, IStackItemStyles>;\n\n/**\n * {@docCategory Stack}\n */\nexport type IStackItemSlot = ISlotProp<IStackItemProps>;\n\n/**\n * {@docCategory Stack}\n */\nexport interface IStackItemSlots {\n  root?: IHTMLSlot;\n}\n\n// The following two types are redundant with IStackItemComponent but are needed until TS function return widening\n// issue is resolved: https://github.com/Microsoft/TypeScript/issues/241\n// For now, these helper types can be used to provide return type safety when specifying tokens and styles functions.\n\n/**\n * {@docCategory Stack}\n */\nexport type IStackItemTokenReturnType = ReturnType<Extract<IStackItemComponent['tokens'], Function>>;\n\n/**\n * {@docCategory Stack}\n */\nexport type IStackItemStylesReturnType = ReturnType<Extract<IStackItemComponent['styles'], Function>>;\n\n/**\n * {@docCategory Stack}\n */\nexport interface IStackItemProps\n  extends IStackItemSlots,\n    IStyleableComponentProps<IStackItemProps, IStackItemTokens, IStackItemStyles>,\n    React.HTMLAttributes<HTMLElement> {\n  children?: React.ReactNode;\n  /**\n   * Defines a CSS class name used to style the StackItem.\n   */\n  className?: string;\n\n  /**\n   * Defines how much to grow the StackItem in proportion to its siblings.\n   */\n  grow?: boolean | number | 'inherit' | 'initial' | 'unset';\n\n  /**\n   * Defines at what ratio should the StackItem shrink to fit the available space.\n   */\n  shrink?: boolean | number | 'inherit' | 'initial' | 'unset';\n\n  /**\n   * Defines whether the StackItem should be prevented from shrinking.\n   * This can be used to prevent a StackItem from shrinking when it is inside of a Stack that has shrinking items.\n   * @defaultvalue false\n   */\n  disableShrink?: boolean;\n\n  /**\n   * Defines how to align the StackItem along the x-axis (for vertical Stacks) or the y-axis (for horizontal Stacks).\n   */\n  align?: 'auto' | 'stretch' | 'baseline' | 'start' | 'center' | 'end';\n\n  /**\n   * Defines whether the StackItem should take up 100% of the height of its parent.\n   * @defaultvalue true\n   */\n  verticalFill?: boolean;\n\n  /**\n   * Defines the initial main size of the StackItem, setting the size of the content box unless otherwise set with\n   * box-sizing.\n   * @defaultvalue auto\n   */\n  basis?: React.CSSProperties['flexBasis'];\n\n  /**\n   * Defines order of the StackItem.\n   * @defaultvalue 0\n   */\n  order?: number | string;\n}\n\n/**\n * {@docCategory Stack}\n */\nexport interface IStackItemTokens {\n  /**\n   * Defines the margin to be applied to the StackItem relative to its container.\n   */\n  margin?: number | string;\n\n  /**\n   * Defines the padding to be applied to the StackItem contents relative to its border.\n   */\n  padding?: number | string;\n}\n\n/**\n * {@docCategory Stack}\n */\nexport type IStackItemStyles = IComponentStyles<IStackItemSlots>;\n"]}
{"version":3,"file":"FontIcon.js","sourceRoot":"../src/","sources":["components/Icon/FontIcon.tsx"],"names":[],"mappings":";;;;IAca,QAAA,cAAc,GAAG,2BAAe,CAC3C,UAAC,QAAiB;QACV,IAAA,KAAuF,iBAAO,CAAC,QAAQ,CAAC,IAAI;YAChH,MAAM,EAAE,EAAE;YACV,IAAI,EAAE,SAAS;SAChB,EAHO,IAAI,UAAA,EAAE,MAAM,YAGnB,CAAC;QAEF,IAAI,CAAC,IAAI,EAAE;YACT,OAAO,IAAI,CAAC;SACb;QAED,OAAO;YACL,QAAQ,EAAE,IAAI;YACd,aAAa,EAAE,MAAM,CAAC,SAAS;YAC/B,UAAU,EAAE,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,UAAU;YACzD,eAAe,EAAE,MAAM,CAAC,eAAe;SACxC,CAAC;IACJ,CAAC,EACD,SAAS,EACT,IAAI,CAAC,gCAAgC,CACtC,CAAC;IAEF;;;;OAIG;IACI,IAAM,QAAQ,GAA4C,UAAA,KAAK;QAC5D,IAAA,QAAQ,GAA4B,KAAK,SAAjC,EAAE,SAAS,GAAiB,KAAK,UAAtB,EAAE,KAAe,KAAK,MAAV,EAAV,KAAK,mBAAG,EAAE,KAAA,CAAW;QAClD,IAAM,WAAW,GAAG,sBAAc,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QAC3C,IAAA,aAAa,GAA4C,WAAW,cAAvD,EAAE,QAAQ,GAAkC,WAAW,SAA7C,EAAE,UAAU,GAAsB,WAAW,WAAjC,EAAE,eAAe,GAAK,WAAW,gBAAhB,CAAiB;QAE7E,IAAM,WAAW,GAAG,0BAAc,CAAoC,KAAK,EAAE,iCAAqB,CAAC,CAAC;QACpG,IAAM,cAAc,GAAG,KAAK,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC;QAC1D,IAAM,cAAc,GAClB,KAAK,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,KAAK;YAC5D,CAAC,CAAC;gBACE,IAAI,EAAE,eAAe,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK;aAC1C;YACH,CAAC,CAAC;gBACE,aAAa,EAAE,IAAI;aACpB,CAAC;QAER,IAAI,aAAa,GAAG,QAAQ,CAAC;QAE7B,IAAI,eAAe,EAAE;YACnB,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,OAAO,QAAQ,CAAC,KAAK,KAAK,QAAQ,IAAI,cAAc,EAAE;gBACxF,aAAa,GAAG,KAAK,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,GAAG,EAAE,cAAc,EAAE,CAAC,CAAC;aACvE;SACF;QAED,OAAO,CACL,8DACkB,QAAQ,IACpB,cAAc,EACd,WAAW,EACX,CAAC,eAAe;YAClB,CAAC,CAAC;gBACE,KAAK,EAAE,SAAS;gBAChB,YAAY,EAAE,SAAS;aACxB;YACH,CAAC,CAAC,EAAE,CAAC,IACP,SAAS,EAAE,eAAG,CAAC,qBAAO,EAAE,wBAAU,CAAC,IAAI,EAAE,aAAa,EAAE,CAAC,QAAQ,IAAI,wBAAU,CAAC,WAAW,EAAE,SAAS,CAAC;YACvG,mGAAmG;YACnG,qDAAqD;YACrD,KAAK,qBAAI,UAAU,YAAA,IAAK,KAAK,MAE5B,aAAa,CACZ,CACL,CAAC;IACJ,CAAC,CAAC;IA3CW,QAAA,QAAQ,YA2CnB;IAEF;;;;;;OAMG;IACU,QAAA,WAAW,GAAG,2BAAe,CAAC,UAAC,QAAgB,EAAE,SAAkB,EAAE,SAAkB;QAClG,OAAO,gBAAQ,CAAC,EAAE,QAAQ,UAAA,EAAE,SAAS,WAAA,EAAE,YAAY,EAAE,SAAS,EAAE,CAAC,CAAC;IACpE,CAAC,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { classNames, MS_ICON } from './Icon.styles';\nimport { css, getNativeProps, htmlElementProperties, memoizeFunction } from '../../Utilities';\nimport { getIcon } from '../../Styling';\nimport type { IFontIconProps } from './Icon.types';\nimport type { IIconRecord, IIconSubsetRecord } from '../../Styling';\n\nexport interface IIconContent {\n  children?: string | JSX.Element;\n  iconClassName?: string;\n  fontFamily?: string;\n  mergeImageProps?: boolean;\n}\n\nexport const getIconContent = memoizeFunction(\n  (iconName?: string): IIconContent | null => {\n    const { code, subset }: Pick<IIconRecord, 'code'> & { subset: Partial<IIconSubsetRecord> } = getIcon(iconName) || {\n      subset: {},\n      code: undefined,\n    };\n\n    if (!code) {\n      return null;\n    }\n\n    return {\n      children: code,\n      iconClassName: subset.className,\n      fontFamily: subset.fontFace && subset.fontFace.fontFamily,\n      mergeImageProps: subset.mergeImageProps,\n    };\n  },\n  undefined,\n  true /*ignoreNullOrUndefinedResult */,\n);\n\n/**\n * Fast icon component which only supports font glyphs (not images) and can't be targeted by customizations.\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\n * {@docCategory Icon}\n */\nexport const FontIcon: React.FunctionComponent<IFontIconProps> = props => {\n  const { iconName, className, style = {} } = props;\n  const iconContent = getIconContent(iconName) || {};\n  const { iconClassName, children, fontFamily, mergeImageProps } = iconContent;\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLElement>>(props, htmlElementProperties);\n  const accessibleName = props['aria-label'] || props.title;\n  const containerProps =\n    props['aria-label'] || props['aria-labelledby'] || props.title\n      ? {\n          role: mergeImageProps ? undefined : 'img',\n        }\n      : {\n          'aria-hidden': true,\n        };\n\n  let finalChildren = children;\n\n  if (mergeImageProps) {\n    if (typeof children === 'object' && typeof children.props === 'object' && accessibleName) {\n      finalChildren = React.cloneElement(children, { alt: accessibleName });\n    }\n  }\n\n  return (\n    <i\n      data-icon-name={iconName}\n      {...containerProps}\n      {...nativeProps}\n      {...(mergeImageProps\n        ? {\n            title: undefined,\n            'aria-label': undefined,\n          }\n        : {})}\n      className={css(MS_ICON, classNames.root, iconClassName, !iconName && classNames.placeholder, className)}\n      // Apply the font family this way to ensure it doesn't get overridden by Fabric Core ms-Icon styles\n      // https://github.com/microsoft/fluentui/issues/10449\n      style={{ fontFamily, ...style }}\n    >\n      {finalChildren}\n    </i>\n  );\n};\n\n/**\n * Memoized helper for rendering a FontIcon.\n * @param iconName - The name of the icon to use from the icon font.\n * @param className - Class name for styling the icon.\n * @param ariaLabel - Label for the icon for the benefit of screen readers.\n * {@docCategory Icon}\n */\nexport const getFontIcon = memoizeFunction((iconName: string, className?: string, ariaLabel?: string) => {\n  return FontIcon({ iconName, className, 'aria-label': ariaLabel });\n});\n"]}
{"version":3,"file":"SwatchColorPicker.types.js","sourceRoot":"../src/","sources":["components/SwatchColorPicker/SwatchColorPicker.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { IStyleFunctionOrObject, IRenderFunction } from '../../Utilities';\nimport type {\n  IColorCellProps,\n  IColorPickerGridCellStyleProps,\n  IColorPickerGridCellStyles,\n} from './ColorPickerGridCell.types';\n\n/**\n * {@docCategory SwatchColorPicker}\n */\nexport interface ISwatchColorPickerProps extends React.RefAttributes<HTMLElement> {\n  /**\n   * Number of columns for the swatch color picker\n   */\n  columnCount: number;\n\n  /**\n   * ID for the swatch color picker's root element. Also used as a prefix for the IDs of color cells.\n   */\n  id?: string;\n\n  /**\n   * Additional class name to provide on the root element\n   */\n  className?: string;\n\n  /**\n   * The shape of the color cells.\n   * @default 'circle'\n   */\n  cellShape?: 'circle' | 'square';\n\n  /**\n   * ID of the current selected color swatch. Only provide this if the SwatchColorPicker is a\n   * controlled component where you are maintaining its current state; otherwise, use the\n   * `defaultSelectedId` property.\n   */\n  selectedId?: string;\n\n  /**\n   * The color cells that will be made available to the user.\n   *\n   * Note: When the reference to this prop changes, regardless of how many color cells change,\n   * all of the color cells will be re-rendered (potentially bad perf) because we memoize\n   * based on this prop's reference.\n   */\n  colorCells: IColorCellProps[];\n\n  /**\n   * @deprecated No longer used. Provide `selectedId` if controlled or `defaultSelectedId` if uncontrolled.\n   */\n  isControlled?: boolean;\n\n  /**\n   * ID of the default selected color swatch. Only provide this if the SwatchColorPicker is an\n   * uncontrolled component; otherwise, use the `selectedId` property.\n   */\n  defaultSelectedId?: string | undefined;\n\n  /**\n   * @deprecated Use `onChange`\n   */\n  onColorChanged?: (id?: string, color?: string) => void;\n\n  /**\n   * Callback for when the user changes the color.\n   * If `id` and `color` are unspecified, there is no selected cell.\n   * (e.g. the user executed the currently selected cell to unselect it)\n   */\n  onChange?: (event: React.FormEvent<HTMLElement>, id: string | undefined, color: string | undefined) => void;\n\n  /**\n   * Callback for when the user hovers over a color cell.\n   * If `id` and `color` are unspecified, cells are no longer being hovered.\n   */\n  onCellHovered?: (id?: string, color?: string, event?: React.MouseEvent<HTMLButtonElement>) => void;\n\n  /**\n   * Callback for when the user focuses a color cell.\n   * If `id` and `color` are unspecified, cells are no longer being focused.\n   */\n  onCellFocused?: (id?: string, color?: string, event?: React.FormEvent<HTMLButtonElement>) => void;\n\n  /**\n   * Custom render function for the color cell\n   */\n  onRenderColorCell?: IRenderFunction<IColorCellProps>;\n\n  /**\n   * Whether the control is disabled.\n   */\n  disabled?: boolean;\n\n  /**\n   * Position this grid is in the parent set (index in a parent menu, for example)\n   */\n  ariaPosInSet?: number;\n\n  /**\n   * Size of the parent set (size of parent menu, for example)\n   */\n  ariaSetSize?: number;\n\n  /**\n   * Whether focus should cycle back to the beginning once the user navigates past the end (and vice versa).\n   * Only relevant if `doNotContainWithinFocusZone` is not true.\n   * @defaultvalue true\n   */\n  shouldFocusCircularNavigate?: boolean;\n\n  /**\n   * If false (the default), the grid is contained inside a FocusZone.\n   * If true, a FocusZone is not used.\n   * @default false\n   */\n  doNotContainWithinFocusZone?: boolean;\n\n  /**\n   * The distance between cells, in pixels\n   * @defaultvalue 10\n   */\n  cellMargin?: number;\n\n  /**\n   * Height of an individual cell, in pixels\n   * @defaultvalue 20\n   */\n  cellHeight?: number;\n\n  /**\n   * Width of an individual cell, in pixels\n   * @defaultvalue 20\n   */\n  cellWidth?: number;\n\n  /**\n   * Width of the border indicating a hovered/selected cell, in pixels\n   * @defaultvalue If `cellWidth` is less than 24px, then default value is 2px. Otherwise it defaults to 4px.\n   */\n  cellBorderWidth?: number;\n\n  /**\n   * Theme to apply to the component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Styles for the component.\n   */\n  styles?: IStyleFunctionOrObject<ISwatchColorPickerStyleProps, ISwatchColorPickerStyles>;\n\n  /**\n   * Styles for the grid cells.\n   */\n  getColorGridCellStyles?: IStyleFunctionOrObject<IColorPickerGridCellStyleProps, IColorPickerGridCellStyles>;\n\n  /**\n   * Whether to update focus when a cell is hovered.\n   * @defaultvalue false\n   */\n  focusOnHover?: boolean;\n\n  /**\n   * Selector to focus on mouse leave. Should only be used in conjunction with `focusOnHover`.\n   */\n  mouseLeaveParentSelector?: string | undefined;\n}\n\n/**\n * Properties required to build the styles for the color picker component.\n * {@docCategory SwatchColorPicker}\n */\nexport interface ISwatchColorPickerStyleProps {\n  /**\n   * Theme to apply to the container\n   */\n  theme: ITheme;\n\n  /**\n   * Custom className to apply to the container.\n   */\n  className?: string;\n\n  /**\n   * The distance between cells\n   */\n  cellMargin?: number;\n}\n\n/**\n * Styles for the SwatchColorPicker.\n * {@docCategory SwatchColorPicker}\n */\nexport interface ISwatchColorPickerStyles {\n  /**\n   * Style applied to the container grid.\n   */\n  root: IStyle;\n\n  /**\n   * Style for the table cells of the grid.\n   */\n  tableCell: IStyle;\n\n  /**\n   * Style for the FocusZone container for the grid.\n   */\n  focusedContainer?: IStyle;\n}\n"]}
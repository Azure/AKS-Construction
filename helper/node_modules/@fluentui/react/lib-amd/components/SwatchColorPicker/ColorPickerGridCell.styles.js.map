{"version":3,"file":"ColorPickerGridCell.styles.js","sourceRoot":"../src/","sources":["components/SwatchColorPicker/ColorPickerGridCell.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import { IsFocusVisibleClassName } from '../../Utilities';\nimport { HighContrastSelector, getFocusStyle } from '../../Styling';\nimport type { IColorPickerGridCellStyleProps, IColorPickerGridCellStyles } from './ColorPickerGridCell.types';\n\n// Size breakpoint when the default border width changes from 2px to 4px.\nconst CELL_BORDER_BREAKPOINT = 24;\nconst LARGE_BORDER = 4;\nconst SMALL_BORDER = 2;\nconst DIVIDING_PADDING = 2;\nconst DEFAULT_CELL_SIZE = 20;\n\nconst cellHighContrastFocus = {\n  left: -2,\n  top: -2,\n  bottom: -2,\n  right: -2,\n  border: 'none',\n  outlineColor: 'ButtonText',\n};\n\nexport const getStyles = (props: IColorPickerGridCellStyleProps): IColorPickerGridCellStyles => {\n  const {\n    theme,\n    disabled,\n    selected,\n    circle,\n    isWhite,\n    height = DEFAULT_CELL_SIZE,\n    width = DEFAULT_CELL_SIZE,\n    borderWidth,\n  } = props;\n  const { semanticColors, palette } = theme;\n\n  const buttonBorderHovered = palette.neutralLighter;\n  const buttonBorderChecked = palette.neutralLight;\n  const buttonBorderCheckedHovered = palette.neutralSecondary;\n  const buttonBorderIsWhite = palette.neutralTertiary;\n\n  // If user provided a value, use it. If not, then we decide depending on the 24px size breakpoint.\n  const calculatedBorderWidth = borderWidth\n    ? borderWidth\n    : width < CELL_BORDER_BREAKPOINT\n    ? SMALL_BORDER\n    : LARGE_BORDER;\n\n  return {\n    // this is a button that wraps the color\n    colorCell: [\n      getFocusStyle(theme, { inset: -1, position: 'relative', highContrastStyle: cellHighContrastFocus }),\n      {\n        backgroundColor: semanticColors.bodyBackground,\n        padding: 0,\n        position: 'relative',\n        boxSizing: 'border-box',\n        display: 'inline-block',\n        cursor: 'pointer',\n        userSelect: 'none',\n        borderRadius: 0,\n        border: 'none',\n        height: height,\n        width: width,\n        verticalAlign: 'top',\n      },\n      !circle && {\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus::after`]: {\n            // -1px so that we don't increase visually the size of the cell.\n            outlineOffset: `${calculatedBorderWidth - 1}px`,\n          },\n        },\n      },\n      // In focus state for circle we want a round border which is not possible with outline.\n      circle && {\n        borderRadius: '50%',\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus::after`]: {\n            outline: 'none',\n            borderColor: semanticColors.focusBorder,\n            borderRadius: '50%',\n            left: -calculatedBorderWidth,\n            right: -calculatedBorderWidth,\n            top: -calculatedBorderWidth,\n            bottom: -calculatedBorderWidth,\n            selectors: {\n              [HighContrastSelector]: {\n                outline: `1px solid ButtonText`,\n              },\n            },\n          },\n        },\n      },\n      selected && {\n        padding: DIVIDING_PADDING,\n        border: `${calculatedBorderWidth}px solid ${buttonBorderChecked}`,\n        selectors: {\n          ['&:hover::before']: {\n            content: '\"\"',\n            height: height,\n            width: width,\n            position: 'absolute',\n            top: -calculatedBorderWidth,\n            left: -calculatedBorderWidth,\n            borderRadius: circle ? '50%' : 'default',\n            boxShadow: `inset 0 0 0 1px ${buttonBorderCheckedHovered}`,\n          },\n        },\n      },\n      !selected && {\n        selectors: {\n          ['&:hover, &:active, &:focus']: {\n            backgroundColor: semanticColors.bodyBackground, // overwrite white's override\n            padding: DIVIDING_PADDING,\n            border: `${calculatedBorderWidth}px solid ${buttonBorderHovered}`,\n          },\n          ['&:focus']: {\n            borderColor: semanticColors.bodyBackground,\n            padding: 0,\n            selectors: {\n              ':hover': {\n                borderColor: theme.palette.neutralLight,\n                padding: DIVIDING_PADDING,\n              },\n            },\n          },\n        },\n      },\n      disabled && {\n        color: semanticColors.disabledBodyText,\n        pointerEvents: 'none',\n        opacity: 0.3,\n      },\n      isWhite &&\n        !selected && {\n          // fake a border for white\n          backgroundColor: buttonBorderIsWhite,\n          padding: 1,\n        },\n    ],\n    // the <svg> that holds the color\n    svg: [\n      {\n        width: '100%',\n        height: '100%',\n      },\n      circle && {\n        borderRadius: '50%',\n      },\n    ],\n  };\n};\n"]}
{"version":3,"file":"SwatchColorPicker.base.js","sourceRoot":"../src/","sources":["components/SwatchColorPicker/SwatchColorPicker.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, KeyCodes } from '../../Utilities';\nimport { ButtonGrid } from '../../utilities/ButtonGrid/ButtonGrid';\nimport { ColorPickerGridCell } from './ColorPickerGridCell';\nimport { useId, useConst, useSetTimeout, useControllableValue, useWarnings } from '@fluentui/react-hooks';\nimport type {\n  ISwatchColorPickerProps,\n  ISwatchColorPickerStyleProps,\n  ISwatchColorPickerStyles,\n} from './SwatchColorPicker.types';\nimport type { IColorCellProps } from './ColorPickerGridCell.types';\nimport type { IButtonGridProps } from '../../utilities/ButtonGrid/ButtonGrid.types';\n\ninterface ISwatchColorPickerInternalState {\n  isNavigationIdle: boolean;\n  cellFocused: boolean;\n  navigationIdleTimeoutId: number | undefined;\n  navigationIdleDelay: number;\n}\n\nconst getClassNames = classNamesFunction<ISwatchColorPickerStyleProps, ISwatchColorPickerStyles>();\n\nconst COMPONENT_NAME = 'SwatchColorPicker';\n\nfunction useDebugWarnings(props: ISwatchColorPickerProps) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: COMPONENT_NAME,\n      props,\n      mutuallyExclusive: { focusOnHover: 'onHover', selectedId: 'defaultSelectedId' },\n      deprecations: { isControlled: \"selectedId' or 'defaultSelectedId\", onColorChanged: 'onChange' },\n    });\n  }\n}\n\nexport const SwatchColorPickerBase: React.FunctionComponent<ISwatchColorPickerProps> = React.forwardRef<\n  HTMLElement,\n  ISwatchColorPickerProps\n>((props, ref) => {\n  const defaultId = useId('swatchColorPicker');\n  const id = props.id || defaultId;\n\n  const internalState = useConst<ISwatchColorPickerInternalState>({\n    isNavigationIdle: true,\n    cellFocused: false,\n    navigationIdleTimeoutId: undefined,\n    navigationIdleDelay: 250,\n  });\n\n  const { setTimeout, clearTimeout } = useSetTimeout();\n\n  useDebugWarnings(props);\n\n  const {\n    colorCells,\n    cellShape = 'circle',\n    columnCount,\n    shouldFocusCircularNavigate = true,\n    className,\n    disabled = false,\n    doNotContainWithinFocusZone,\n    styles,\n    cellMargin = 10,\n    defaultSelectedId,\n    focusOnHover,\n    mouseLeaveParentSelector,\n    onChange,\n    // eslint-disable-next-line deprecation/deprecation\n    onColorChanged,\n    onCellHovered,\n    onCellFocused,\n    getColorGridCellStyles,\n    cellHeight,\n    cellWidth,\n    cellBorderWidth,\n  } = props;\n\n  /**\n   *  Add an index to each color cells. Memoizes this so that color cells do not re-render on every update.\n   */\n  const itemsWithIndex = React.useMemo(() => {\n    return colorCells.map((item, index) => {\n      return { ...item, index: index };\n    });\n  }, [colorCells]);\n\n  const mergedOnChange = React.useCallback(\n    (ev: React.FormEvent<HTMLElement>, newSelectedId: string | undefined) => {\n      // Call both new and old change handlers, and add the extra `color` parameter\n      const newColor = colorCells.filter(c => c.id === newSelectedId)[0]?.color;\n      onChange?.(ev, newSelectedId, newColor);\n      onColorChanged?.(newSelectedId, newColor);\n    },\n    [onChange, onColorChanged, colorCells],\n  );\n\n  const [selectedId, setSelectedId] = useControllableValue(props.selectedId, defaultSelectedId, mergedOnChange);\n\n  const classNames = getClassNames(styles!, {\n    theme: props.theme!,\n    className,\n    cellMargin,\n  });\n\n  const gridStyles = {\n    root: classNames.root,\n    tableCell: classNames.tableCell,\n    focusedContainer: classNames.focusedContainer,\n  };\n\n  /**\n   * If there is only one row of cells, they should use radio semantics,\n   * multi-row swatch cells should use grid semantics.\n   * There are two reasons for this:\n   *   1. Radios are a more simple and understandable control, and a better fit for a single-dimensional picker.\n   *   2. Multiple browsers use heuristics to strip table and grid roles from single-row tables with no column headers.\n   */\n  const isSemanticRadio = colorCells.length <= columnCount;\n\n  /**\n   * When the whole swatchColorPicker is blurred,\n   * make sure to clear the pending focused stated\n   */\n  const onSwatchColorPickerBlur = React.useCallback(\n    (event?: React.FocusEvent<HTMLButtonElement>): void => {\n      if (onCellFocused) {\n        internalState.cellFocused = false;\n        onCellFocused(undefined, undefined, event);\n      }\n    },\n    [internalState, onCellFocused],\n  );\n\n  /**\n   * Callback passed to the GridCell that will manage triggering the onCellHovered callback for mouseEnter\n   */\n  const onMouseEnter = React.useCallback(\n    (ev: React.MouseEvent<HTMLButtonElement>): boolean => {\n      if (!focusOnHover) {\n        return !internalState.isNavigationIdle || !!disabled;\n      }\n      if (internalState.isNavigationIdle && !disabled) {\n        ev.currentTarget.focus();\n      }\n      return true;\n    },\n    [focusOnHover, internalState, disabled],\n  );\n\n  /**\n   * Callback passed to the GridCell that will manage Hover/Focus updates\n   */\n  const onMouseMove = React.useCallback(\n    (ev: React.MouseEvent<HTMLButtonElement>): boolean => {\n      if (!focusOnHover) {\n        return !internalState.isNavigationIdle || !!disabled;\n      }\n\n      const targetElement = ev.currentTarget as HTMLElement;\n\n      // If navigation is idle and the targetElement is the focused element bail out\n      if (internalState.isNavigationIdle && !(document && targetElement === (document.activeElement as HTMLElement))) {\n        targetElement.focus();\n      }\n\n      return true;\n    },\n    [focusOnHover, internalState, disabled],\n  );\n\n  /**\n   * Callback passed to the GridCell that will manage Hover/Focus updates\n   */\n  const onMouseLeave = React.useCallback(\n    (ev: React.MouseEvent<HTMLButtonElement>): void => {\n      const parentSelector = mouseLeaveParentSelector;\n\n      if (!focusOnHover || !parentSelector || !internalState.isNavigationIdle || disabled) {\n        return;\n      }\n\n      // Get the elements that math the given selector\n      const elements = document.querySelectorAll(parentSelector);\n\n      // iterate over the elements return to make sure it is a parent of the target and focus it\n      for (let index = 0; index < elements.length; index += 1) {\n        if (elements[index].contains(ev.currentTarget)) {\n          /**\n           * IE11 focus() method forces parents to scroll to top of element.\n           * Edge and IE expose a setActive() function for focusable divs that\n           * sets the page focus but does not scroll the parent element.\n           */\n          if ((elements[index] as any).setActive) {\n            try {\n              (elements[index] as any).setActive();\n            } catch (e) {\n              /* no-op */\n            }\n          } else {\n            (elements[index] as HTMLElement).focus();\n          }\n\n          break;\n        }\n      }\n    },\n    [disabled, focusOnHover, internalState, mouseLeaveParentSelector],\n  );\n\n  /**\n   * Callback passed to the GridCell class that will trigger the onCellHovered callback of the SwatchColorPicker\n   * NOTE: This will not be triggered if shouldFocusOnHover === true\n   */\n  const onGridCellHovered = React.useCallback(\n    (item?: IColorCellProps, event?: React.MouseEvent<HTMLButtonElement>): void => {\n      if (onCellHovered) {\n        item ? onCellHovered(item.id, item.color, event) : onCellHovered(undefined, undefined, event);\n      }\n    },\n    [onCellHovered],\n  );\n\n  /**\n   * Callback passed to the GridCell class that will trigger the onCellFocus callback of the SwatchColorPicker\n   */\n  const onGridCellFocused = React.useCallback(\n    (item?: IColorCellProps, event?: React.FormEvent<HTMLButtonElement>): void => {\n      if (onCellFocused) {\n        if (item) {\n          internalState.cellFocused = true;\n          return onCellFocused(item.id, item.color, event);\n        } else {\n          internalState.cellFocused = false;\n          return onCellFocused(undefined, undefined, event);\n        }\n      }\n    },\n    [internalState, onCellFocused],\n  );\n\n  /**\n   * Handle the click on a cell\n   */\n  const onCellClick = React.useCallback(\n    (item: IColorCellProps, event?: React.MouseEvent<HTMLButtonElement>): void => {\n      if (disabled) {\n        return;\n      }\n\n      if (item.id !== selectedId) {\n        if (onCellFocused && internalState.cellFocused) {\n          internalState.cellFocused = false;\n          onCellFocused(undefined, undefined, event);\n        }\n        setSelectedId(item.id, event);\n      }\n    },\n    [disabled, internalState, onCellFocused, selectedId, setSelectedId],\n  );\n\n  /**\n   * Sets a timeout so we won't process any mouse \"hover\" events\n   * while navigating (via mouseWheel or arrowKeys)\n   */\n  const setNavigationTimeout = React.useCallback(() => {\n    if (!internalState.isNavigationIdle && internalState.navigationIdleTimeoutId !== undefined) {\n      clearTimeout(internalState.navigationIdleTimeoutId);\n      internalState.navigationIdleTimeoutId = undefined;\n    } else {\n      internalState.isNavigationIdle = false;\n    }\n\n    internalState.navigationIdleTimeoutId = setTimeout(() => {\n      internalState.isNavigationIdle = true;\n    }, internalState.navigationIdleDelay);\n  }, [clearTimeout, internalState, setTimeout]);\n\n  /**\n   * Callback used to handle KeyCode events\n   */\n  const onKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLButtonElement>): void => {\n      if (\n        // eslint-disable-next-line deprecation/deprecation\n        ev.which === KeyCodes.up ||\n        // eslint-disable-next-line deprecation/deprecation\n        ev.which === KeyCodes.down ||\n        // eslint-disable-next-line deprecation/deprecation\n        ev.which === KeyCodes.left ||\n        // eslint-disable-next-line deprecation/deprecation\n        ev.which === KeyCodes.right\n      ) {\n        setNavigationTimeout();\n      }\n    },\n    [setNavigationTimeout],\n  );\n\n  /**\n   * Render a color cell\n   * @param item - The item to render\n   * @returns - Element representing the item\n   */\n  const renderOption = (item: IColorCellProps): JSX.Element => {\n    return (\n      <ColorPickerGridCell\n        item={item}\n        idPrefix={id}\n        color={item.color}\n        styles={getColorGridCellStyles}\n        disabled={disabled}\n        onClick={onCellClick}\n        onHover={onGridCellHovered}\n        onFocus={onGridCellFocused}\n        selected={selectedId === item.id}\n        circle={cellShape === 'circle'}\n        label={item.label}\n        onMouseEnter={onMouseEnter}\n        onMouseMove={onMouseMove}\n        onMouseLeave={onMouseLeave}\n        onWheel={setNavigationTimeout}\n        onKeyDown={onKeyDown}\n        height={cellHeight}\n        width={cellWidth}\n        borderWidth={cellBorderWidth}\n        isRadio={isSemanticRadio}\n      />\n    );\n  };\n\n  if (colorCells.length < 1 || columnCount < 1) {\n    return null;\n  }\n\n  const onRenderItem = (item: IColorCellProps, index: number): JSX.Element => {\n    const { onRenderColorCell = renderOption } = props;\n    return onRenderColorCell(item, renderOption) as JSX.Element;\n  };\n  return (\n    <ButtonGrid\n      {...((props as unknown) as IButtonGridProps)}\n      ref={ref}\n      id={id}\n      items={itemsWithIndex}\n      columnCount={columnCount}\n      isSemanticRadio={isSemanticRadio}\n      // eslint-disable-next-line react/jsx-no-bind\n      onRenderItem={onRenderItem}\n      shouldFocusCircularNavigate={shouldFocusCircularNavigate}\n      doNotContainWithinFocusZone={doNotContainWithinFocusZone}\n      onBlur={onSwatchColorPickerBlur}\n      theme={props.theme!}\n      styles={gridStyles}\n    />\n  );\n});\n\nSwatchColorPickerBase.displayName = COMPONENT_NAME;\n"]}
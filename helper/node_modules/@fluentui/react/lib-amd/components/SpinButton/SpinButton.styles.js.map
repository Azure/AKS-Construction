{"version":3,"file":"SpinButton.styles.js","sourceRoot":"../src/","sources":["components/SpinButton/SpinButton.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import { concatStyleSets, HighContrastSelector, IconFontSizes, getInputFocusStyle } from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\nimport { Position } from '../../Positioning';\nimport type { IRawStyle, ITheme } from '../../Styling';\nimport type { IButtonStyles } from '../../Button';\nimport type { ISpinButtonStyles, ISpinButtonStyleProps } from './SpinButton.types';\n\nconst ARROW_BUTTON_WIDTH = 23;\nconst ARROW_BUTTON_ICON_SIZE = 8;\nconst DEFAULT_HEIGHT = 32;\nconst DEFAULT_MIN_WIDTH = 86;\nconst LABEL_MARGIN = 10;\n\nconst getDisabledStyles = memoizeFunction(\n  (theme: ITheme): IRawStyle => {\n    const { semanticColors } = theme;\n\n    const SpinButtonTextColorDisabled = semanticColors.disabledText;\n    const SpinButtonBackgroundColorDisabled = semanticColors.disabledBackground;\n\n    return {\n      backgroundColor: SpinButtonBackgroundColorDisabled,\n      pointerEvents: 'none',\n      cursor: 'default',\n      color: SpinButtonTextColorDisabled,\n      selectors: {\n        ':after': {\n          borderColor: SpinButtonBackgroundColorDisabled,\n        },\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    };\n  },\n);\n\nexport const getArrowButtonStyles = memoizeFunction(\n  (theme: ITheme, isUpArrow: boolean, customSpecificArrowStyles?: Partial<IButtonStyles>): IButtonStyles => {\n    const { palette, semanticColors, effects } = theme;\n\n    // TODO: after updating the semanticColor slots all this need to be reevaluated.\n    const ArrowButtonTextColor = palette.neutralSecondary;\n    const ArrowButtonTextColorHovered = semanticColors.buttonText;\n    const ArrowButtonTextColorPressed = semanticColors.buttonText;\n\n    const ArrowButtonBackgroundHovered = semanticColors.buttonBackgroundHovered;\n    const ArrowButtonBackgroundPressed = semanticColors.buttonBackgroundPressed;\n\n    const defaultArrowButtonStyles: IButtonStyles = {\n      root: {\n        outline: 'none',\n        display: 'block',\n        height: '50%',\n        width: ARROW_BUTTON_WIDTH,\n        padding: 0,\n        backgroundColor: 'transparent',\n        textAlign: 'center',\n        cursor: 'default',\n        color: ArrowButtonTextColor,\n        selectors: {\n          '&.ms-DownButton': {\n            borderRadius: `0 0 ${effects.roundedCorner2} 0`,\n          },\n          '&.ms-UpButton': {\n            borderRadius: `0 ${effects.roundedCorner2} 0 0`,\n          },\n        },\n      },\n      rootHovered: {\n        backgroundColor: ArrowButtonBackgroundHovered,\n        color: ArrowButtonTextColorHovered,\n      },\n      rootChecked: {\n        backgroundColor: ArrowButtonBackgroundPressed,\n        color: ArrowButtonTextColorPressed,\n        selectors: {\n          [HighContrastSelector]: {\n            backgroundColor: 'Highlight',\n            color: 'HighlightText',\n          },\n        },\n      },\n      rootPressed: {\n        backgroundColor: ArrowButtonBackgroundPressed,\n        color: ArrowButtonTextColorPressed,\n        selectors: {\n          [HighContrastSelector]: {\n            backgroundColor: 'Highlight',\n            color: 'HighlightText',\n          },\n        },\n      },\n      rootDisabled: {\n        opacity: 0.5,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'GrayText',\n            opacity: 1,\n          },\n        },\n      },\n      icon: {\n        fontSize: ARROW_BUTTON_ICON_SIZE,\n        marginTop: 0,\n        marginRight: 0,\n        marginBottom: 0,\n        marginLeft: 0,\n      },\n    };\n\n    // No specific styles needed as of now.\n    const defaultUpArrowButtonStyles: Partial<IButtonStyles> = {};\n\n    const defaultDownArrowButtonStyles: Partial<IButtonStyles> = {};\n\n    return concatStyleSets(\n      defaultArrowButtonStyles,\n      isUpArrow ? defaultUpArrowButtonStyles : defaultDownArrowButtonStyles,\n      customSpecificArrowStyles,\n    ) as IButtonStyles;\n  },\n);\n\nexport const getStyles = (props: ISpinButtonStyleProps): ISpinButtonStyles => {\n  const { theme, className, labelPosition, disabled, isFocused } = props;\n  const { palette, semanticColors, effects, fonts } = theme;\n  const SpinButtonRootBorderColor = semanticColors.inputBorder;\n  const SpinButtonRootBackgroundColor = semanticColors.inputBackground;\n  const SpinButtonRootBorderColorHovered = semanticColors.inputBorderHovered;\n  const SpinButtonRootBorderColorFocused = semanticColors.inputFocusBorderAlt;\n  const SpinButtonInputTextColor = semanticColors.inputText;\n  const SpinButtonInputTextColorSelected = palette.white;\n  const SpinButtonInputBackgroundColorSelected = semanticColors.inputBackgroundChecked;\n  const SpinButtonIconDisabledColor = semanticColors.disabledText;\n\n  return {\n    root: [\n      fonts.medium,\n      {\n        outline: 'none',\n        width: '100%',\n        minWidth: DEFAULT_MIN_WIDTH,\n      },\n      className,\n    ],\n\n    labelWrapper: [\n      {\n        display: 'inline-flex',\n        alignItems: 'center',\n      },\n      labelPosition === Position.start && {\n        height: DEFAULT_HEIGHT,\n        float: 'left',\n        marginRight: LABEL_MARGIN,\n      },\n      labelPosition === Position.end && {\n        height: DEFAULT_HEIGHT,\n        float: 'right',\n        marginLeft: LABEL_MARGIN,\n      },\n      labelPosition === Position.top && {\n        // Due to the lineHeight set on the label (below), the height of the wrapper (contains icon+label)\n        // ends up 1px taller than a standard label height, causing the vertical alignment to be off when\n        // the SpinButton is displayed with the label on top next to other form fields.\n        // Decrease the wrapper's effective height slightly to compensate.\n        marginBottom: -1,\n      },\n    ],\n\n    icon: [\n      {\n        padding: '0 5px',\n        fontSize: IconFontSizes.large,\n      },\n      disabled && {\n        color: SpinButtonIconDisabledColor,\n      },\n    ],\n\n    label: {\n      pointerEvents: 'none',\n      // centering the label with the icon by forcing the exact same height as the icon.\n      lineHeight: IconFontSizes.large,\n    },\n\n    spinButtonWrapper: [\n      {\n        display: 'flex',\n        position: 'relative',\n        boxSizing: 'border-box',\n        height: DEFAULT_HEIGHT,\n        minWidth: DEFAULT_MIN_WIDTH,\n        selectors: {\n          // setting border using pseudo-element here in order to prevent:\n          // input and chevron buttons to overlap border under certain resolutions\n          ':after': {\n            pointerEvents: 'none',\n            content: \"''\",\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            bottom: 0,\n            right: 0,\n            borderWidth: '1px',\n            borderStyle: 'solid',\n            borderColor: SpinButtonRootBorderColor,\n            borderRadius: effects.roundedCorner2,\n          },\n        },\n      },\n      (labelPosition === Position.top || labelPosition === Position.bottom) && {\n        width: '100%',\n      },\n      !disabled && [\n        {\n          selectors: {\n            ':hover': {\n              selectors: {\n                ':after': {\n                  borderColor: SpinButtonRootBorderColorHovered,\n                },\n                [HighContrastSelector]: {\n                  selectors: {\n                    ':after': {\n                      borderColor: 'Highlight',\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n        isFocused && {\n          selectors: {\n            '&&': getInputFocusStyle(SpinButtonRootBorderColorFocused, effects.roundedCorner2),\n          },\n        },\n      ],\n      disabled && getDisabledStyles(theme),\n    ],\n\n    input: [\n      'ms-spinButton-input',\n      {\n        boxSizing: 'border-box',\n        boxShadow: 'none',\n        borderStyle: 'none',\n        flex: 1,\n        margin: 0,\n        fontSize: fonts.medium.fontSize,\n        fontFamily: 'inherit',\n        color: SpinButtonInputTextColor,\n        backgroundColor: SpinButtonRootBackgroundColor,\n        height: '100%',\n        padding: '0 8px 0 9px',\n        outline: 0,\n        display: 'block',\n        minWidth: DEFAULT_MIN_WIDTH - ARROW_BUTTON_WIDTH - 2,\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        cursor: 'text',\n        userSelect: 'text',\n        borderRadius: `${effects.roundedCorner2} 0 0 ${effects.roundedCorner2}`,\n      },\n      !disabled && {\n        selectors: {\n          '::selection': {\n            backgroundColor: SpinButtonInputBackgroundColorSelected,\n            color: SpinButtonInputTextColorSelected,\n            selectors: {\n              [HighContrastSelector]: {\n                backgroundColor: 'Highlight',\n                borderColor: 'Highlight',\n                color: 'HighlightText',\n              },\n            },\n          },\n        },\n      },\n      disabled && getDisabledStyles(theme),\n    ],\n\n    arrowButtonsContainer: [\n      {\n        display: 'block',\n        height: '100%',\n        cursor: 'default',\n      },\n      disabled && getDisabledStyles(theme),\n    ],\n  };\n};\n"]}
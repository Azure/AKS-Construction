{"version":3,"file":"KeytipLayer.base.js","sourceRoot":"../src/","sources":["components/KeytipLayer/KeytipLayer.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { getLayerStyles } from './KeytipLayer.styles';\nimport { Keytip } from '../../Keytip';\nimport { Layer } from '../../Layer';\nimport {\n  classNamesFunction,\n  getDocument,\n  arraysEqual,\n  warn,\n  isMac,\n  EventGroup,\n  Async,\n  initializeComponentRef,\n  KeyCodes,\n} from '../../Utilities';\nimport { KeytipManager } from '../../utilities/keytips/KeytipManager';\nimport { KeytipTree } from './KeytipTree';\nimport {\n  ktpTargetFromId,\n  ktpTargetFromSequences,\n  sequencesToID,\n  mergeOverflows,\n} from '../../utilities/keytips/KeytipUtils';\nimport { transitionKeysContain } from '../../utilities/keytips/IKeytipTransitionKey';\nimport { KeytipEvents, KTP_LAYER_ID, KTP_ARIA_SEPARATOR } from '../../utilities/keytips/KeytipConstants';\nimport type { IKeytipLayerProps, IKeytipLayerStyles, IKeytipLayerStyleProps } from './KeytipLayer.types';\nimport type { IKeytipProps } from '../../Keytip';\nimport type { IKeytipTreeNode } from './IKeytipTreeNode';\nimport type { KeytipTransitionModifier, IKeytipTransitionKey } from '../../utilities/keytips/IKeytipTransitionKey';\n\nexport interface IKeytipLayerState {\n  inKeytipMode: boolean;\n  keytips: IKeytipProps[];\n  visibleKeytips: IKeytipProps[];\n}\n\n// Default sequence is Alt-Windows (Alt-Meta) in Windows, Option-Control (Alt-Control) in Mac\nconst defaultStartSequence: IKeytipTransitionKey = {\n  key: isMac() ? 'Control' : 'Meta',\n  modifierKeys: [KeyCodes.alt],\n};\n\n// Default exit sequence is the same as the start sequence\nconst defaultExitSequence: IKeytipTransitionKey = defaultStartSequence;\n\n// Default return sequence is Escape\nconst defaultReturnSequence: IKeytipTransitionKey = {\n  key: 'Escape',\n};\n\nconst getClassNames = classNamesFunction<IKeytipLayerStyleProps, IKeytipLayerStyles>();\n\n/**\n * A layer that holds all keytip items\n * {@docCategory Keytips}\n */\nexport class KeytipLayerBase extends React.Component<IKeytipLayerProps, IKeytipLayerState> {\n  public static defaultProps: IKeytipLayerProps = {\n    keytipStartSequences: [defaultStartSequence],\n    keytipExitSequences: [defaultExitSequence],\n    keytipReturnSequences: [defaultReturnSequence],\n    content: '',\n  };\n\n  private _events: EventGroup;\n  private _async: Async;\n\n  private _keytipTree: KeytipTree;\n\n  private _keytipManager: KeytipManager = KeytipManager.getInstance();\n  private _classNames: { [key in keyof IKeytipLayerStyles]: string };\n  private _currentSequence: string;\n  private _newCurrentKeytipSequences?: string[];\n\n  private _delayedKeytipQueue: string[] = [];\n  private _delayedQueueTimeout: number;\n\n  private _keyHandled = false;\n\n  constructor(props: IKeytipLayerProps, context: any) {\n    super(props, context);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n    this._async = new Async(this);\n\n    const keytips = this._keytipManager.getKeytips();\n\n    this.state = {\n      inKeytipMode: false,\n      keytips,\n      visibleKeytips: this._getVisibleKeytips(keytips),\n    };\n\n    this._buildTree();\n\n    this._currentSequence = '';\n\n    // Add keytip listeners\n    this._events.on(this._keytipManager, KeytipEvents.KEYTIP_ADDED, this._onKeytipAdded);\n    this._events.on(this._keytipManager, KeytipEvents.KEYTIP_UPDATED, this._onKeytipUpdated);\n    this._events.on(this._keytipManager, KeytipEvents.KEYTIP_REMOVED, this._onKeytipRemoved);\n    this._events.on(this._keytipManager, KeytipEvents.PERSISTED_KEYTIP_ADDED, this._onPersistedKeytipAdded);\n    this._events.on(this._keytipManager, KeytipEvents.PERSISTED_KEYTIP_REMOVED, this._onPersistedKeytipRemoved);\n    this._events.on(this._keytipManager, KeytipEvents.PERSISTED_KEYTIP_EXECUTE, this._onPersistedKeytipExecute);\n  }\n\n  public render(): JSX.Element {\n    const { content, styles } = this.props;\n\n    const { keytips, visibleKeytips } = this.state;\n\n    this._classNames = getClassNames(styles, {});\n\n    return (\n      <Layer styles={getLayerStyles}>\n        <span id={KTP_LAYER_ID} className={this._classNames.innerContent}>{`${content}${KTP_ARIA_SEPARATOR}`}</span>\n        {keytips &&\n          keytips.map((keytipProps: IKeytipProps, index: number) => {\n            return (\n              <span key={index} id={sequencesToID(keytipProps.keySequences)} className={this._classNames.innerContent}>\n                {keytipProps.keySequences.join(KTP_ARIA_SEPARATOR)}\n              </span>\n            );\n          })}\n        {visibleKeytips &&\n          visibleKeytips.map((visibleKeytipProps: IKeytipProps) => {\n            return <Keytip key={sequencesToID(visibleKeytipProps.keySequences)} {...visibleKeytipProps} />;\n          })}\n      </Layer>\n    );\n  }\n\n  public componentDidMount(): void {\n    // Add window listeners\n    this._events.on(window, 'mouseup', this._onDismiss, true /* useCapture */);\n    this._events.on(window, 'pointerup', this._onDismiss, true /* useCapture */);\n    this._events.on(window, 'resize', this._onDismiss);\n    this._events.on(window, 'keydown', this._onKeyDown, true /* useCapture */);\n    this._events.on(window, 'keypress', this._onKeyPress, true /* useCapture */);\n    this._events.on(window, 'scroll', this._onDismiss, true /* useCapture */);\n\n    // Add keytip listeners\n    this._events.on(this._keytipManager, KeytipEvents.ENTER_KEYTIP_MODE, this._enterKeytipMode);\n    this._events.on(this._keytipManager, KeytipEvents.EXIT_KEYTIP_MODE, this._exitKeytipMode);\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  // The below public functions are only public for testing purposes\n  // They are not intended to be used in app code by using a KeytipLayer reference\n\n  public getCurrentSequence(): string {\n    return this._currentSequence;\n  }\n\n  public getKeytipTree(): KeytipTree {\n    return this._keytipTree;\n  }\n\n  /**\n   * Processes an IKeytipTransitionKey entered by the user\n   *\n   * @param transitionKey - IKeytipTransitionKey received by the layer to process\n   */\n  public processTransitionInput(transitionKey: IKeytipTransitionKey, ev?: React.KeyboardEvent<HTMLElement>): void {\n    const currKtp = this._keytipTree.currentKeytip;\n    if (transitionKeysContain(this.props.keytipExitSequences!, transitionKey) && currKtp) {\n      // If key sequence is in 'exit sequences', exit keytip mode\n      this._keyHandled = true;\n      this._exitKeytipMode(ev);\n    } else if (transitionKeysContain(this.props.keytipReturnSequences!, transitionKey)) {\n      // If key sequence is in return sequences, move currentKeytip to parent (or if currentKeytip is the root, exit)\n      if (currKtp) {\n        this._keyHandled = true;\n        if (currKtp.id === this._keytipTree.root.id) {\n          // We are at the root, exit keytip mode\n          this._exitKeytipMode(ev);\n        } else {\n          // If this keytip has a onReturn prop, we execute the func.\n          if (currKtp.onReturn) {\n            currKtp.onReturn(this._getKtpExecuteTarget(currKtp), this._getKtpTarget(currKtp));\n          }\n\n          // Reset currentSequence\n          this._currentSequence = '';\n          // Return pointer to its parent\n          this._keytipTree.currentKeytip = this._keytipTree.getNode(currKtp.parent);\n          // Show children keytips of the new currentKeytip\n          this.showKeytips(this._keytipTree.getChildren());\n          this._warnIfDuplicateKeytips();\n        }\n      }\n    } else if (transitionKeysContain(this.props.keytipStartSequences!, transitionKey) && !currKtp) {\n      // If key sequence is in 'entry sequences' and currentKeytip is null, we enter keytip mode\n      this._keyHandled = true;\n      this._enterKeytipMode(transitionKey);\n      this._warnIfDuplicateKeytips();\n    }\n  }\n\n  /**\n   * Processes inputs from the document listener and traverse the keytip tree\n   *\n   * @param key - Key pressed by the user\n   */\n  public processInput(key: string, ev?: React.KeyboardEvent<HTMLElement>): void {\n    // Concat the input key with the current sequence\n    const currSequence: string = this._currentSequence + key;\n    let currKtp = this._keytipTree.currentKeytip;\n\n    // currentKeytip must be defined, otherwise we haven't entered keytip mode yet\n    if (currKtp) {\n      const node = this._keytipTree.getExactMatchedNode(currSequence, currKtp);\n      if (node) {\n        this._keytipTree.currentKeytip = currKtp = node;\n        const currKtpChildren = this._keytipTree.getChildren();\n\n        // Execute this node's onExecute if defined\n        if (currKtp.onExecute) {\n          currKtp.onExecute(this._getKtpExecuteTarget(currKtp), this._getKtpTarget(currKtp));\n          // Reset currKtp, this might have changed from the onExecute\n          currKtp = this._keytipTree.currentKeytip;\n        }\n\n        // To exit keytipMode after executing the keytip it must not have a menu or have dynamic children\n        if (currKtpChildren.length === 0 && !(currKtp.hasDynamicChildren || currKtp.hasMenu)) {\n          this._exitKeytipMode(ev);\n        } else {\n          // Show all children keytips\n          this.showKeytips(currKtpChildren);\n          this._warnIfDuplicateKeytips();\n        }\n\n        // Clear currentSequence\n        this._currentSequence = '';\n        return;\n      }\n\n      const partialNodes = this._keytipTree.getPartiallyMatchedNodes(currSequence, currKtp);\n      if (partialNodes.length > 0) {\n        // We found nodes that partially match the sequence, so we show only those\n        // Omit showing persisted nodes here\n        const ids = partialNodes\n          .filter((partialNode: IKeytipTreeNode) => {\n            return !partialNode.persisted;\n          })\n          .map((partialNode: IKeytipTreeNode) => {\n            return partialNode.id;\n          });\n        this.showKeytips(ids);\n\n        // Save currentSequence\n        this._currentSequence = currSequence;\n      }\n    }\n  }\n\n  /**\n   * Show the given keytips and hide all others\n   *\n   * @param ids - Keytip IDs to show\n   */\n  public showKeytips(ids: string[]): void {\n    // Update the visible prop in the manager\n    for (const keytip of this._keytipManager.getKeytips()) {\n      let keytipId = sequencesToID(keytip.keySequences);\n      if (keytip.overflowSetSequence) {\n        // Check if the ID with the overflow is the keytip we're looking for\n        keytipId = sequencesToID(mergeOverflows(keytip.keySequences, keytip.overflowSetSequence));\n      }\n      if (ids.indexOf(keytipId) >= 0) {\n        keytip.visible = true;\n      } else {\n        keytip.visible = false;\n      }\n    }\n    // Apply the manager changes to the Layer state\n    this._setKeytips();\n  }\n\n  /**\n   * Enters keytip mode for this layer\n   */\n  private _enterKeytipMode(transitionKey?: IKeytipTransitionKey): void {\n    if (this._keytipManager.shouldEnterKeytipMode) {\n      if (this._keytipManager.delayUpdatingKeytipChange) {\n        this._buildTree();\n        this._setKeytips();\n      }\n      this._keytipTree.currentKeytip = this._keytipTree.root;\n      // Show children of root\n      this.showKeytips(this._keytipTree.getChildren());\n\n      this._setInKeytipMode(true /* inKeytipMode */);\n\n      if (this.props.onEnterKeytipMode) {\n        this.props.onEnterKeytipMode(transitionKey);\n      }\n    }\n  }\n\n  private _buildTree(): void {\n    this._keytipTree = new KeytipTree();\n    // Add regular and persisted keytips to the tree\n    for (const id of Object.keys(this._keytipManager.keytips)) {\n      const uniqueKeytip = this._keytipManager.keytips[id];\n      this._keytipTree.addNode(uniqueKeytip.keytip, uniqueKeytip.uniqueID);\n    }\n\n    for (const id of Object.keys(this._keytipManager.persistedKeytips)) {\n      const uniqueKeytip = this._keytipManager.persistedKeytips[id];\n      this._keytipTree.addNode(uniqueKeytip.keytip, uniqueKeytip.uniqueID);\n    }\n  }\n\n  /**\n   * Exits keytip mode for this layer\n   */\n  private _exitKeytipMode(ev?: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement>): void {\n    this._keytipTree.currentKeytip = undefined;\n    this._currentSequence = '';\n    // Hide all keytips\n    this.showKeytips([]);\n\n    // Reset the delayed keytips if any\n    this._delayedQueueTimeout && this._async.clearTimeout(this._delayedQueueTimeout);\n    this._delayedKeytipQueue = [];\n\n    this._setInKeytipMode(false /* inKeytipMode */);\n\n    if (this.props.onExitKeytipMode) {\n      this.props.onExitKeytipMode(ev);\n    }\n  }\n\n  /**\n   * Sets the keytips state property\n   *\n   * @param keytipProps - Keytips to set in this layer\n   */\n  private _setKeytips(keytipProps: IKeytipProps[] = this._keytipManager.getKeytips()) {\n    this.setState({ keytips: keytipProps, visibleKeytips: this._getVisibleKeytips(keytipProps) });\n  }\n\n  /**\n   * Callback function to use for persisted keytips\n   *\n   * @param overflowButtonSequences - The overflow button sequence to execute\n   * @param keytipSequences - The keytip that should become the 'currentKeytip' when it is registered\n   */\n  private _persistedKeytipExecute(overflowButtonSequences: string[], keytipSequences: string[]) {\n    // Save newCurrentKeytip for later\n    this._newCurrentKeytipSequences = keytipSequences;\n\n    // Execute the overflow button's onExecute\n    const overflowKeytipNode = this._keytipTree.getNode(sequencesToID(overflowButtonSequences));\n    if (overflowKeytipNode && overflowKeytipNode.onExecute) {\n      overflowKeytipNode.onExecute(\n        this._getKtpExecuteTarget(overflowKeytipNode),\n        this._getKtpTarget(overflowKeytipNode),\n      );\n    }\n  }\n\n  private _getVisibleKeytips(keytips: IKeytipProps[]): IKeytipProps[] {\n    // Filter out non-visible keytips and duplicates\n    const seenIds: { [childSequence: string]: number } = {};\n    return keytips.filter(keytip => {\n      let keytipId = sequencesToID(keytip.keySequences);\n      if (keytip.overflowSetSequence) {\n        // Account for overflow set sequences when checking for duplicates\n        keytipId = sequencesToID(mergeOverflows(keytip.keySequences, keytip.overflowSetSequence));\n      }\n      seenIds[keytipId] = seenIds[keytipId] ? seenIds[keytipId] + 1 : 1;\n      return keytip.visible && seenIds[keytipId] === 1;\n    });\n  }\n\n  private _onDismiss = (ev?: React.MouseEvent<HTMLElement>): void => {\n    // if we are in keytip mode, then exit keytip mode\n    if (this.state.inKeytipMode) {\n      this._exitKeytipMode(ev);\n    }\n  };\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    this._keyHandled = false;\n    // using key since which has been deprecated and key is now widely suporrted.\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/which\n    let key = ev.key;\n    switch (key) {\n      case 'Tab':\n      case 'Enter':\n      case 'Spacebar':\n      case ' ':\n      case 'ArrowUp':\n      case 'Up':\n      case 'ArrowDown':\n      case 'Down':\n      case 'ArrowLeft':\n      case 'Left':\n      case 'ArrowRight':\n      case 'Right':\n        if (this.state.inKeytipMode) {\n          this._keyHandled = true;\n          this._exitKeytipMode(ev);\n        }\n        break;\n      default:\n        // Special cases for browser-specific keys that are not at standard\n        // (according to http://www.w3.org/TR/uievents-key/#keys-navigation)\n        if (key === 'Esc') {\n          // Edge: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/5290772/\n          key = 'Escape';\n        } else if (key === 'OS' || key === 'Win') {\n          // Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1232918\n          // Edge: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/\n          // and https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/16424492/\n          key = 'Meta';\n        }\n        const transitionKey: IKeytipTransitionKey = { key };\n        transitionKey.modifierKeys = this._getModifierKey(key, ev);\n        this.processTransitionInput(transitionKey, ev);\n        break;\n    }\n  };\n\n  /**\n   * Gets the ModifierKeyCodes based on the keyboard event\n   *\n   * @param ev - React.KeyboardEvent\n   * @returns List of ModifierKeyCodes that were pressed\n   */\n  private _getModifierKey(key: string, ev: React.KeyboardEvent<HTMLElement>): KeytipTransitionModifier[] | undefined {\n    const modifierKeys: KeytipTransitionModifier[] = [];\n    if (ev.altKey && key !== 'Alt') {\n      modifierKeys.push(KeyCodes.alt);\n    }\n    if (ev.ctrlKey && key !== 'Control') {\n      modifierKeys.push(KeyCodes.ctrl);\n    }\n    if (ev.shiftKey && key !== 'Shift') {\n      modifierKeys.push(KeyCodes.shift);\n    }\n    if (ev.metaKey && key !== 'Meta') {\n      modifierKeys.push(KeyCodes.leftWindow);\n    }\n    return modifierKeys.length ? modifierKeys : undefined;\n  }\n\n  private _onKeyPress = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (this.state.inKeytipMode && !this._keyHandled) {\n      // Call processInput\n      this.processInput(ev.key.toLocaleLowerCase(), ev);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  };\n\n  private _onKeytipAdded = (eventArgs: any) => {\n    const keytipProps = eventArgs.keytip;\n    const uniqueID = eventArgs.uniqueID;\n\n    this._keytipTree.addNode(keytipProps, uniqueID);\n    this._setKeytips();\n\n    // Add the keytip to the queue to show later\n    if (this._keytipTree.isCurrentKeytipParent(keytipProps)) {\n      // Ensure existing children are still shown.\n      this._delayedKeytipQueue = this._delayedKeytipQueue.concat(this._keytipTree.currentKeytip?.children || []);\n\n      this._addKeytipToQueue(sequencesToID(keytipProps.keySequences));\n\n      // Ensure the child of currentKeytip is successfully added to currentKeytip's children and update it if not.\n      // Note: Added this condition because KeytipTree.addNode was not always reflecting updates made to a parent node\n      // in currentKeytip when that parent is the currentKeytip.\n      if (\n        this._keytipTree.currentKeytip &&\n        this._keytipTree.currentKeytip.hasDynamicChildren &&\n        this._keytipTree.currentKeytip.children.indexOf(keytipProps.id) < 0\n      ) {\n        const currNode = this._keytipTree.getNode(this._keytipTree.currentKeytip.id);\n        if (currNode) {\n          this._keytipTree.currentKeytip = currNode;\n        }\n      }\n    }\n\n    this._persistedKeytipChecks(keytipProps);\n  };\n\n  private _onKeytipUpdated = (eventArgs: any) => {\n    const keytipProps = eventArgs.keytip;\n    const uniqueID = eventArgs.uniqueID;\n    this._keytipTree.updateNode(keytipProps, uniqueID);\n    this._setKeytips();\n    if (this._keytipTree.isCurrentKeytipParent(keytipProps)) {\n      // Ensure existing children are still shown.\n      this._delayedKeytipQueue = this._delayedKeytipQueue.concat(this._keytipTree.currentKeytip?.children || []);\n      this._addKeytipToQueue(sequencesToID(keytipProps.keySequences));\n    }\n\n    this._persistedKeytipChecks(keytipProps);\n  };\n\n  /**\n   * Helper function to do checks related to persisted/overflow keytips\n   * Done on keytip added and keytip updated\n   *\n   * @param keytipProps - Keytip props\n   */\n  private _persistedKeytipChecks = (keytipProps: IKeytipProps) => {\n    if (this._newCurrentKeytipSequences && arraysEqual(keytipProps.keySequences, this._newCurrentKeytipSequences)) {\n      this._triggerKeytipImmediately(keytipProps);\n    }\n\n    if (this._isCurrentKeytipAnAlias(keytipProps)) {\n      let keytipSequence = keytipProps.keySequences;\n      if (keytipProps.overflowSetSequence) {\n        keytipSequence = mergeOverflows(keytipSequence, keytipProps.overflowSetSequence);\n      }\n      this._keytipTree.currentKeytip = this._keytipTree.getNode(sequencesToID(keytipSequence));\n    }\n  };\n\n  private _onKeytipRemoved = (eventArgs: any) => {\n    const keytipProps = eventArgs.keytip;\n    const uniqueID = eventArgs.uniqueID;\n\n    // Remove keytip from the delayed queue\n    this._removeKeytipFromQueue(sequencesToID(keytipProps.keySequences));\n\n    // Remove the node from the Tree\n    this._keytipTree.removeNode(keytipProps, uniqueID);\n    this._setKeytips();\n  };\n\n  private _onPersistedKeytipAdded = (eventArgs: any) => {\n    const keytipProps = eventArgs.keytip;\n    const uniqueID = eventArgs.uniqueID;\n    this._keytipTree.addNode(keytipProps, uniqueID, true);\n  };\n\n  private _onPersistedKeytipRemoved = (eventArgs: any) => {\n    const keytipProps = eventArgs.keytip;\n    const uniqueID = eventArgs.uniqueID;\n    this._keytipTree.removeNode(keytipProps, uniqueID);\n  };\n\n  private _onPersistedKeytipExecute = (eventArgs: any) => {\n    this._persistedKeytipExecute(eventArgs.overflowButtonSequences, eventArgs.keytipSequences);\n  };\n\n  /**\n   * Trigger a keytip immediately and set it as the current keytip\n   *\n   * @param keytipProps - Keytip to trigger immediately\n   */\n  private _triggerKeytipImmediately(keytipProps: IKeytipProps) {\n    // This keytip should become the currentKeytip and should execute right away\n    let keytipSequence = [...keytipProps.keySequences];\n    if (keytipProps.overflowSetSequence) {\n      keytipSequence = mergeOverflows(keytipSequence, keytipProps.overflowSetSequence);\n    }\n\n    // Set currentKeytip\n    this._keytipTree.currentKeytip = this._keytipTree.getNode(sequencesToID(keytipSequence));\n    if (this._keytipTree.currentKeytip) {\n      // Show all children keytips if any\n      const children = this._keytipTree.getChildren();\n      if (children.length) {\n        this.showKeytips(children);\n      }\n\n      if (this._keytipTree.currentKeytip.onExecute) {\n        this._keytipTree.currentKeytip.onExecute(\n          this._getKtpExecuteTarget(this._keytipTree.currentKeytip),\n          this._getKtpTarget(this._keytipTree.currentKeytip),\n        );\n      }\n    }\n\n    // Unset _newCurrKtpSequences\n    this._newCurrentKeytipSequences = undefined;\n  }\n\n  private _addKeytipToQueue(keytipID: string) {\n    // Add keytip\n    this._delayedKeytipQueue.push(keytipID);\n    // Clear timeout\n    this._delayedQueueTimeout && this._async.clearTimeout(this._delayedQueueTimeout);\n    // Reset timeout\n    this._delayedQueueTimeout = this._async.setTimeout(() => {\n      if (this._delayedKeytipQueue.length) {\n        this.showKeytips(this._delayedKeytipQueue);\n        this._delayedKeytipQueue = [];\n      }\n    }, 300);\n  }\n\n  private _removeKeytipFromQueue(keytipID: string) {\n    const index = this._delayedKeytipQueue.indexOf(keytipID);\n    if (index >= 0) {\n      // Remove keytip\n      this._delayedKeytipQueue.splice(index, 1);\n      // Clear timeout\n      this._delayedQueueTimeout && this._async.clearTimeout(this._delayedQueueTimeout);\n      // Reset timeout\n      this._delayedQueueTimeout = this._async.setTimeout(() => {\n        if (this._delayedKeytipQueue.length) {\n          this.showKeytips(this._delayedKeytipQueue);\n          this._delayedKeytipQueue = [];\n        }\n      }, 300);\n    }\n  }\n\n  private _getKtpExecuteTarget(currKtp: IKeytipTreeNode): HTMLElement | null {\n    return getDocument()!.querySelector(ktpTargetFromId(currKtp.id));\n  }\n\n  private _getKtpTarget(currKtp: IKeytipTreeNode): HTMLElement | null {\n    return getDocument()!.querySelector(ktpTargetFromSequences(currKtp.keySequences));\n  }\n\n  /**\n   * Returns T/F if the keytipProps keySequences match the currentKeytip, and the currentKeytip is in an overflow well\n   * This will make 'keytipProps' the new currentKeytip\n   *\n   * @param keytipProps - Keytip props to check\n   * @returns - T/F if this keytip should become the currentKeytip\n   */\n  private _isCurrentKeytipAnAlias(keytipProps: IKeytipProps): boolean {\n    const currKtp = this._keytipTree.currentKeytip;\n    if (\n      currKtp &&\n      (currKtp.overflowSetSequence || currKtp.persisted) &&\n      arraysEqual(keytipProps.keySequences, currKtp.keySequences)\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Sets if we are in keytip mode.\n   * Note, this sets both the state for the layer as well as\n   * the value that the manager will expose externally.\n   * @param inKeytipMode - Boolean so set whether we are in keytip mode or not\n   */\n  private _setInKeytipMode = (inKeytipMode: boolean): void => {\n    this.setState({ inKeytipMode: inKeytipMode });\n    this._keytipManager.inKeytipMode = inKeytipMode;\n  };\n\n  /**\n   * Emits a warning if duplicate keytips are found for the children of the current keytip\n   */\n  private _warnIfDuplicateKeytips = (): void => {\n    const duplicateKeytips = this._getDuplicateIds(this._keytipTree.getChildren());\n    if (duplicateKeytips.length) {\n      warn('Duplicate keytips found for ' + duplicateKeytips.join(', '));\n    }\n  };\n\n  /**\n   * Returns duplicates among keytip IDs.\n   * If the returned array is empty, no duplicates were found.\n   *\n   * @param keytipIds - Array of keytip IDs to find duplicates for\n   * @returns - Array of duplicates that were found. Each duplicate will only be added once to this array.\n   */\n  private _getDuplicateIds = (keytipIds: string[]): string[] => {\n    const seenIds: { [id: string]: number } = {};\n    return keytipIds.filter(keytipId => {\n      seenIds[keytipId] = seenIds[keytipId] ? seenIds[keytipId] + 1 : 1;\n      // Only add the first duplicate keytip seen\n      return seenIds[keytipId] === 2;\n    });\n  };\n}\n"]}
{"version":3,"file":"Tooltip.base.js","sourceRoot":"../src/","sources":["components/Tooltip/Tooltip.base.tsx"],"names":[],"mappings":";;;;IAOA,IAAM,aAAa,GAAG,8BAAkB,EAAsC,CAAC;IAE/E;QAAiC,uCAAmC;QAApE;YAAA,qEAmEC;YAPS,sBAAgB,GAAG,UAAC,KAAoB;gBAC9C,IAAI,OAAO,KAAK,CAAC,OAAO,KAAK,QAAQ,EAAE;oBACrC,OAAO,2BAAG,SAAS,EAAE,KAAI,CAAC,WAAW,CAAC,OAAO,IAAG,KAAK,CAAC,OAAO,CAAK,CAAC;iBACpE;qBAAM;oBACL,OAAO,6BAAK,SAAS,EAAE,KAAI,CAAC,WAAW,CAAC,OAAO,IAAG,KAAK,CAAC,OAAO,CAAO,CAAC;iBACxE;YACH,CAAC,CAAC;;QACJ,CAAC;QAnDQ,4BAAM,GAAb;YACQ,IAAA,KAWF,IAAI,CAAC,KAAK,EAVZ,SAAS,eAAA,EACT,YAAY,kBAAA,EACZ,eAAe,qBAAA,EACf,qBAAqB,2BAAA,EACrB,MAAM,YAAA,EACN,EAAE,QAAA,EACF,QAAQ,cAAA,EACR,uBAAuC,EAAvC,eAAe,mBAAG,IAAI,CAAC,gBAAgB,KAAA,EACvC,aAAa,mBAAA,EACb,KAAK,WACO,CAAC;YAEf,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,MAAO,EAAE;gBACxC,KAAK,EAAE,KAAM;gBACb,SAAS,EAAE,SAAS,IAAI,CAAC,YAAY,IAAI,YAAY,CAAC,SAAS,CAAC;gBAChE,SAAS,EAAE,YAAY,IAAI,YAAY,CAAC,SAAS;gBACjD,QAAQ,EAAE,YAAY,IAAI,YAAY,CAAC,QAAQ;gBAC/C,QAAQ,EAAE,QAAS;aACpB,CAAC,CAAC;YAEH,OAAO,CACL,oBAAC,iBAAO,qBACN,MAAM,EAAE,aAAa,EACrB,eAAe,EAAE,eAAe,EAChC,qBAAqB,EAAE,qBAAqB,IACxC,YAAY,EACZ,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,yBAAa,EAAE,CAAC,IAAI,CAAC,CAAC,IACrD,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI;gBAEhC,6BACE,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,EACnC,EAAE,EAAE,EAAE,EACN,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,EAC3B,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,EACrC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,IAEpC,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAC/C,CACE,CACX,CAAC;QACJ,CAAC;QAzDD,+BAA+B;QACjB,wBAAY,GAA2B;YACnD,eAAe,EAAE,iCAAe,CAAC,SAAS;YAC1C,QAAQ,EAAE,OAAO;YACjB,YAAY,EAAE;gBACZ,aAAa,EAAE,IAAI;gBACnB,SAAS,EAAE,EAAE;gBACb,QAAQ,EAAE,CAAC;gBACX,eAAe,EAAE,IAAI;gBACrB,UAAU,EAAE,KAAK;aAClB;SACF,CAAC;QAuDJ,kBAAC;KAAA,AAnED,CAAiC,KAAK,CAAC,SAAS,GAmE/C;IAnEY,kCAAW","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, divProperties, getNativeProps } from '../../Utilities';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { ITooltipProps, ITooltipStyleProps, ITooltipStyles } from './Tooltip.types';\n\nconst getClassNames = classNamesFunction<ITooltipStyleProps, ITooltipStyles>();\n\nexport class TooltipBase extends React.Component<ITooltipProps, any> {\n  // Specify default props values\n  public static defaultProps: Partial<ITooltipProps> = {\n    directionalHint: DirectionalHint.topCenter,\n    maxWidth: '364px',\n    calloutProps: {\n      isBeakVisible: true,\n      beakWidth: 16,\n      gapSpace: 0,\n      setInitialFocus: true,\n      doNotLayer: false,\n    },\n  };\n\n  private _classNames: IProcessedStyleSet<ITooltipStyles>;\n\n  public render(): JSX.Element {\n    const {\n      className,\n      calloutProps,\n      directionalHint,\n      directionalHintForRTL,\n      styles,\n      id,\n      maxWidth,\n      onRenderContent = this._onRenderContent,\n      targetElement,\n      theme,\n    } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className: className || (calloutProps && calloutProps.className),\n      beakWidth: calloutProps && calloutProps.beakWidth,\n      gapSpace: calloutProps && calloutProps.gapSpace,\n      maxWidth: maxWidth!,\n    });\n\n    return (\n      <Callout\n        target={targetElement}\n        directionalHint={directionalHint}\n        directionalHintForRTL={directionalHintForRTL}\n        {...calloutProps}\n        {...getNativeProps(this.props, divProperties, ['id'])} // omitting ID due to it being used in the div below\n        className={this._classNames.root}\n      >\n        <div\n          className={this._classNames.content}\n          id={id}\n          onFocus={this.props.onFocus}\n          onMouseEnter={this.props.onMouseEnter}\n          onMouseLeave={this.props.onMouseLeave}\n        >\n          {onRenderContent(this.props, this._onRenderContent)}\n        </div>\n      </Callout>\n    );\n  }\n\n  private _onRenderContent = (props: ITooltipProps): JSX.Element => {\n    if (typeof props.content === 'string') {\n      return <p className={this._classNames.subText}>{props.content}</p>;\n    } else {\n      return <div className={this._classNames.subText}>{props.content}</div>;\n    }\n  };\n}\n"]}
{"version":3,"file":"DocumentCardActivity.base.js","sourceRoot":"../src/","sources":["components/DocumentCard/DocumentCardActivity.base.tsx"],"names":[],"mappings":";;;;IAYA,IAAM,aAAa,GAAG,8BAAkB,EAAgE,CAAC;IAEzG;;OAEG;IACH;QAA8C,oDAAgD;QAG5F,kCAAY,KAAiC;YAA7C,YACE,kBAAM,KAAK,CAAC,SAGb;YADC,kCAAsB,CAAC,KAAI,CAAC,CAAC;;QAC/B,CAAC;QAEM,yCAAM,GAAb;YACQ,IAAA,KAAiD,IAAI,CAAC,KAAK,EAAzD,QAAQ,cAAA,EAAE,MAAM,YAAA,EAAE,MAAM,YAAA,EAAE,KAAK,WAAA,EAAE,SAAS,eAAe,CAAC;YAElE,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,MAAO,EAAE;gBACxC,KAAK,EAAE,KAAM;gBACb,SAAS,WAAA;gBACT,cAAc,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC;aAClC,CAAC,CAAC;YAEH,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;gBAClC,OAAO,IAAI,CAAC;aACb;YAED,OAAO,CACL,6BAAK,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI;gBAClC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;gBAC5B,6BAAK,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO;oBACtC,8BAAM,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,IAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAQ;oBAC5E,8BAAM,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAG,QAAQ,CAAQ,CACzD,CACF,CACP,CAAC;QACJ,CAAC;QAEO,iDAAc,GAAtB,UAAuB,MAAqC;YAC1D,OAAO,CACL,6BAAK,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO;gBACrC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI;gBACxD,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAC1B,CACP,CAAC;QACJ,CAAC;QAEO,gDAAa,GAArB,UAAsB,MAAmC;YACvD,OAAO,CACL,6BAAK,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM;gBACrC,oBAAC,yBAAW,IACV,aAAa,EAAE,MAAM,CAAC,QAAQ,EAC9B,IAAI,EAAE,MAAM,CAAC,IAAI,EACjB,QAAQ,EAAE,MAAM,CAAC,eAAe,EAChC,aAAa,EAAE,MAAM,CAAC,aAAa,EACnC,kBAAkB,EAAE,MAAM,CAAC,kBAAkB,EAC7C,IAAI,EAAC,cAAc,EACnB,IAAI,EAAE,qBAAW,CAAC,MAAM,GACxB,CACE,CACP,CAAC;QACJ,CAAC;QAEO,iDAAc,GAAtB,UAAuB,MAAqC;YAC1D,IAAI,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAEhC,IAAI,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE;gBACtB,UAAU,IAAI,IAAI,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;aAC1C;YAED,OAAO,UAAU,CAAC;QACpB,CAAC;QACH,+BAAC;IAAD,CAAC,AAnED,CAA8C,KAAK,CAAC,SAAS,GAmE5D;IAnEY,4DAAwB","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, initializeComponentRef } from '../../Utilities';\nimport { PersonaSize } from '../../Persona';\nimport { PersonaCoin } from '../../PersonaCoin';\nimport type {\n  IDocumentCardActivityProps,\n  IDocumentCardActivityPerson,\n  IDocumentCardActivityStyleProps,\n  IDocumentCardActivityStyles,\n} from './DocumentCardActivity.types';\nimport type { IProcessedStyleSet } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IDocumentCardActivityStyleProps, IDocumentCardActivityStyles>();\n\n/**\n * {@docCategory DocumentCard}\n */\nexport class DocumentCardActivityBase extends React.Component<IDocumentCardActivityProps, any> {\n  private _classNames: IProcessedStyleSet<IDocumentCardActivityStyles>;\n\n  constructor(props: IDocumentCardActivityProps) {\n    super(props);\n\n    initializeComponentRef(this);\n  }\n\n  public render(): JSX.Element | null {\n    const { activity, people, styles, theme, className } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      multiplePeople: people.length > 1,\n    });\n\n    if (!people || people.length === 0) {\n      return null;\n    }\n\n    return (\n      <div className={this._classNames.root}>\n        {this._renderAvatars(people)}\n        <div className={this._classNames.details}>\n          <span className={this._classNames.name}>{this._getNameString(people)}</span>\n          <span className={this._classNames.activity}>{activity}</span>\n        </div>\n      </div>\n    );\n  }\n\n  private _renderAvatars(people: IDocumentCardActivityPerson[]): React.ReactElement<{}> {\n    return (\n      <div className={this._classNames.avatars}>\n        {people.length > 1 ? this._renderAvatar(people[1]) : null}\n        {this._renderAvatar(people[0])}\n      </div>\n    );\n  }\n\n  private _renderAvatar(person: IDocumentCardActivityPerson): JSX.Element {\n    return (\n      <div className={this._classNames.avatar}>\n        <PersonaCoin\n          imageInitials={person.initials}\n          text={person.name}\n          imageUrl={person.profileImageSrc}\n          initialsColor={person.initialsColor}\n          allowPhoneInitials={person.allowPhoneInitials}\n          role=\"presentation\"\n          size={PersonaSize.size32}\n        />\n      </div>\n    );\n  }\n\n  private _getNameString(people: IDocumentCardActivityPerson[]): string {\n    let nameString = people[0].name;\n\n    if (people.length >= 2) {\n      nameString += ' +' + (people.length - 1);\n    }\n\n    return nameString;\n  }\n}\n"]}
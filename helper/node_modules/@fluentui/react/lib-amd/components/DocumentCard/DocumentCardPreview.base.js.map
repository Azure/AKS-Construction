{"version":3,"file":"DocumentCardPreview.base.js","sourceRoot":"../src/","sources":["components/DocumentCard/DocumentCardPreview.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Icon } from '../../Icon';\nimport { Image } from '../../Image';\nimport { Link } from '../../Link';\nimport { classNamesFunction, css, initializeComponentRef } from '../../Utilities';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type {\n  IDocumentCardPreviewImage,\n  IDocumentCardPreviewProps,\n  IDocumentCardPreviewStyleProps,\n  IDocumentCardPreviewStyles,\n} from './DocumentCardPreview.types';\n\nconst DEFAULT_DISPLAY_COUNT = 3;\nconst getClassNames = classNamesFunction<IDocumentCardPreviewStyleProps, IDocumentCardPreviewStyles>();\n\n/**\n * {@docCategory DocumentCard}\n */\nexport class DocumentCardPreviewBase extends React.Component<IDocumentCardPreviewProps, any> {\n  private _classNames: IProcessedStyleSet<IDocumentCardPreviewStyles>;\n\n  constructor(props: IDocumentCardPreviewProps) {\n    super(props);\n\n    initializeComponentRef(this);\n  }\n\n  public render(): JSX.Element {\n    const { previewImages, styles, theme, className } = this.props;\n    let style: React.CSSProperties | undefined;\n    let preview: React.ReactNode;\n    const isFileList = previewImages.length > 1;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      isFileList,\n    });\n\n    if (previewImages.length > 1) {\n      // Render a list of files\n      preview = this._renderPreviewList(previewImages);\n    } else if (previewImages.length === 1) {\n      // Render a single preview\n      preview = this._renderPreviewImage(previewImages[0]);\n\n      // Override the border color if an accent color was provided\n      /* eslint-disable deprecation/deprecation */\n      if (previewImages[0].accentColor) {\n        style = {\n          borderBottomColor: previewImages[0].accentColor,\n        };\n      }\n      /* eslint-enable deprecation/deprecation */\n    }\n\n    return (\n      <div className={this._classNames.root} style={style}>\n        {preview}\n      </div>\n    );\n  }\n\n  private _renderPreviewImage(\n    previewImage: IDocumentCardPreviewImage,\n  ): React.ReactElement<React.HTMLAttributes<HTMLDivElement>> {\n    const { width, height, imageFit, previewIconProps, previewIconContainerClass } = previewImage;\n\n    if (previewIconProps) {\n      return (\n        <div\n          className={css(this._classNames.previewIcon, previewIconContainerClass)}\n          style={{ width: width, height: height }}\n        >\n          <Icon {...previewIconProps} />\n        </div>\n      );\n    }\n\n    const image = (\n      <Image\n        width={width}\n        height={height}\n        imageFit={imageFit}\n        src={previewImage.previewImageSrc}\n        role=\"presentation\"\n        alt=\"\"\n      />\n    );\n\n    let icon;\n    if (previewImage.iconSrc) {\n      icon = <Image className={this._classNames.icon} src={previewImage.iconSrc} role=\"presentation\" alt=\"\" />;\n    }\n\n    return (\n      <div>\n        {image}\n        {icon}\n      </div>\n    );\n  }\n\n  private _renderPreviewList = (\n    previewImages: IDocumentCardPreviewImage[],\n  ): React.ReactElement<React.HTMLAttributes<HTMLDivElement>> => {\n    const { getOverflowDocumentCountText, maxDisplayCount = DEFAULT_DISPLAY_COUNT } = this.props;\n\n    // Determine how many documents we won't be showing\n    const overflowDocumentCount = previewImages.length - maxDisplayCount;\n\n    // Determine the overflow text that will be rendered after the preview list.\n    const overflowText = overflowDocumentCount\n      ? getOverflowDocumentCountText\n        ? getOverflowDocumentCountText(overflowDocumentCount)\n        : '+' + overflowDocumentCount\n      : null;\n\n    // Create list items for the documents to be shown\n    const fileListItems = previewImages.slice(0, maxDisplayCount).map((file, fileIndex) => (\n      <li key={fileIndex}>\n        <Image\n          className={this._classNames.fileListIcon}\n          src={file.iconSrc}\n          role=\"presentation\"\n          alt=\"\"\n          width=\"16px\"\n          height=\"16px\"\n        />\n        <Link\n          className={this._classNames.fileListLink}\n          // eslint-disable-next-line deprecation/deprecation\n          href={file.url}\n          {...file.linkProps}\n        >\n          {file.name}\n        </Link>\n      </li>\n    ));\n\n    return (\n      <div>\n        <ul className={this._classNames.fileList}>{fileListItems}</ul>\n        {overflowText && <span className={this._classNames.fileListOverflowText}>{overflowText}</span>}\n      </div>\n    );\n  };\n}\n"]}
{"version":3,"file":"MarqueeSelection.types.js","sourceRoot":"../src/","sources":["components/MarqueeSelection/MarqueeSelection.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { ISelection } from '../../utilities/selection/interfaces';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { IRefObject, IStyleFunction } from '../../Utilities';\n\n/**\n * {@docCategory MarqueeSelection}\n */\nexport interface IMarqueeSelection {}\n\n/**\n * {@docCategory MarqueeSelection}\n */\nexport interface IMarqueeSelectionProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Optional callback to access the IMarqueeSelection interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IMarqueeSelection>;\n\n  /**\n   * The selection object to interact with when updating selection changes.\n   */\n  selection: ISelection;\n\n  /**\n   * Optional props to mix into the root DIV element.\n   */\n  rootProps?: React.HTMLAttributes<HTMLDivElement>;\n\n  /**\n   * Optional callback that is called, when the mouse down event occurs, in order to determine\n   * if we should start a marquee selection. If true is returned, we will cancel the mousedown\n   * event to prevent upstream mousedown handlers from executing.\n   */\n  onShouldStartSelection?: (ev: MouseEvent) => boolean;\n\n  /**\n   * Optional flag to control the enabled state of marquee selection. This allows you to render\n   * it and have events all ready to go, but conditionally disable it. That way transitioning\n   * between enabled/disabled generate no difference in the DOM.\n   * @defaultvalue true\n   */\n  isEnabled?: boolean;\n\n  /**\n   * Optional flag to restrict the drag rect to the root element, instead of allowing the drag\n   * rect to start outside of the root element boundaries.\n   * @defaultvalue false\n   */\n  isDraggingConstrainedToRoot?: boolean;\n\n  /**\n   * Additional CSS class(es) to apply to the MarqueeSelection.\n   */\n  className?: string;\n\n  /**\n   * Theme (provided through customization.)\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunction<IMarqueeSelectionStyleProps, IMarqueeSelectionStyles>;\n}\n\n/**\n * {@docCategory MarqueeSelection}\n */\nexport interface IMarqueeSelectionStyleProps {\n  theme: ITheme;\n  className?: string;\n}\n\n/**\n * {@docCategory MarqueeSelection}\n */\nexport interface IMarqueeSelectionStyles {\n  root?: IStyle;\n  dragMask?: IStyle;\n  box?: IStyle;\n  boxFill?: IStyle;\n}\n"]}
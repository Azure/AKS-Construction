{"version":3,"file":"FocusTrapZone.types.js","sourceRoot":"../src/","sources":["components/FocusTrapZone/FocusTrapZone.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { IRefObject } from '../../Utilities';\n\n/**\n * {@docCategory FocusTrapZone}\n */\nexport interface IFocusTrapZone {\n  /**\n   * Sets focus to a descendant in the Trap Zone.\n   * See firstFocusableSelector and focusPreviouslyFocusedInnerElement for details.\n   */\n  focus: () => void;\n}\n\n/**\n * {@docCategory FocusTrapZone}\n */\nexport interface IFocusTrapZoneProps extends React.HTMLAttributes<HTMLDivElement>, React.RefAttributes<HTMLDivElement> {\n  /**\n   * Optional callback to access the IFocusTrapZone interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IFocusTrapZone>;\n\n  /**\n   * Whether to disable the FocusTrapZone's focus trapping behavior.\n   * @defaultvalue false\n   */\n  disabled?: boolean;\n\n  /**\n   * Sets the element to focus on when exiting the FocusTrapZone.\n   * @defaultvalue The `element.target` that triggered the FTZ.\n   */\n  elementToFocusOnDismiss?: HTMLElement;\n\n  /**\n   * Sets the aria-labelledby attribute.\n   */\n  ariaLabelledBy?: string;\n\n  /**\n   * Whether clicks are allowed outside this FocusTrapZone.\n   * @defaultvalue false\n   */\n  isClickableOutsideFocusTrap?: boolean;\n\n  /**\n   * If false (the default), the trap zone will restore focus to the element which activated it\n   * once the trap zone is unmounted or disabled. Set to true to disable this behavior.\n   * @defaultvalue false\n   */\n  disableRestoreFocus?: boolean;\n\n  /**\n   * @deprecated Use `disableRestoreFocus` (it has the same behavior and a clearer name).\n   */\n  ignoreExternalFocusing?: boolean;\n\n  /**\n   * Whether the focus trap zone should force focus to stay inside of it.\n   * @defaultvalue true\n   */\n  forceFocusInsideTrap?: boolean;\n\n  /**\n   * Class name (not actual selector) for first focusable item. Do not append a dot.\n   * Only applies if `focusPreviouslyFocusedInnerElement` is false.\n   * @deprecated Use `firstFocusableTarget`, since it is more generic. `firstFocusableTarget` takes precedence if\n   * supplied.\n   */\n  firstFocusableSelector?: string | (() => string);\n\n  /**\n   * Either a full query selector for the first focusable element, or a function to select the focusable element\n   * within the area directly.\n   */\n  firstFocusableTarget?: string | ((element: HTMLElement) => HTMLElement | null);\n\n  /**\n   * Do not put focus onto the first element inside the focus trap zone.\n   * @defaultvalue false\n   */\n  disableFirstFocus?: boolean;\n\n  /**\n   * Specifies which descendant element to focus when `focus()` is called.\n   * If false, use the first focusable descendant, filtered by the `firstFocusableSelector` property if present.\n   * If true, use the element that was focused when the trap zone last had a focused descendant\n   * (or fall back to the first focusable descendant if the trap zone has never been focused).\n   * @defaultvalue false\n   */\n  focusPreviouslyFocusedInnerElement?: boolean;\n\n  /**\n   * Puts aria-hidden=true on all non-ancestors of the current element, for screen readers.\n   * In future versions of the library, this will be the default behavior.\n   */\n  enableAriaHiddenSiblings?: boolean;\n}\n"]}
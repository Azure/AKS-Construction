{"version":3,"file":"Spinner.base.js","sourceRoot":"../src/","sources":["components/Spinner/Spinner.base.tsx"],"names":[],"mappings":";;;;IAKA,IAAM,aAAa,GAAG,8BAAkB,EAAsC,CAAC;IAE/E;QAAiC,uCAAmC;QAApE;;QA2CA,CAAC;QApCQ,4BAAM,GAAb;YACE,mDAAmD;YAC7C,IAAA,KAAsF,IAAI,CAAC,KAAK,EAA9F,IAAI,UAAA,EAAE,IAAI,UAAA,EAAE,SAAS,eAAA,EAAE,QAAQ,cAAA,EAAE,MAAM,YAAA,EAAE,KAAK,WAAA,EAAE,KAAK,WAAA,EAAE,SAAS,eAAA,EAAE,aAAa,mBAAe,CAAC;YACvG,IAAM,aAAa,GAAG,SAAS,CAAC;YAChC,IAAM,WAAW,GAAG,0BAAc,CAAuC,IAAI,CAAC,KAAK,EAAE,yBAAa,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;YAE9G,mHAAmH;YACnH,6GAA6G;YAC7G,2CAA2C;YAC3C,IAAI,SAAS,GAAG,IAAI,CAAC;YACrB,IAAI,SAAS,KAAK,SAAS,IAAI,IAAI,KAAK,SAAS,EAAE;gBACjD,mDAAmD;gBACnD,SAAS,GAAG,IAAI,KAAK,2BAAW,CAAC,KAAK,CAAC,CAAC,CAAC,2BAAW,CAAC,KAAK,CAAC,CAAC,CAAC,2BAAW,CAAC,MAAM,CAAC;aACjF;YAED,IAAM,UAAU,GAAG,aAAa,CAAC,MAAO,EAAE;gBACxC,KAAK,EAAE,KAAM;gBACb,IAAI,EAAE,SAAS;gBACf,SAAS,WAAA;gBACT,aAAa,eAAA;aACd,CAAC,CAAC;YAEH,OAAO,CACL,gDAAS,WAAW,IAAE,SAAS,EAAE,UAAU,CAAC,IAAI;gBAC9C,6BAAK,SAAS,EAAE,UAAU,CAAC,MAAM,GAAI;gBACpC,KAAK,IAAI,6BAAK,SAAS,EAAE,UAAU,CAAC,KAAK,IAAG,KAAK,CAAO;gBACxD,aAAa,IAAI,CAChB,6BAAK,IAAI,EAAC,QAAQ,eAAY,QAAQ;oBACpC,oBAAC,yBAAa;wBACZ,6BAAK,SAAS,EAAE,UAAU,CAAC,gBAAgB,IAAG,aAAa,CAAO,CACpD,CACZ,CACP,CACG,CACP,CAAC;QACJ,CAAC;QAzCa,wBAAY,GAAkB;YAC1C,IAAI,EAAE,2BAAW,CAAC,MAAM;YACxB,QAAQ,EAAE,QAAQ;YAClB,aAAa,EAAE,QAAQ;SACxB,CAAC;QAsCJ,kBAAC;KAAA,AA3CD,CAAiC,KAAK,CAAC,SAAS,GA2C/C;IA3CY,kCAAW","sourcesContent":["import * as React from 'react';\nimport { SpinnerType, SpinnerSize } from './Spinner.types';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\nimport type { ISpinnerProps, ISpinnerStyleProps, ISpinnerStyles } from './Spinner.types';\n\nconst getClassNames = classNamesFunction<ISpinnerStyleProps, ISpinnerStyles>();\n\nexport class SpinnerBase extends React.Component<ISpinnerProps, any> {\n  public static defaultProps: ISpinnerProps = {\n    size: SpinnerSize.medium,\n    ariaLive: 'polite',\n    labelPosition: 'bottom',\n  };\n\n  public render() {\n    // eslint-disable-next-line deprecation/deprecation\n    const { type, size, ariaLabel, ariaLive, styles, label, theme, className, labelPosition } = this.props;\n    const statusMessage = ariaLabel;\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['size']);\n\n    // SpinnerType is deprecated. If someone is still using this property, rather than putting the SpinnerType into the\n    // ISpinnerStyleProps, we'll map SpinnerType to its equivalent SpinnerSize and pass that in. Once SpinnerType\n    // finally goes away we should delete this.\n    let styleSize = size;\n    if (styleSize === undefined && type !== undefined) {\n      // eslint-disable-next-line deprecation/deprecation\n      styleSize = type === SpinnerType.large ? SpinnerSize.large : SpinnerSize.medium;\n    }\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      size: styleSize,\n      className,\n      labelPosition,\n    });\n\n    return (\n      <div {...nativeProps} className={classNames.root}>\n        <div className={classNames.circle} />\n        {label && <div className={classNames.label}>{label}</div>}\n        {statusMessage && (\n          <div role=\"status\" aria-live={ariaLive}>\n            <DelayedRender>\n              <div className={classNames.screenReaderText}>{statusMessage}</div>\n            </DelayedRender>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"]}
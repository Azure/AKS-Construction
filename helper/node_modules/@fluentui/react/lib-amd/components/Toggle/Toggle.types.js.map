{"version":3,"file":"Toggle.types.js","sourceRoot":"../src/","sources":["components/Toggle/Toggle.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { IStyle, ITheme } from '@fluentui/style-utilities';\nimport type { IRefObject, IStyleFunctionOrObject, IComponentAs } from '@fluentui/utilities';\n\n/**\n * {@docCategory Toggle}\n */\nexport interface IToggle {\n  focus: () => void;\n}\n\n/**\n * Toggle component props.\n * {@docCategory Toggle}\n */\nexport interface IToggleProps extends React.HTMLAttributes<HTMLElement>, React.RefAttributes<HTMLElement> {\n  /**\n   * Render the root element as another type.\n   */\n  as?: IComponentAs<React.HTMLAttributes<HTMLElement>>;\n\n  /**\n   * Optional callback to access the IToggle interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IToggle>;\n\n  /**\n   * A label for the toggle.\n   */\n  label?: string | JSX.Element;\n\n  /**\n   * Text to display when toggle is ON.\n   * Caution: when not providing on/off text user may get confused in differentiating the on/off states of the toggle.\n   */\n  onText?: string;\n\n  /**\n   * Text to display when toggle is OFF.\n   * Caution: when not providing on/off text user may get confused in differentiating the on/off states of the toggle.\n   */\n  offText?: string;\n\n  /**\n   * Text for screen-reader to announce as the name of the toggle.\n   */\n  ariaLabel?: string;\n\n  /**\n   * @deprecated Use `ariaLabel` for name, and let the metadata convey state\n   */\n  onAriaLabel?: string;\n\n  /**\n   * @deprecated Use `ariaLabel` for name, and let the metadata convey state\n   */\n  offAriaLabel?: string;\n\n  /**\n   * Checked state of the toggle. If you are maintaining state yourself, use this property.\n   * Otherwise use `defaultChecked`.\n   */\n  checked?: boolean;\n\n  /**\n   * Initial state of the toggle. If you want the toggle to maintain its own state, use this.\n   * Otherwise use `checked`.\n   */\n  defaultChecked?: boolean;\n\n  /**\n   * Optional disabled flag.\n   */\n  disabled?: boolean;\n\n  /**\n   * Whether the label (not the onText/offText) should be positioned inline with the toggle control.\n   * Left (right in RTL) side when on/off text provided VS right (left in RTL) side when no on/off text.\n   * Caution: when not providing on/off text user may get confused in differentiating the on/off states of the toggle.\n   */\n  inlineLabel?: boolean;\n\n  /**\n   * Callback issued when the value changes.\n   */\n  onChange?: (event: React.MouseEvent<HTMLElement>, checked?: boolean) => void;\n\n  /**\n   * @deprecated Use `onChange` instead.\n   */\n  onChanged?: (checked: boolean) => void;\n\n  /**\n   * Theme provided by HOC.\n   */\n  theme?: ITheme;\n\n  /**\n   * Optional styles for the component.\n   */\n  styles?: IStyleFunctionOrObject<IToggleStyleProps, IToggleStyles>;\n\n  /**\n   * Whether to use the 'switch' role (ARIA 1.1) or the 'checkbox' role (ARIA 1.0).\n   * @default 'switch'\n   */\n  role?: 'checkbox' | 'switch' | 'menuitemcheckbox';\n}\n\n/**\n * Properties required to build the styles for the Toggle component.\n * {@docCategory Toggle}\n */\nexport interface IToggleStyleProps {\n  /**\n   * Theme values.\n   */\n  theme: ITheme;\n\n  /**\n   * Root element class name.\n   */\n  className?: string;\n\n  /**\n   * Component is disabled.\n   */\n  disabled?: boolean;\n\n  /**\n   * Component is checked.\n   */\n  checked?: boolean;\n\n  /**\n   * Whether label should be positioned inline with the toggle.\n   */\n  inlineLabel?: boolean;\n\n  /**\n   * Whether the user did not specify a on/off text. Influencing only when inlineLabel is used.\n   */\n  onOffMissing?: boolean;\n}\n\n/**\n * Styles for the Toggle component.\n * {@docCategory Toggle}\n */\nexport interface IToggleStyles {\n  /** Root element. */\n  root: IStyle;\n\n  /**\n   * Label element above the toggle.\n   */\n  label: IStyle;\n\n  /**\n   * Container for the toggle pill and the text next to it.\n   */\n  container: IStyle;\n\n  /**\n   * Pill, rendered as a button.\n   */\n  pill: IStyle;\n\n  /**\n   * Thumb inside of the pill.\n   */\n  thumb: IStyle;\n\n  /**\n   * Text next to the pill.\n   */\n  text: IStyle;\n}\n"]}
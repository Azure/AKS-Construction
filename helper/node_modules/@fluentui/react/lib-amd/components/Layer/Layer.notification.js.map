{"version":3,"file":"Layer.notification.js","sourceRoot":"../src/","sources":["components/Layer/Layer.notification.ts"],"names":[],"mappings":"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","sourcesContent":["import { ILayerHost } from './LayerHost.types';\n\nconst _layersByHostId: { [hostId: string]: (() => void)[] } = {};\nconst _layerHostsById: { [hostId: string]: ILayerHost[] } = {};\n\nconst defaultHostId = 'fluent-default-layer-host';\nlet _defaultHostSelector: string | undefined = `#${defaultHostId}`;\n\n/**\n * Register a layer for a given host id\n * @param hostId - Id of the layer host\n * @param layer - Layer instance\n */\nexport function registerLayer(hostId: string, callback: () => void) {\n  if (!_layersByHostId[hostId]) {\n    _layersByHostId[hostId] = [];\n  }\n\n  _layersByHostId[hostId].push(callback);\n\n  const layerHosts = _layerHostsById[hostId];\n\n  if (layerHosts) {\n    for (const layerHost of layerHosts) {\n      layerHost.notifyLayersChanged();\n    }\n  }\n}\n\n/**\n * Unregister a layer for a given host id\n * @param hostId - Id of the layer host\n * @param layer - Layer instance\n */\nexport function unregisterLayer(hostId: string, callback: () => void) {\n  const layers = _layersByHostId[hostId];\n\n  if (layers) {\n    const idx = layers.indexOf(callback);\n    if (idx >= 0) {\n      layers.splice(idx, 1);\n\n      if (layers.length === 0) {\n        delete _layersByHostId[hostId];\n      }\n    }\n  }\n\n  const layerHosts = _layerHostsById[hostId];\n\n  if (layerHosts) {\n    for (const layerHost of layerHosts) {\n      layerHost.notifyLayersChanged();\n    }\n  }\n}\n\n/**\n * Gets the number of layers currently registered with a host id.\n * @param hostId - Id of the layer host.\n * @returns The number of layers currently registered with the host.\n */\nexport function getLayerCount(hostId: string): number {\n  const layers = _layerHostsById[hostId];\n\n  return layers ? layers.length : 0;\n}\n\n/**\n * Gets the Layer Host instance associated with a hostId, if applicable.\n * @param hostId - Id of the layer host\n * @returns A component ref for the associated layer host.\n */\nexport function getLayerHost(hostId: string): ILayerHost | undefined {\n  const layerHosts = _layerHostsById[hostId];\n\n  return (layerHosts && layerHosts[0]) || undefined;\n}\n\n/**\n * Registers a Layer Host with an associated hostId.\n * @param hostId - Id of the layer host\n * @param layerHost - layer host instance\n */\nexport function registerLayerHost(hostId: string, layerHost: ILayerHost): void {\n  const layerHosts = _layerHostsById[hostId] || (_layerHostsById[hostId] = []);\n\n  // Insert this at the start of an array to avoid race conditions between mount and unmount.\n  // If a LayerHost is re-mounted, and mount of the new instance may occur before the unmount of the old one.\n  // Putting the new instance at the start of this array ensures that calls to `getLayerHost` will immediately\n  // get the new one even if the old one is around briefly.\n  layerHosts.unshift(layerHost);\n}\n\n/**\n * Unregisters a Layer Host from the associated hostId.\n * @param hostId - Id of the layer host\n * @param layerHost - layer host instance\n */\nexport function unregisterLayerHost(hostId: string, layerHost: ILayerHost): void {\n  const layerHosts = _layerHostsById[hostId];\n\n  if (layerHosts) {\n    const idx = layerHosts.indexOf(layerHost);\n\n    if (idx >= 0) {\n      layerHosts.splice(idx, 1);\n    }\n\n    if (layerHosts.length === 0) {\n      delete _layerHostsById[hostId];\n    }\n  }\n}\n\n/**\n * When no default layer host is provided, this function is executed to create the default host.\n */\nexport function createDefaultLayerHost(doc: Document): Node | null {\n  const host = doc.createElement('div');\n  host.setAttribute('id', defaultHostId);\n  (host as HTMLElement).style.cssText = 'position:fixed;z-index:1000000';\n\n  doc?.body.appendChild(host);\n\n  return host;\n}\n\n/**\n * This function can be optionally called to clean up the default layer host as needed.\n */\nexport function cleanupDefaultLayerHost(doc: Document) {\n  const host = doc.querySelector(`#${defaultHostId}`);\n\n  if (host) {\n    doc.removeChild(host);\n  }\n}\n\n/**\n * Used for notifying applicable Layers that a host is available/unavailable and to re-evaluate Layers that\n * care about the specific host.\n */\nexport function notifyHostChanged(id: string) {\n  if (_layersByHostId[id]) {\n    _layersByHostId[id].forEach(callback => callback());\n  }\n}\n\n/**\n * Sets the default target selector to use when determining the host in which\n * Layered content will be injected into. If not provided, an element will be\n * created at the end of the document body.\n *\n * Passing in a falsy value will clear the default target and reset back to\n * using a created element at the end of document body.\n */\nexport function setDefaultTarget(selector?: string) {\n  _defaultHostSelector = selector;\n}\n\n/**\n * Get the default target selector when determining a host\n */\nexport function getDefaultTarget(): string | undefined {\n  return _defaultHostSelector;\n}\n"]}
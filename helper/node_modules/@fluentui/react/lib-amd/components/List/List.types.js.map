{"version":3,"file":"List.types.js","sourceRoot":"../src/","sources":["components/List/List.types.ts"],"names":[],"mappings":";;;;IAIA;;OAEG;IACU,QAAA,YAAY,GAAG;QAC1B;;WAEG;QACH,IAAI,EAAE,CAAM;QACZ;;WAEG;QACH,GAAG,EAAE,CAAM;QACX;;WAEG;QACH,MAAM,EAAE,CAAM;QACd;;WAEG;QACH,MAAM,EAAE,CAAM;KACf,CAAC","sourcesContent":["import * as React from 'react';\nimport { List } from './List';\nimport type { IRefObject, IRectangle, IRenderFunction } from '../../Utilities';\n\n/**\n * {@docCategory List}\n */\nexport const ScrollToMode = {\n  /**\n   * Does not make any consideration to where in the viewport the item should align to.\n   */\n  auto: 0 as 0,\n  /**\n   * Attempts to scroll the list so the top of the desired item is aligned with the top of the viewport.\n   */\n  top: 1 as 1,\n  /**\n   * Attempts to scroll the list so the bottom of the desired item is aligned with the bottom of the viewport.\n   */\n  bottom: 2 as 2,\n  /**\n   * Attempts to scroll the list so the desired item is in the exact center of the viewport.\n   */\n  center: 3 as 3,\n};\n\n/**\n * {@docCategory List}\n */\nexport type ScrollToMode = typeof ScrollToMode[keyof typeof ScrollToMode];\n\n/**\n * Props passed to the render override for the list root.\n * {@docCategory List}\n */\nexport interface IListOnRenderRootProps<T> {\n  /**\n   * The ref to be applied to the list root.\n   * The `List` uses this element to track scroll position and sizing.\n   */\n  rootRef: React.Ref<HTMLDivElement>;\n  /**\n   * Props to apply to the list root element.\n   */\n  divProps: React.HTMLAttributes<HTMLDivElement>;\n  /**\n   * The active pages to be rendered into the list.\n   * These will have been rendered using `onRenderPage`.\n   */\n  pages: IPage<T>[];\n  /**\n   * The content to be rendered as the list surface element.\n   * This will have been rendered using `onRenderSurface`.\n   */\n  surfaceElement: JSX.Element | null;\n}\n\n/**\n * Props passed to the render override for the list surface.\n * {@docCategory List}\n */\nexport interface IListOnRenderSurfaceProps<T> {\n  /**\n   * A ref to be applied to the surface element.\n   * The `List` uses this element to track content size and focus.\n   */\n  surfaceRef: React.Ref<HTMLDivElement>;\n  /**\n   * Props to apply to the list surface element.\n   */\n  divProps: React.HTMLAttributes<HTMLDivElement>;\n  /**\n   * The active pages to be rendered into the list.\n   * These will have been rendered using `onRenderPage`.\n   */\n  pages: IPage<T>[];\n  /**\n   * The content to be rendered representing all active pages.\n   */\n  pageElements: JSX.Element[];\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IList {\n  /**\n   * Force the component to update.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Get the current height the list and it's pages.\n   */\n  getTotalListHeight?: () => number;\n\n  /**\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n   *\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n   *\n   * @param index - Index of item to scroll to\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional defines the behavior of the scrolling alignment. Defaults to auto.\n   *  Note: The scrollToMode requires the measureItem callback is provided to function.\n   */\n  scrollToIndex: (index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode) => void;\n\n  /**\n   * Get the start index of the page that is currently in view\n   */\n  getStartItemIndexInView: () => number;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IListProps<T = any> extends React.HTMLAttributes<List<T> | HTMLDivElement> {\n  /**\n   * Optional callback to access the IList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IList>;\n\n  /** Optional classname to append to root list. */\n  className?: string;\n\n  /** Items to render. */\n  items?: T[];\n\n  /**\n   * Method to call when trying to render an item.\n   * @param item - The data associated with the cell that is being rendered.\n   * @param index - The index of the cell being rendered.\n   * @param isScrolling - True if the list is being scrolled. May be useful for rendering a placeholder if your cells\n   * are complex.\n   */\n  onRenderCell?: (item?: T, index?: number, isScrolling?: boolean) => React.ReactNode;\n\n  /**\n   * Method to call when trying to render an item conditionally.\n   *\n   * When this method returns `null` the cell will be skipped in the render.\n   *\n   * This prop is mutually exclusive with `onRenderCell` and when `onRenderCellConditional` is set,\n   * `onRenderCell` will not be called.\n   *\n   * @param item - The data associated with the cell that is being rendered.\n   * @param index - The index of the cell being rendered.\n   * @param isScrolling - True if the list is being scrolled. May be useful for rendering a placeholder if your cells\n   * are complex.\n   */\n  onRenderCellConditional?: (item?: T, index?: number, isScrolling?: boolean) => React.ReactNode | null;\n\n  /**\n   * Optional callback invoked when List rendering completed.\n   * This can be on initial mount or on re-render due to scrolling.\n   * This method will be called as a result of changes in List pages (added or removed),\n   * and after ALL the changes complete.\n   * To track individual page Add / Remove use onPageAdded / onPageRemoved instead.\n   * @param pages - The current array of pages in the List.\n   */\n  onPagesUpdated?: (pages: IPage<T>[]) => void;\n\n  /** Optional callback for monitoring when a page is added. */\n  onPageAdded?: (page: IPage<T>) => void;\n\n  /** Optional callback for monitoring when a page is removed. */\n  onPageRemoved?: (page: IPage<T>) => void;\n\n  /** Optional callback to get the item key, to be used on render. */\n  getKey?: (item: T, index?: number) => string;\n\n  /**\n   * Called by the list to get the specification for a page.\n   * Use this method to provide an allocation of items per page,\n   * as well as an estimated rendered height for the page.\n   * The list will use this to optimize virtualization.\n   */\n  getPageSpecification?: (itemIndex?: number, visibleRect?: IRectangle) => IPageSpecification;\n\n  /**\n   * Method called by the list to get how many items to render per page from specified index.\n   * In general, use `getPageSpecification` instead.\n   */\n  getItemCountForPage?: (itemIndex?: number, visibleRect?: IRectangle) => number;\n\n  /**\n   * Method called by the list to get the pixel height for a given page. By default, we measure the first\n   * page's height and default all other pages to that height when calculating the surface space. It is\n   * ideal to be able to adequately predict page heights in order to keep the surface space from jumping\n   * in pixels, which has been seen to cause browser performance issues.\n   * In general, use `getPageSpecification` instead.\n   */\n  getPageHeight?: (itemIndex?: number, visibleRect?: IRectangle, itemCount?: number) => number;\n\n  /**\n   * Method called by the list to derive the page style object. For spacer pages, the list will derive\n   * the height and passed in heights will be ignored.\n   */\n  getPageStyle?: (page: IPage<T>) => any;\n\n  /**\n   * In addition to the visible window, how many windowHeights should we render ahead.\n   * @defaultvalue 2\n   */\n  renderedWindowsAhead?: number;\n\n  /**\n   * In addition to the visible window, how many windowHeights should we render behind.\n   * @defaultvalue 2\n   */\n  renderedWindowsBehind?: number;\n\n  /**\n   * Index in `items` array to start rendering from.\n   * @default 0\n   */\n  startIndex?: number;\n\n  /**\n   * Number of items to render.\n   * @default items.length\n   */\n  renderCount?: number;\n\n  /**\n   * Boolean value to enable render page caching. This is an experimental performance optimization\n   * that is off by default.\n   * @defaultvalue false\n   */\n  usePageCache?: boolean;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps<T>) => boolean;\n\n  /**\n   * The role to assign to the list root element.\n   * Use this to override the default assignment of 'list' to the root and 'listitem' to the cells.\n   */\n  role?: string;\n\n  /**\n   * Called when the List will render a page.\n   * Override this to control how cells are rendered within a page.\n   */\n  onRenderPage?: IRenderFunction<IPageProps<T>>;\n\n  /**\n   * Render override for the element at the root of the `List`.\n   * Use this to apply some final attributes or structure to the content\n   * each time the list is updated with new active pages or items.\n   */\n  onRenderRoot?: IRenderFunction<IListOnRenderRootProps<T>>;\n\n  /**\n   * Render override for the element representing the surface of the `List`.\n   * Use this to alter the structure of the rendered content if necessary on each update.\n   */\n  onRenderSurface?: IRenderFunction<IListOnRenderSurfaceProps<T>>;\n\n  /**\n   * For perf reasons, List avoids re-rendering unless certain props have changed.\n   * Use this prop if you need to force it to re-render in other cases. You can pass any type of\n   * value as long as it only changes (`===` comparison) when a re-render should happen.\n   */\n  version?: any;\n\n  /**\n   * Whether to disable scroll state updates. This causes the isScrolling arg in onRenderCell to always be undefined.\n   * This is a performance optimization to let List skip a render cycle by not updating its scrolling state.\n   */\n  ignoreScrollingState?: boolean;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPage<T = any> {\n  key: string;\n  items: T[] | undefined;\n  startIndex: number;\n  itemCount: number;\n  style: React.CSSProperties;\n  top: number;\n  height: number;\n  data?: any;\n  isSpacer?: boolean;\n  isVisible?: boolean;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPageProps<T = any>\n  extends React.HTMLAttributes<HTMLDivElement>,\n    React.ClassAttributes<HTMLDivElement> {\n  /**\n   * The role being assigned to the rendered page element by the list.\n   */\n  role?: string;\n  /**\n   * The allocation data for the page.\n   */\n  page: IPage<T>;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPageSpecification {\n  /**\n   * The number of items to allocate to the page.\n   */\n  itemCount?: number;\n  /**\n   * The estimated pixel height of the page.\n   */\n  height?: number;\n  /**\n   * Data to pass through to the page when rendering.\n   */\n  data?: any;\n  /**\n   * The key to use when creating the page.\n   */\n  key?: string;\n}\n"]}
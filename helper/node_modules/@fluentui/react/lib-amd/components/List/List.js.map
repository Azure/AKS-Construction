{"version":3,"file":"List.js","sourceRoot":"../src/","sources":["components/List/List.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Async,\n  EventGroup,\n  canUseDOM,\n  css,\n  divProperties,\n  findIndex,\n  findScrollableParent,\n  getNativeProps,\n  getParent,\n  getWindow,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { ScrollToMode } from './List.types';\nimport { composeRenderFunction } from '../../Utilities';\nimport { getScrollHeight, getScrollYPosition, setScrollYPosition } from './utils/scroll';\nimport type { IRectangle, IRenderFunction } from '../../Utilities';\nimport type {\n  IList,\n  IListProps,\n  IPage,\n  IPageProps,\n  IListOnRenderSurfaceProps,\n  IListOnRenderRootProps,\n} from './List.types';\n\nconst RESIZE_DELAY = 16;\nconst MIN_SCROLL_UPDATE_DELAY = 100;\nconst MAX_SCROLL_UPDATE_DELAY = 500;\nconst IDLE_DEBOUNCE_DELAY = 200;\n// The amount of time to wait before declaring that the list isn't scrolling\nconst DONE_SCROLLING_WAIT = 500;\nconst DEFAULT_ITEMS_PER_PAGE = 10;\nconst DEFAULT_PAGE_HEIGHT = 30;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst PAGE_KEY_PREFIX = 'page-';\nconst SPACER_KEY_PREFIX = 'spacer-';\n\nexport interface IListState<T = any> {\n  pages?: IPage<T>[];\n\n  /** The last versionstamp for  */\n  measureVersion?: number;\n  isScrolling?: boolean;\n  getDerivedStateFromProps(nextProps: IListProps<T>, previousState: IListState<T>): IListState<T>;\n\n  pagesVersion?: {};\n  hasMounted: boolean;\n}\n\ninterface IPageCacheItem<T> {\n  page: IPage<T>;\n  pageElement?: JSX.Element;\n}\n\ninterface IPageCache<T> {\n  [key: string]: IPageCacheItem<T>;\n}\n\nconst EMPTY_RECT = {\n  top: -1,\n  bottom: -1,\n  left: -1,\n  right: -1,\n  width: 0,\n  height: 0,\n};\n\n// Naming expensive measures so that they're named in profiles.\nconst _measurePageRect = (element: HTMLElement) => element.getBoundingClientRect();\nconst _measureSurfaceRect = _measurePageRect;\nconst _measureScrollRect = _measurePageRect;\n\n/**\n * The List renders virtualized pages of items. Each page's item count is determined by the getItemCountForPage callback\n * if provided by the caller, or 10 as default. Each page's height is determined by the getPageHeight callback if\n * provided by the caller, or by cached measurements if available, or by a running average, or a default fallback.\n *\n * The algorithm for rendering pages works like this:\n *\n * 1. Predict visible pages based on \"current measure data\" (page heights, surface position, visible window)\n * 2. If changes are necessary, apply changes (add/remove pages)\n * 3. For pages that are added, measure the page heights if we need to using getBoundingClientRect\n * 4. If measurements don't match predictions, update measure data and goto step 1 asynchronously\n *\n * Measuring too frequently can pull performance down significantly. To compensate, we cache measured values so that\n * we can avoid re-measuring during operations that should not alter heights, like scrolling.\n *\n * To optimize glass rendering performance, onShouldVirtualize can be set. When onShouldVirtualize return false,\n * List will run in fast mode (not virtualized) to render all items without any measurements to improve page load time.\n * And we start doing measurements and rendering in virtualized mode when items grows larger than this threshold.\n *\n * However, certain operations can make measure data stale. For example, resizing the list, or passing in new props,\n * or forcing an update change cause pages to shrink/grow. When these operations occur, we increment a measureVersion\n * number, which we associate with cached measurements and use to determine if a remeasure should occur.\n */\nexport class List<T = any> extends React.Component<IListProps<T>, IListState<T>> implements IList {\n  public static defaultProps = {\n    startIndex: 0,\n    onRenderCell: (item: any, index: number, containsFocus: boolean) => <>{(item && item.name) || ''}</>,\n    onRenderCellConditional: undefined,\n    renderedWindowsAhead: DEFAULT_RENDERED_WINDOWS_AHEAD,\n    renderedWindowsBehind: DEFAULT_RENDERED_WINDOWS_BEHIND,\n  };\n\n  private _root = React.createRef<HTMLDivElement>();\n  private _surface = React.createRef<HTMLDivElement>();\n  private _pageRefs: Record<string, unknown> = {};\n  private _async: Async;\n  private _events: EventGroup;\n  private _estimatedPageHeight: number;\n  private _totalEstimates: number;\n  private _cachedPageHeights: {\n    [key: string]: {\n      height: number;\n      measureVersion: number;\n    };\n  };\n  private _focusedIndex: number;\n  private _scrollElement?: HTMLElement;\n\n  // surface rect relative to window\n  private _surfaceRect: IRectangle | undefined;\n\n  // The visible rect that we're required to render given the current list state.\n  private _requiredRect: IRectangle | null;\n\n  // The visible rect that we're allowed to keep rendered. Pages outside of this rect will be removed.\n  private _allowedRect: IRectangle;\n\n  // The rect that is visible to the user\n  private _visibleRect: IRectangle | undefined;\n\n  // materialized rect around visible items, relative to surface\n  private _materializedRect: IRectangle | null;\n\n  private _requiredWindowsAhead: number;\n  private _requiredWindowsBehind: number;\n\n  private _measureVersion: number;\n  private _scrollHeight?: number;\n  private _scrollTop: number;\n  private _pageCache: IPageCache<T>;\n\n  public static getDerivedStateFromProps<U = any>(\n    nextProps: IListProps<U>,\n    previousState: IListState<U>,\n  ): IListState<U> {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  }\n\n  constructor(props: IListProps<T>) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      pages: [],\n      isScrolling: false,\n      getDerivedStateFromProps: this._getDerivedStateFromProps,\n      hasMounted: false,\n    };\n\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n    this._estimatedPageHeight = 0;\n    this._totalEstimates = 0;\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n\n    // Track the measure version for everything.\n    this._measureVersion = 0;\n\n    // Ensure that scrolls are lazy updated.\n    this._onAsyncScroll = this._async.debounce(this._onAsyncScroll, MIN_SCROLL_UPDATE_DELAY, {\n      leading: false,\n      maxWait: MAX_SCROLL_UPDATE_DELAY,\n    });\n\n    this._onAsyncIdle = this._async.debounce(this._onAsyncIdle, IDLE_DEBOUNCE_DELAY, {\n      leading: false,\n    });\n\n    this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {\n      leading: false,\n    });\n\n    this._onScrollingDone = this._async.debounce(this._onScrollingDone, DONE_SCROLLING_WAIT, {\n      leading: false,\n    });\n\n    this._cachedPageHeights = {};\n    this._estimatedPageHeight = 0;\n    this._focusedIndex = -1;\n    this._pageCache = {};\n  }\n\n  public get pageRefs(): Readonly<Record<string, unknown>> {\n    return this._pageRefs;\n  }\n\n  /**\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n   *\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n   *\n   * @param index - Index of item to scroll to\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional defines where in the window the item should be positioned to when scrolling\n   */\n  public scrollToIndex(\n    index: number,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode: ScrollToMode = ScrollToMode.auto,\n  ): void {\n    const startIndex = this.props.startIndex as number;\n    const renderCount = this._getRenderCount();\n    const endIndex = startIndex + renderCount;\n\n    const allowedRect = this._allowedRect;\n\n    let scrollTop = 0;\n\n    let itemsPerPage = 1;\n    for (let itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      const pageSpecification = this._getPageSpecification(this.props, itemIndex, allowedRect);\n\n      const pageHeight = pageSpecification.height;\n      itemsPerPage = pageSpecification.itemCount;\n\n      const requestedIndexIsInPage = itemIndex <= index && itemIndex + itemsPerPage > index;\n      if (requestedIndexIsInPage) {\n        // We have found the page. If the user provided a way to measure an individual item, we will try to scroll in\n        // just the given item, otherwise we'll only bring the page into view\n        if (measureItem && this._scrollElement) {\n          const scrollRect = _measureScrollRect(this._scrollElement);\n          const scrollPosition = getScrollYPosition(this._scrollElement);\n          const scrollWindow = {\n            top: scrollPosition,\n            bottom: scrollPosition + scrollRect.height,\n          };\n\n          // Adjust for actual item position within page\n          const itemPositionWithinPage = index - itemIndex;\n          for (let itemIndexInPage = 0; itemIndexInPage < itemPositionWithinPage; ++itemIndexInPage) {\n            scrollTop += measureItem(itemIndex + itemIndexInPage);\n          }\n          const scrollBottom = scrollTop + measureItem(index);\n\n          // If scrollToMode is set to something other than auto, we always want to\n          // scroll the item into a specific position on the page.\n          switch (scrollToMode) {\n            case ScrollToMode.top:\n              setScrollYPosition(this._scrollElement, scrollTop);\n              return;\n            case ScrollToMode.bottom:\n              setScrollYPosition(this._scrollElement, scrollBottom - scrollRect.height);\n              return;\n            case ScrollToMode.center:\n              setScrollYPosition(this._scrollElement, (scrollTop + scrollBottom - scrollRect.height) / 2);\n              return;\n            case ScrollToMode.auto:\n            default:\n              break;\n          }\n\n          const itemIsFullyVisible = scrollTop >= scrollWindow.top && scrollBottom <= scrollWindow.bottom;\n          if (itemIsFullyVisible) {\n            // Item is already visible, do nothing.\n            return;\n          }\n\n          const itemIsPartiallyAbove = scrollTop < scrollWindow.top;\n          const itemIsPartiallyBelow = scrollBottom > scrollWindow.bottom;\n\n          if (itemIsPartiallyAbove) {\n            //  We will just scroll to 'scrollTop'\n            //  .------.   - scrollTop\n            //  |Item  |\n            //  | .----|-. - scrollWindow.top\n            //  '------' |\n            //    |      |\n            //    '------'\n          } else if (itemIsPartiallyBelow) {\n            //  Adjust scrollTop position to just bring in the element\n            // .------.  - scrollTop\n            // |      |\n            // | .------.\n            // '-|----' | - scrollWindow.bottom\n            //   | Item |\n            //   '------' - scrollBottom\n            scrollTop = scrollBottom - scrollRect.height;\n          }\n        }\n\n        if (this._scrollElement) {\n          setScrollYPosition(this._scrollElement, scrollTop);\n        }\n        return;\n      }\n\n      scrollTop += pageHeight;\n    }\n  }\n\n  public getStartItemIndexInView(measureItem?: (itemIndex: number) => number): number {\n    const pages = this.state.pages || [];\n    for (const page of pages) {\n      const isPageVisible =\n        !page.isSpacer && (this._scrollTop || 0) >= page.top && (this._scrollTop || 0) <= page.top + page.height;\n      if (isPageVisible) {\n        if (!measureItem) {\n          const rowHeight = Math.floor(page.height / page.itemCount);\n          return page.startIndex + Math.floor((this._scrollTop - page.top) / rowHeight);\n        } else {\n          let totalRowHeight = 0;\n          for (let itemIndex = page.startIndex; itemIndex < page.startIndex + page.itemCount; itemIndex++) {\n            const rowHeight = measureItem(itemIndex);\n            if (\n              page.top + totalRowHeight <= this._scrollTop &&\n              this._scrollTop < page.top + totalRowHeight + rowHeight\n            ) {\n              return itemIndex;\n            } else {\n              totalRowHeight += rowHeight;\n            }\n          }\n        }\n      }\n    }\n    return 0;\n  }\n\n  public componentDidMount(): void {\n    this.setState({ hasMounted: true });\n    this._scrollElement = findScrollableParent(this._root.current) as HTMLElement;\n    this._scrollTop = 0;\n\n    if (!this.props.getPageHeight) {\n      const heightsChanged = this._updatePageMeasurements(this.state.pages!);\n      if (heightsChanged) {\n        this._materializedRect = null;\n        this.setState(this._updatePages(this.props, this.state));\n      }\n    }\n\n    this._measureVersion++;\n\n    this._events.on(window, 'resize', this._onAsyncResize);\n    if (this._root.current) {\n      this._events.on(this._root.current, 'focus', this._onFocus, true);\n    }\n    if (this._scrollElement) {\n      this._events.on(this._scrollElement, 'scroll', this._onScroll);\n      this._events.on(this._scrollElement, 'scroll', this._onAsyncScroll);\n    }\n  }\n\n  public componentDidUpdate(previousProps: IListProps, previousState: IListState<T>): void {\n    // Multiple updates may have been queued, so the callback will reflect all of them.\n    // Re-fetch the current props and states to avoid using a stale props or state captured in the closure.\n    const finalProps = this.props;\n    const finalState = this.state;\n\n    if (this.state.pagesVersion !== previousState.pagesVersion) {\n      // If we weren't provided with the page height, measure the pages\n      if (!finalProps.getPageHeight) {\n        // If measured version is invalid since we've updated the DOM\n        const heightsChanged = this._updatePageMeasurements(finalState.pages!);\n\n        if (heightsChanged) {\n          this._materializedRect = null;\n          this._onAsyncScroll();\n        } else {\n          // Enqueue an idle bump.\n          this._onAsyncIdle();\n        }\n      } else {\n        // Enqueue an idle bump\n        this._onAsyncIdle();\n      }\n\n      // Notify the caller that rendering the new pages has completed\n      if (finalProps.onPagesUpdated) {\n        finalProps.onPagesUpdated(finalState.pages as IPage<T>[]);\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n\n    delete this._scrollElement;\n  }\n\n  public shouldComponentUpdate(newProps: IListProps<T>, newState: IListState<T>): boolean {\n    const { pages: oldPages } = this.state;\n    const { pages: newPages } = newState;\n    let shouldComponentUpdate = false;\n\n    // Update if the page stops scrolling\n    if (!newState.isScrolling && this.state.isScrolling) {\n      return true;\n    }\n\n    if (newProps.version !== this.props.version) {\n      return true;\n    }\n\n    if (newProps.className !== this.props.className) {\n      return true;\n    }\n\n    if (newProps.items === this.props.items && oldPages!.length === newPages!.length) {\n      for (let i = 0; i < oldPages!.length; i++) {\n        const oldPage = oldPages![i];\n        const newPage = newPages![i];\n\n        if (oldPage.key !== newPage.key || oldPage.itemCount !== newPage.itemCount) {\n          shouldComponentUpdate = true;\n          break;\n        }\n      }\n    } else {\n      shouldComponentUpdate = true;\n    }\n\n    return shouldComponentUpdate;\n  }\n\n  public forceUpdate(): void {\n    this._invalidatePageCache();\n    // Ensure that when the list is force updated we update the pages first before render.\n    this._updateRenderRects(this.props, this.state, true);\n    this.setState(this._updatePages(this.props, this.state));\n    this._measureVersion++;\n\n    super.forceUpdate();\n  }\n\n  /**\n   * Get the current height the list and it's pages.\n   */\n  public getTotalListHeight(): number {\n    return this._surfaceRect!.height;\n  }\n\n  public render(): JSX.Element | null {\n    const { className, role = 'list', onRenderSurface, onRenderRoot } = this.props;\n    const { pages = [] } = this.state;\n    const pageElements: JSX.Element[] = [];\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n\n    for (const page of pages) {\n      pageElements.push(this._renderPage(page));\n    }\n\n    const finalOnRenderSurface = onRenderSurface\n      ? composeRenderFunction(onRenderSurface, this._onRenderSurface)\n      : this._onRenderSurface;\n\n    const finalOnRenderRoot = onRenderRoot\n      ? composeRenderFunction(onRenderRoot, this._onRenderRoot)\n      : this._onRenderRoot;\n\n    return finalOnRenderRoot({\n      rootRef: this._root,\n      pages,\n      surfaceElement: finalOnRenderSurface({\n        surfaceRef: this._surface,\n        pages,\n        pageElements,\n        divProps: {\n          role: 'presentation',\n          className: 'ms-List-surface',\n        },\n      }),\n      divProps: {\n        ...divProps,\n        className: css('ms-List', className),\n        role: pageElements.length > 0 ? role : undefined,\n        'aria-label': pageElements.length > 0 ? divProps['aria-label'] : undefined,\n      },\n    });\n  }\n\n  private _getDerivedStateFromProps = (nextProps: IListProps<T>, previousState: IListState<T>): IListState<T> => {\n    if (\n      nextProps.items !== this.props.items ||\n      nextProps.renderCount !== this.props.renderCount ||\n      nextProps.startIndex !== this.props.startIndex ||\n      nextProps.version !== this.props.version ||\n      !previousState.hasMounted\n    ) {\n      if (!canUseDOM()) {\n        return previousState;\n      }\n      // We have received new items so we want to make sure that initially we only render a single window to\n      // fill the currently visible rect, and then later render additional windows.\n      this._resetRequiredWindows();\n      this._requiredRect = null;\n\n      this._measureVersion++;\n      this._invalidatePageCache();\n\n      return this._updatePages(nextProps, previousState);\n    }\n\n    return previousState;\n  };\n\n  private _shouldVirtualize(props: IListProps<T> = this.props): boolean {\n    const { onShouldVirtualize } = props;\n    return !onShouldVirtualize || onShouldVirtualize(props);\n  }\n\n  /**\n   * when props.items change or forceUpdate called, throw away cached pages\n   */\n  private _invalidatePageCache(): void {\n    this._pageCache = {};\n  }\n\n  private _renderPage(page: IPage<T>): JSX.Element {\n    const { usePageCache } = this.props;\n    let cachedPage;\n    // if usePageCache is set and cached page element can be found, just return cached page\n    if (usePageCache) {\n      cachedPage = this._pageCache[page.key];\n      if (cachedPage && cachedPage.pageElement) {\n        return cachedPage.pageElement;\n      }\n    }\n\n    const pageStyle = this._getPageStyle(page);\n\n    const { onRenderPage = this._onRenderPage } = this.props;\n\n    const pageElement = onRenderPage(\n      {\n        page,\n        className: 'ms-List-page',\n        key: page.key,\n        ref: (newRef: unknown) => {\n          this._pageRefs[page.key] = newRef;\n        },\n        style: pageStyle,\n        role: 'presentation',\n      },\n      this._onRenderPage,\n    );\n\n    // cache the first page for now since it is re-rendered a lot times unnecessarily.\n    // todo: a more aggresive caching mechanism is to cache pages constaining the items not changed.\n    // now we re-render pages too frequently, for example, props.items increased from 30 to 60, although the\n    // first 30 items did not change, we still re-rendered all of them in this props.items change.\n    if (usePageCache && page.startIndex === 0) {\n      this._pageCache[page.key] = {\n        page,\n        pageElement,\n      };\n    }\n    return pageElement;\n  }\n\n  private _onRenderRoot = (props: IListOnRenderRootProps<T>): JSX.Element => {\n    const { rootRef, surfaceElement, divProps } = props;\n\n    return (\n      <div ref={rootRef} {...divProps}>\n        {surfaceElement}\n      </div>\n    );\n  };\n\n  private _onRenderSurface = (props: IListOnRenderSurfaceProps<T>): JSX.Element => {\n    const { surfaceRef, pageElements, divProps } = props;\n\n    return (\n      <div ref={surfaceRef} {...divProps}>\n        {pageElements}\n      </div>\n    );\n  };\n\n  /** Generate the style object for the page. */\n  private _getPageStyle(page: IPage<T>): React.StyleHTMLAttributes<HTMLDivElement> {\n    const { getPageStyle } = this.props;\n\n    return {\n      ...(getPageStyle ? getPageStyle(page) : {}),\n      ...(!page.items\n        ? {\n            height: page.height,\n          }\n        : {}),\n    };\n  }\n\n  private _onRenderPage = (pageProps: IPageProps<T>, defaultRender?: IRenderFunction<IPageProps<T>>): any => {\n    const { onRenderCell, onRenderCellConditional, role } = this.props;\n\n    const {\n      page: { items = [], startIndex },\n      ...divProps\n    } = pageProps;\n\n    // only assign list item role if no role is assigned\n    const cellRole = role === undefined ? 'listitem' : 'presentation';\n    const cells: React.ReactNode[] = [];\n\n    for (let i = 0; i < items.length; i++) {\n      const index = startIndex + i;\n      const item = items[i];\n\n      let itemKey = this.props.getKey ? this.props.getKey(item, index) : item && (item as any).key;\n\n      if (itemKey === null || itemKey === undefined) {\n        itemKey = index;\n      }\n\n      const renderCell = onRenderCellConditional ?? onRenderCell;\n\n      const cell =\n        renderCell?.(item, index, !this.props.ignoreScrollingState ? this.state.isScrolling : undefined) ?? null;\n\n      if (!onRenderCellConditional || cell) {\n        cells.push(\n          <div\n            role={cellRole}\n            className={'ms-List-cell'}\n            key={itemKey}\n            data-list-index={index}\n            data-automationid=\"ListCell\"\n          >\n            {cell}\n          </div>,\n        );\n      }\n    }\n\n    return <div {...divProps}>{cells}</div>;\n  };\n\n  /** Track the last item index focused so that we ensure we keep it rendered. */\n  private _onFocus(ev: any): void {\n    let target = ev.target as HTMLElement;\n\n    while (target !== this._surface.current) {\n      const indexString = target.getAttribute('data-list-index');\n\n      if (indexString) {\n        this._focusedIndex = Number(indexString);\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  }\n\n  /**\n   * Called synchronously to reset the required render range to 0 on scrolling. After async scroll has executed,\n   * we will call onAsyncIdle which will reset it back to it's correct value.\n   */\n  private _onScroll(): void {\n    if (!this.state.isScrolling && !this.props.ignoreScrollingState) {\n      this.setState({ isScrolling: true });\n    }\n    this._resetRequiredWindows();\n    this._onScrollingDone();\n  }\n\n  private _resetRequiredWindows(): void {\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n  }\n\n  /**\n   * Debounced method to asynchronously update the visible region on a scroll event.\n   */\n  private _onAsyncScroll(): void {\n    this._updateRenderRects(this.props, this.state);\n\n    // Only update pages when the visible rect falls outside of the materialized rect.\n    if (!this._materializedRect || !_isContainedWithin(this._requiredRect as IRectangle, this._materializedRect)) {\n      this.setState(this._updatePages(this.props, this.state));\n    } else {\n      // console.log('requiredRect contained in materialized', this._requiredRect, this._materializedRect);\n    }\n  }\n\n  /**\n   * This is an async debounced method that will try and increment the windows we render. If we can increment\n   * either, we increase the amount we render and re-evaluate.\n   */\n  private _onAsyncIdle(): void {\n    const { renderedWindowsAhead, renderedWindowsBehind } = this.props;\n    const { _requiredWindowsAhead: requiredWindowsAhead, _requiredWindowsBehind: requiredWindowsBehind } = this;\n    const windowsAhead = Math.min(renderedWindowsAhead as number, requiredWindowsAhead + 1);\n    const windowsBehind = Math.min(renderedWindowsBehind as number, requiredWindowsBehind + 1);\n\n    if (windowsAhead !== requiredWindowsAhead || windowsBehind !== requiredWindowsBehind) {\n      // console.log('idling', windowsBehind, windowsAhead);\n\n      this._requiredWindowsAhead = windowsAhead;\n      this._requiredWindowsBehind = windowsBehind;\n      this._updateRenderRects(this.props, this.state);\n      this.setState(this._updatePages(this.props, this.state));\n    }\n\n    if (renderedWindowsAhead! > windowsAhead || renderedWindowsBehind! > windowsBehind) {\n      // Async increment on next tick.\n      this._onAsyncIdle();\n    }\n  }\n\n  /**\n   * Function to call when the list is done scrolling.\n   * This function is debounced.\n   */\n  private _onScrollingDone(): void {\n    if (!this.props.ignoreScrollingState) {\n      this.setState({ isScrolling: false });\n    }\n  }\n\n  private _onAsyncResize(): void {\n    this.forceUpdate();\n  }\n\n  private _updatePages(nextProps: IListProps<T>, previousState: IListState<T>): IListState<T> {\n    // console.log('updating pages');\n\n    if (!this._requiredRect) {\n      this._updateRenderRects(nextProps, previousState);\n    }\n\n    const newListState = this._buildPages(nextProps, previousState);\n    const oldListPages = previousState.pages!;\n\n    this._notifyPageChanges(oldListPages, newListState.pages!, this.props);\n\n    return {\n      ...previousState,\n      ...newListState,\n      pagesVersion: {},\n    };\n  }\n\n  /**\n   * Notify consumers that the rendered pages have changed\n   * @param oldPages - The old pages\n   * @param newPages - The new pages\n   * @param props - The props to use\n   */\n  private _notifyPageChanges(oldPages: IPage<T>[], newPages: IPage<T>[], props: IListProps<T>): void {\n    const { onPageAdded, onPageRemoved } = props;\n\n    if (onPageAdded || onPageRemoved) {\n      const renderedIndexes: {\n        [index: number]: IPage<T>;\n      } = {};\n\n      for (const page of oldPages) {\n        if (page.items) {\n          renderedIndexes[page.startIndex] = page;\n        }\n      }\n\n      for (const page of newPages) {\n        if (page.items) {\n          if (!renderedIndexes[page.startIndex]) {\n            this._onPageAdded(page);\n          } else {\n            delete renderedIndexes[page.startIndex];\n          }\n        }\n      }\n\n      for (const index in renderedIndexes) {\n        if (renderedIndexes.hasOwnProperty(index)) {\n          this._onPageRemoved(renderedIndexes[index]);\n        }\n      }\n    }\n  }\n\n  private _updatePageMeasurements(pages: IPage<T>[]): boolean {\n    let heightChanged = false;\n\n    // when not in virtualize mode, we render all the items without page measurement\n    if (!this._shouldVirtualize()) {\n      return heightChanged;\n    }\n\n    for (let i = 0; i < pages.length; i++) {\n      const page = pages[i];\n\n      if (page.items) {\n        heightChanged = this._measurePage(page) || heightChanged;\n      }\n    }\n\n    return heightChanged;\n  }\n\n  /**\n   * Given a page, measure its dimensions, update cache.\n   * @returns True if the height has changed.\n   */\n  private _measurePage(page: IPage<T>): boolean {\n    let hasChangedHeight = false;\n    const pageElement = this._pageRefs[page.key] as HTMLElement;\n    const cachedHeight = this._cachedPageHeights[page.startIndex];\n\n    // console.log('   * measure attempt', page.startIndex, cachedHeight);\n\n    if (\n      pageElement &&\n      this._shouldVirtualize() &&\n      (!cachedHeight || cachedHeight.measureVersion !== this._measureVersion)\n    ) {\n      const newClientRect = {\n        width: pageElement.clientWidth,\n        height: pageElement.clientHeight,\n      };\n\n      if (newClientRect.height || newClientRect.width) {\n        hasChangedHeight = page.height !== newClientRect.height;\n\n        // console.warn(' *** expensive page measure', page.startIndex, page.height, newClientRect.height);\n\n        page.height = newClientRect.height;\n\n        this._cachedPageHeights[page.startIndex] = {\n          height: newClientRect.height,\n          measureVersion: this._measureVersion,\n        };\n\n        this._estimatedPageHeight = Math.round(\n          (this._estimatedPageHeight * this._totalEstimates + newClientRect.height) / (this._totalEstimates + 1),\n        );\n\n        this._totalEstimates++;\n      }\n    }\n\n    return hasChangedHeight;\n  }\n\n  /** Called when a page has been added to the DOM. */\n  private _onPageAdded(page: IPage<T>): void {\n    const { onPageAdded } = this.props;\n\n    // console.log('page added', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageAdded) {\n      onPageAdded(page);\n    }\n  }\n\n  /** Called when a page has been removed from the DOM. */\n  private _onPageRemoved(page: IPage<T>): void {\n    const { onPageRemoved } = this.props;\n\n    // console.log('  --- page removed', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageRemoved) {\n      onPageRemoved(page);\n    }\n  }\n\n  /** Build up the pages that should be rendered. */\n  private _buildPages(props: IListProps<T>, state: IListState<T>): IListState<T> {\n    let { renderCount } = props;\n    const { items, startIndex, getPageHeight } = props;\n\n    renderCount = this._getRenderCount(props);\n\n    const materializedRect = { ...EMPTY_RECT };\n    const pages: IPage<T>[] = [];\n\n    let itemsPerPage = 1;\n    let pageTop = 0;\n    let currentSpacer = null;\n    const focusedIndex = this._focusedIndex;\n    const endIndex = startIndex! + renderCount;\n    const shouldVirtualize = this._shouldVirtualize(props);\n\n    // First render is very important to track; when we render cells, we have no idea of estimated page height.\n    // So we should default to rendering only the first page so that we can get information.\n    // However if the user provides a measure function, let's just assume they know the right heights.\n    const isFirstRender = this._estimatedPageHeight === 0 && !getPageHeight;\n\n    const allowedRect = this._allowedRect;\n\n    for (let itemIndex = startIndex!; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      const pageSpecification = this._getPageSpecification(props, itemIndex, allowedRect);\n      const pageHeight = pageSpecification.height;\n      const pageData = pageSpecification.data;\n      const key = pageSpecification.key;\n\n      itemsPerPage = pageSpecification.itemCount;\n\n      const pageBottom = pageTop + pageHeight - 1;\n\n      const isPageRendered =\n        findIndex(state.pages as IPage<T>[], (page: IPage<T>) => !!page.items && page.startIndex === itemIndex) > -1;\n      const isPageInAllowedRange = !allowedRect || (pageBottom >= allowedRect.top && pageTop <= allowedRect.bottom!);\n      const isPageInRequiredRange =\n        !this._requiredRect || (pageBottom >= this._requiredRect.top && pageTop <= this._requiredRect.bottom!);\n      const isPageVisible =\n        (!isFirstRender && (isPageInRequiredRange || (isPageInAllowedRange && isPageRendered))) || !shouldVirtualize;\n      const isPageFocused = focusedIndex >= itemIndex && focusedIndex < itemIndex + itemsPerPage;\n      const isFirstPage = itemIndex === startIndex;\n\n      // console.log('building page', itemIndex, 'pageTop: ' + pageTop, 'inAllowed: ' +\n      // isPageInAllowedRange, 'inRequired: ' + isPageInRequiredRange);\n\n      // Only render whats visible, focused, or first page,\n      // or when running in fast rendering mode (not in virtualized mode), we render all current items in pages\n      if (isPageVisible || isPageFocused || isFirstPage) {\n        if (currentSpacer) {\n          pages.push(currentSpacer);\n          currentSpacer = null;\n        }\n\n        const itemsInPage = Math.min(itemsPerPage, endIndex - itemIndex);\n        const newPage = this._createPage(\n          key,\n          items!.slice(itemIndex, itemIndex + itemsInPage),\n          itemIndex,\n          undefined,\n          undefined,\n          pageData,\n        );\n\n        newPage.top = pageTop;\n        newPage.height = pageHeight;\n        if (this._visibleRect && this._visibleRect.bottom) {\n          newPage.isVisible = pageBottom >= this._visibleRect.top && pageTop <= this._visibleRect.bottom;\n        }\n\n        pages.push(newPage);\n\n        if (isPageInRequiredRange && this._allowedRect) {\n          _mergeRect(materializedRect, {\n            top: pageTop,\n            bottom: pageBottom,\n            height: pageHeight,\n            left: allowedRect.left,\n            right: allowedRect.right,\n            width: allowedRect.width,\n          });\n        }\n      } else {\n        if (!currentSpacer) {\n          currentSpacer = this._createPage(\n            SPACER_KEY_PREFIX + itemIndex,\n            undefined,\n            itemIndex,\n            0,\n            undefined,\n            pageData,\n            true /*isSpacer*/,\n          );\n        }\n        currentSpacer.height = (currentSpacer.height || 0) + (pageBottom - pageTop) + 1;\n        currentSpacer.itemCount += itemsPerPage;\n      }\n      pageTop += pageBottom - pageTop + 1;\n\n      // in virtualized mode, we render need to render first page then break and measure,\n      // otherwise, we render all items without measurement to make rendering fast\n      if (isFirstRender && shouldVirtualize) {\n        break;\n      }\n    }\n\n    if (currentSpacer) {\n      currentSpacer.key = SPACER_KEY_PREFIX + 'end';\n      pages.push(currentSpacer);\n    }\n\n    this._materializedRect = materializedRect;\n\n    // console.log('materialized: ', materializedRect);\n    return {\n      ...state,\n      pages,\n      measureVersion: this._measureVersion,\n    };\n  }\n\n  private _getPageSpecification(\n    props: IListProps,\n    itemIndex: number,\n    visibleRect: IRectangle,\n  ): {\n    // These return values are now no longer optional.\n    itemCount: number;\n    height: number;\n    data?: any;\n    key?: string;\n  } {\n    const { getPageSpecification } = props;\n\n    if (getPageSpecification) {\n      const pageData = getPageSpecification(itemIndex, visibleRect);\n\n      const { itemCount = this._getItemCountForPage(itemIndex, visibleRect) } = pageData;\n\n      const { height = this._getPageHeight(itemIndex, visibleRect, itemCount) } = pageData;\n\n      return {\n        itemCount,\n        height,\n        data: pageData.data,\n        key: pageData.key,\n      };\n    } else {\n      const itemCount = this._getItemCountForPage(itemIndex, visibleRect);\n\n      return {\n        itemCount,\n        height: this._getPageHeight(itemIndex, visibleRect, itemCount),\n      };\n    }\n  }\n\n  /**\n   * Get the pixel height of a give page. Will use the props getPageHeight first, and if not provided, fallback to\n   * cached height, or estimated page height, or default page height.\n   */\n  private _getPageHeight(itemIndex: number, visibleRect: IRectangle, itemsPerPage: number): number {\n    if (this.props.getPageHeight) {\n      return this.props.getPageHeight(itemIndex, visibleRect, itemsPerPage);\n    } else {\n      const cachedHeight = this._cachedPageHeights[itemIndex];\n\n      return cachedHeight ? cachedHeight.height : this._estimatedPageHeight || DEFAULT_PAGE_HEIGHT;\n    }\n  }\n\n  private _getItemCountForPage(itemIndex: number, visibileRect: IRectangle): number {\n    const itemsPerPage = this.props.getItemCountForPage\n      ? this.props.getItemCountForPage(itemIndex, visibileRect)\n      : DEFAULT_ITEMS_PER_PAGE;\n\n    return itemsPerPage ? itemsPerPage : DEFAULT_ITEMS_PER_PAGE;\n  }\n\n  private _createPage(\n    pageKey: string | undefined,\n    items: any[] | undefined,\n    startIndex: number = -1,\n    count: number = items ? items.length : 0,\n    style: React.CSSProperties = {},\n    data?: any,\n    isSpacer?: boolean,\n  ): IPage<T> {\n    pageKey = pageKey || PAGE_KEY_PREFIX + startIndex;\n    const cachedPage = this._pageCache[pageKey];\n    if (cachedPage && cachedPage.page) {\n      return cachedPage.page;\n    }\n\n    return {\n      key: pageKey,\n      startIndex,\n      itemCount: count,\n      items,\n      style,\n      top: 0,\n      height: 0,\n      data,\n      isSpacer: isSpacer || false,\n    };\n  }\n\n  private _getRenderCount(props?: IListProps<T>): number {\n    const { items, startIndex, renderCount } = props || this.props;\n\n    return renderCount === undefined ? (items ? items.length - startIndex! : 0) : renderCount;\n  }\n\n  /** Calculate the visible rect within the list where top: 0 and left: 0 is the top/left of the list. */\n  private _updateRenderRects(props: IListProps<T>, state: IListState<T>, forceUpdate?: boolean): void {\n    const { renderedWindowsAhead, renderedWindowsBehind } = props;\n    const { pages } = state;\n    // when not in virtualize mode, we render all items without measurement to optimize page rendering perf\n    if (!this._shouldVirtualize(props)) {\n      return;\n    }\n\n    let surfaceRect = this._surfaceRect || { ...EMPTY_RECT };\n    const scrollHeight = getScrollHeight(this._scrollElement);\n    const scrollTop = getScrollYPosition(this._scrollElement);\n\n    // WARNING: EXPENSIVE CALL! We need to know the surface top relative to the window.\n    // This needs to be called to recalculate when new pages should be loaded.\n    // We check to see how far we've scrolled and if it's further than a third of a page we run it again.\n    if (\n      this._surface.current &&\n      (forceUpdate ||\n        !pages ||\n        !this._surfaceRect ||\n        !scrollHeight ||\n        scrollHeight !== this._scrollHeight ||\n        Math.abs(this._scrollTop - scrollTop) > this._estimatedPageHeight / 3)\n    ) {\n      surfaceRect = this._surfaceRect = _measureSurfaceRect(this._surface.current);\n      this._scrollTop = scrollTop;\n    }\n\n    // If the scroll height has changed, something in the container likely resized and\n    // we should redo the page heights incase their content resized.\n    if (forceUpdate || !scrollHeight || scrollHeight !== this._scrollHeight) {\n      this._measureVersion++;\n    }\n\n    this._scrollHeight = scrollHeight || 0;\n\n    // If the surface is above the container top or below the container bottom, or if this is not the first\n    // render return empty rect.\n    // The first time the list gets rendered we need to calculate the rectangle. The width of the list is\n    // used to calculate the width of the list items.\n    const visibleTop = Math.max(0, -surfaceRect.top);\n    const win = getWindow(this._root.current);\n    const visibleRect = {\n      top: visibleTop,\n      left: surfaceRect.left,\n      bottom: visibleTop + win!.innerHeight,\n      right: surfaceRect.right,\n      width: surfaceRect.width,\n      height: win!.innerHeight,\n    };\n\n    // The required/allowed rects are adjusted versions of the visible rect.\n    this._requiredRect = _expandRect(visibleRect, this._requiredWindowsBehind, this._requiredWindowsAhead);\n    this._allowedRect = _expandRect(visibleRect, renderedWindowsBehind!, renderedWindowsAhead!);\n\n    // store the visible rect for later use.\n    this._visibleRect = visibleRect;\n  }\n}\n\nfunction _expandRect(rect: IRectangle, pagesBefore: number, pagesAfter: number): IRectangle {\n  const top = rect.top - pagesBefore * rect.height;\n  const height = rect.height + (pagesBefore + pagesAfter) * rect.height;\n\n  return {\n    top,\n    bottom: top + height,\n    height,\n    left: rect.left,\n    right: rect.right,\n    width: rect.width,\n  };\n}\n\nfunction _isContainedWithin(innerRect: IRectangle, outerRect: IRectangle): boolean {\n  return (\n    innerRect.top >= outerRect.top &&\n    innerRect.left >= outerRect.left &&\n    innerRect.bottom! <= outerRect.bottom! &&\n    innerRect.right! <= outerRect.right!\n  );\n}\n\nfunction _mergeRect(targetRect: IRectangle, newRect: IRectangle): IRectangle {\n  targetRect.top = newRect.top < targetRect.top || targetRect.top === -1 ? newRect.top : targetRect.top;\n  targetRect.left = newRect.left < targetRect.left || targetRect.left === -1 ? newRect.left : targetRect.left;\n  targetRect.bottom =\n    newRect.bottom! > targetRect.bottom! || targetRect.bottom === -1 ? newRect.bottom : targetRect.bottom;\n  targetRect.right = newRect.right! > targetRect.right! || targetRect.right === -1 ? newRect.right : targetRect.right;\n  targetRect.width = targetRect.right! - targetRect.left + 1;\n  targetRect.height = targetRect.bottom! - targetRect.top + 1;\n\n  return targetRect;\n}\n"]}
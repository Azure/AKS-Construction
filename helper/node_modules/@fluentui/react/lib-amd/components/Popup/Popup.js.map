{"version":3,"file":"Popup.js","sourceRoot":"../src/","sources":["components/Popup/Popup.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  KeyCodes,\n  divProperties,\n  doesElementContainFocus,\n  getDocument,\n  getNativeProps,\n  getPropsWithDefaults,\n  getWindow,\n  modalize,\n} from '../../Utilities';\nimport { useMergedRefs, useAsync, useOnEvent } from '@fluentui/react-hooks';\nimport { useWindow } from '@fluentui/react-window-provider';\nimport type { IPopupProps, IPopupRestoreFocusParams } from './Popup.types';\n\nfunction useScrollbarAsync(props: IPopupProps, root: React.RefObject<HTMLDivElement | undefined>) {\n  const async = useAsync();\n  const [needsVerticalScrollBarState, setNeedsVerticalScrollBar] = React.useState(false);\n  React.useEffect(() => {\n    async.requestAnimationFrame(() => {\n      // If overflowY is overridden, don't waste time calculating whether the scrollbar is necessary.\n      if (props.style && props.style.overflowY) {\n        return;\n      }\n\n      let needsVerticalScrollBar = false;\n      if (root && root.current && root.current?.firstElementChild) {\n        // ClientHeight returns the client height of an element rounded to an\n        // integer. On some browsers at different zoom levels this rounding\n        // can generate different results for the root container and child even\n        // though they are the same height. This causes us to show a scroll bar\n        // when not needed. Ideally we would use BoundingClientRect().height\n        // instead however seems that the API is 90% slower than using ClientHeight.\n        // Therefore instead we will calculate the difference between heights and\n        // allow for a 1px difference to still be considered ok and not show the\n        // scroll bar.\n        const rootHeight = root.current.clientHeight;\n        const firstChildHeight = root.current.firstElementChild.clientHeight;\n        if (rootHeight > 0 && firstChildHeight > rootHeight) {\n          needsVerticalScrollBar = firstChildHeight - rootHeight > 1;\n        }\n      }\n      if (needsVerticalScrollBarState !== needsVerticalScrollBar) {\n        setNeedsVerticalScrollBar(needsVerticalScrollBar);\n      }\n    });\n\n    return () => async.dispose();\n  });\n\n  return needsVerticalScrollBarState;\n}\n\nfunction defaultFocusRestorer(options: IPopupRestoreFocusParams) {\n  const { originalElement, containsFocus } = options;\n\n  if (originalElement && containsFocus && originalElement !== getWindow()) {\n    // Make sure that the focus method actually exists\n    // In some cases the object might exist but not be a real element.\n    // This is primarily for IE 11 and should be removed once IE 11 is no longer in use.\n    // This is wrapped in a setTimeout because of a React 16 bug that is resolved in 17.\n    // Once we move to 17, the setTimeout should be removed (ref: https://github.com/facebook/react/issues/17894#issuecomment-656094405)\n    setTimeout(() => {\n      originalElement.focus?.();\n    }, 0);\n  }\n}\n\nfunction useRestoreFocus(props: IPopupProps, root: React.RefObject<HTMLDivElement | undefined>) {\n  const { onRestoreFocus = defaultFocusRestorer } = props;\n  const originalFocusedElement = React.useRef<HTMLElement>();\n  const containsFocus = React.useRef(false);\n\n  React.useEffect(() => {\n    originalFocusedElement.current = getDocument()!.activeElement as HTMLElement;\n\n    if (doesElementContainFocus(root.current!)) {\n      containsFocus.current = true;\n    }\n\n    return () => {\n      onRestoreFocus?.({\n        originalElement: originalFocusedElement.current,\n        containsFocus: containsFocus.current,\n        documentContainsFocus: getDocument()?.hasFocus() || false,\n      });\n\n      // De-reference DOM Node to avoid retainment via transpiled closure of _onKeyDown\n      originalFocusedElement.current = undefined;\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n  }, []);\n\n  useOnEvent(\n    root,\n    'focus',\n    React.useCallback((): void => {\n      containsFocus.current = true;\n    }, []),\n    true,\n  );\n\n  useOnEvent(\n    root,\n    'blur',\n    React.useCallback((ev: FocusEvent): void => {\n      /** The popup should update this._containsFocus when:\n       * relatedTarget exists AND\n       * the relatedTarget is not contained within the popup.\n       * If the relatedTarget is within the popup, that means the popup still has focus\n       * and focused moved from one element to another within the popup.\n       * If relatedTarget is undefined or null that usually means that a\n       * keyboard event occurred and focus didn't change\n       */\n      if (root.current && ev.relatedTarget && !root.current.contains(ev.relatedTarget as HTMLElement)) {\n        containsFocus.current = false;\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n    }, []),\n    true,\n  );\n}\n\nfunction useHideSiblingNodes(props: IPopupProps, root: React.RefObject<HTMLDivElement | undefined>) {\n  // eslint-disable-next-line deprecation/deprecation\n  const shouldHideSiblings = String(props['aria-modal']).toLowerCase() === 'true' && props.enableAriaHiddenSiblings;\n\n  React.useEffect(() => {\n    if (!(shouldHideSiblings && root.current)) {\n      return;\n    }\n\n    const unmodalize = modalize(root.current);\n    return unmodalize;\n  }, [root, shouldHideSiblings]);\n}\n\n/**\n * This adds accessibility to Dialog and Panel controls\n */\nexport const Popup: React.FunctionComponent<IPopupProps> = React.forwardRef<HTMLDivElement, IPopupProps>(\n  (propsWithoutDefaults, forwardedRef) => {\n    const props = getPropsWithDefaults(\n      { shouldRestoreFocus: true, enableAriaHiddenSiblings: true },\n      propsWithoutDefaults,\n    );\n\n    const root = React.useRef<HTMLDivElement>();\n    const mergedRootRef = useMergedRefs(root, forwardedRef) as React.Ref<HTMLDivElement>;\n\n    useHideSiblingNodes(props, root);\n    useRestoreFocus(props, root);\n\n    const { role, className, ariaLabel, ariaLabelledBy, ariaDescribedBy, style, children, onDismiss } = props;\n    const needsVerticalScrollBar = useScrollbarAsync(props, root);\n\n    const onKeyDown = React.useCallback(\n      (ev: React.KeyboardEvent<HTMLElement> | KeyboardEvent): void => {\n        // eslint-disable-next-line deprecation/deprecation\n        switch (ev.which) {\n          case KeyCodes.escape:\n            if (onDismiss) {\n              onDismiss(ev);\n\n              ev.preventDefault();\n              ev.stopPropagation();\n            }\n\n            break;\n        }\n      },\n      [onDismiss],\n    );\n\n    const win = useWindow();\n    useOnEvent(win, 'keydown', onKeyDown as (ev: Event) => void);\n\n    return (\n      <div\n        ref={mergedRootRef}\n        {...getNativeProps(props, divProperties)}\n        className={className}\n        role={role}\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={ariaDescribedBy}\n        onKeyDown={onKeyDown}\n        style={{ overflowY: needsVerticalScrollBar ? 'scroll' : undefined, outline: 'none', ...style }}\n      >\n        {children}\n      </div>\n    );\n  },\n);\nPopup.displayName = 'Popup';\n"]}
{"version":3,"file":"PositioningContainer.types.js","sourceRoot":"../src/","sources":["components/Coachmark/PositioningContainer/PositioningContainer.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { DirectionalHint } from '../../../common/DirectionalHint';\nimport type { IRefObject, IBaseProps, Point, IRectangle } from '../../../Utilities';\nimport type { IPositionedData } from '../../../Positioning';\nimport type { ReactNode } from 'react';\nimport type { Target } from '@fluentui/react-hooks';\nimport type { ILayerProps } from '../../../Layer';\n\n/**\n * {@docCategory Coachmark}\n */\nexport interface IPositioningContainer {}\n\n/**\n * {@docCategory Coachmark}\n */\nexport interface IPositioningContainerProps\n  extends IBaseProps<IPositioningContainer>,\n    React.RefAttributes<HTMLDivElement> {\n  /**\n   * All props for your component are to be defined here.\n   */\n  componentRef?: IRefObject<IPositioningContainer>;\n\n  /**\n   * The target that the positioningContainer should try to position itself based on.\n   * It can be either an HTMLElement a querySelector string of a valid HTMLElement\n   * or a MouseEvent. If MouseEvent is given then the origin point of the event will be used.\n   */\n  target?: Target;\n\n  /**\n   * How the element should be positioned\n   * @defaultvalue DirectionalHint.BottomAutoEdge\n   */\n  directionalHint?: DirectionalHint;\n\n  /**\n   * How the element should be positioned in RTL layouts.\n   * If not specified, a mirror of `directionalHint` will be used instead\n   */\n  directionalHintForRTL?: DirectionalHint;\n\n  /**\n   * The gap between the positioningContainer and the target\n   * @defaultvalue 0\n   */\n  offsetFromTarget?: number;\n\n  /**\n   * Custom width for positioningContainer including borders. If value is 0, no width is applied.\n   * @defaultvalue 0\n   */\n  positioningContainerWidth?: number;\n\n  /**\n   * The background color of the positioningContainer in hex format ie. #ffffff.\n   * @defaultvalue $ms-color-white\n   */\n  backgroundColor?: string;\n\n  /**\n   * The bounding rectangle for which the contextual menu can appear in.\n   */\n  bounds?: IRectangle;\n\n  /**\n   * The minimum distance the positioningContainer will be away from the edge of the screen.\n   *  @defaultvalue 8\n   */\n  minPagePadding?: number;\n\n  /**\n   * If true use a point rather than rectangle to position the positioningContainer.\n   * For example it can be used to position based on a click.\n   * @deprecated Do not use.\n   */\n  useTargetPoint?: boolean;\n\n  /**\n   * Point used to position the positioningContainer.\n   * Deprecated, use `target` instead.\n   * @deprecated Use `target` instead.\n   */\n  targetPoint?: Point;\n\n  /**\n   * If true then the onClose will not not dismiss on scroll\n   * @defaultvalue false\n   */\n  preventDismissOnScroll?: boolean;\n\n  /**\n   * If true the position returned will have the menu element cover the target.\n   * If false then it will position next to the target;\n   * @defaultvalue false\n   */\n  coverTarget?: boolean;\n\n  /**\n   * Aria role assigned to the positioningContainer (Eg. dialog, alertdialog).\n   */\n  role?: string;\n\n  /**\n   * Accessible label text for positioningContainer.\n   */\n  ariaLabel?: string;\n\n  /**\n   *  Defines the element id referencing the element containing label text for positioningContainer.\n   */\n  ariaLabelledBy?: string;\n\n  /**\n   * Defines the element id referencing the element containing the description for the positioningContainer.\n   */\n  ariaDescribedBy?: string;\n\n  /**\n   * CSS class to apply to the positioningContainer.\n   * @defaultvalue null\n   */\n  className?: string;\n\n  /**\n   * Defines an optional set of props to be passed through to Layer\n   */\n  layerProps?: ILayerProps;\n\n  /**\n   * Optional callback when the layer content has mounted.\n   */\n  onLayerMounted?: () => void;\n\n  /**\n   * Optional callback that is called once the positioningContainer has been correctly positioned.\n   * @param positions - gives the user information about how the container is positioned such\n   * as the element position, the target edge, and the alignment edge of the container.\n   */\n  onPositioned?: (positions?: IPositionedData) => void;\n\n  /**\n   * Callback when the positioningContainer tries to close.\n   */\n  onDismiss?: (ev?: any) => void;\n\n  /**\n   * If true do not render on a new layer. If false render on a new layer.\n   */\n  doNotLayer?: boolean;\n\n  /**\n   * If true the position will not change sides in an attempt to fit the positioningContainer within bounds.\n   * It will still attempt to align it to whatever bounds are given.\n   * @defaultvalue false\n   */\n  directionalHintFixed?: boolean;\n\n  /**\n   * Specify the final height of the content.\n   * To be used when expanding the content dynamically so that positioningContainer can adjust its position.\n   */\n  finalHeight?: number;\n\n  /**\n   * If true then the positioningContainer will attempt to focus the first focusable element that it contains.\n   * If it doesn't find an element, no focus will be set and the method will return false.\n   * This means that it's the contents responsibility to either set focus or have\n   * focusable items.\n   * @returns True if focus was set, false if it was not.\n   */\n  setInitialFocus?: boolean;\n\n  /**\n   * Set max height of positioningContainer\n   * When not set the positioningContainer will expand with contents up to the bottom of the screen\n   */\n  positioningContainerMaxHeight?: number;\n\n  /**\n   * Child nodes to render\n   */\n  children?: ReactNode;\n}\n\n/**\n * @deprecated Use `IPositioningContainerProps`\n * {@docCategory Coachmark}\n */\nexport type IPositioningContainerTypes = IPositioningContainerProps;\n"]}
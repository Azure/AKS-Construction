{"version":3,"file":"MaskedTextField.js","sourceRoot":"../src/","sources":["components/TextField/MaskedTextField/MaskedTextField.tsx"],"names":[],"mappings":";;;;IA8BA,IAAM,cAAc,GAAG,iBAAiB,CAAC;IAEzC,IAAM,eAAe,GAAG,UACtB,YAAsD,EACtD,aAA4C,EAC5C,SAA4C;QAE5C,KAAK,CAAC,mBAAmB,CACvB,YAAY,EACZ,cAAwB,OAAA,CAAC;YACvB,IAAI,KAAK;gBACP,IAAI,KAAK,GAAG,EAAE,CAAC;gBAEf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC1D,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE;wBACxC,OAAO,SAAS,CAAC;qBAClB;oBACD,KAAK,IAAI,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;iBAC9C;gBACD,OAAO,KAAK,CAAC;YACf,CAAC;YAED,IAAI,cAAc;gBAChB,OAAO,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,OAAO,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChH,CAAC;YAED,IAAI,YAAY;gBACd,OAAO,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACnG,CAAC;YAED,KAAK,EAAL;gBACE,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;YACjD,CAAC;YAED,IAAI,EAAJ;gBACE,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YAChD,CAAC;YAED,MAAM,EAAN;gBACE,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;YAClD,CAAC;YAED,iBAAiB,EAAjB,UAAkB,KAAa;gBAC7B,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,OAAO,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;YAClE,CAAC;YAED,eAAe,EAAf,UAAgB,KAAa;gBAC3B,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAChE,CAAC;YAED,iBAAiB,EAAjB,UAAkB,KAAa,EAAE,GAAW;gBAC1C,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,OAAO,CAAC,iBAAiB,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;YACvE,CAAC;SACF,CAAC,EA5CsB,CA4CtB,EACF,CAAC,aAAa,EAAE,SAAS,CAAC,CAC3B,CAAC;IACJ,CAAC,CAAC;IAEW,QAAA,iBAAiB,GAAG,GAAG,CAAC;IAExB,QAAA,eAAe,GAAmD,KAAK,CAAC,UAAU,CAG7F,UAAC,KAAK,EAAE,GAAG;QACX,IAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAmB,IAAI,CAAC,CAAC;QAGrD,IAAA,YAAY,GAYV,KAAK,aAZK,EACZ,OAAO,GAWL,KAAK,QAXA,EACP,MAAM,GAUJ,KAAK,OAVD,EACN,WAAW,GAST,KAAK,YATI,EACX,SAAS,GAQP,KAAK,UARE,EACT,QAAQ,GAON,KAAK,SAPC,EACR,OAAO,GAML,KAAK,QANA,EACP,SAAS,GAKP,KAAK,UALE,EACT,IAAI,GAIF,KAAK,KAJH,EACJ,KAGE,KAAK,SAHqB,EAA5B,QAAQ,mBAAG,yBAAiB,KAAA,EAC5B,KAEE,KAAK,WAF+B,EAAtC,UAAU,mBAAG,qCAAyB,KAAA,EACtC,KAAK,GACH,KAAK,MADF,CACG;QAEV,IAAM,aAAa,GAAG,sBAAQ,CAAgC,cAAM,OAAA,CAAC;YACnE,YAAY,EAAE,qBAAS,CAAC,IAAI,EAAE,UAAU,CAAC;YACzC,SAAS,EAAE,KAAK;YAChB,mBAAmB,EAAE,KAAK;YAC1B,mBAAmB,EAAE,IAAI;SAC1B,CAAC,EALkE,CAKlE,CAAC,CAAC;QAEJ,+EAA+E;QACzE,IAAA,KAA8C,KAAK,CAAC,QAAQ,EAAsB,EAAjF,kBAAkB,QAAA,EAAE,qBAAqB,QAAwC,CAAC;QAEzF;;;;;WAKG;QACG,IAAA,KAAkC,KAAK,CAAC,QAAQ,CAAS;YAC7D,OAAA,0BAAc,CAAC,IAAI,EAAE,aAAa,CAAC,YAAY,EAAE,QAAQ,CAAC;QAA1D,CAA0D,CAC3D,EAFM,YAAY,QAAA,EAAE,eAAe,QAEnC,CAAC;QAEF,IAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAChC,UAAC,QAAgB;YACf,IAAI,UAAU,GAAG,CAAC,CAAC;YACnB,IAAI,aAAa,GAAG,CAAC,CAAC;YAEtB,OAAO,UAAU,GAAG,QAAQ,CAAC,MAAM,IAAI,aAAa,GAAG,aAAa,CAAC,YAAY,CAAC,MAAM,EAAE;gBACxF,6EAA6E;gBAC7E,IAAM,OAAO,GAAG,QAAQ,CAAC,UAAU,CAAC,CAAC;gBACrC,IAAI,aAAa,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;oBAClE,aAAa,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,KAAK,GAAG,OAAO,CAAC;oBAC1D,aAAa,EAAE,CAAC;iBACjB;gBACD,UAAU,EAAE,CAAC;aACd;QACH,CAAC,EACD,CAAC,aAAa,CAAC,CAChB,CAAC;QAEF,IAAM,WAAW,GAAG,KAAK,CAAC,WAAW,CACnC,UAAC,EAA4D;YAC3D,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAG,EAAE,CAAC,CAAC;YACd,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC;YAE/B,6DAA6D;YAC7D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC1D,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE;oBACxC,qBAAqB,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC;oBAClE,MAAM;iBACP;aACF;QACH,CAAC,EACD,CAAC,aAAa,EAAE,OAAO,CAAC,CACzB,CAAC;QAEF,IAAM,UAAU,GAAG,KAAK,CAAC,WAAW,CAClC,UAAC,EAA4D;YAC3D,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAG,EAAE,CAAC,CAAC;YACb,aAAa,CAAC,SAAS,GAAG,KAAK,CAAC;YAChC,aAAa,CAAC,mBAAmB,GAAG,IAAI,CAAC;QAC3C,CAAC,EACD,CAAC,aAAa,EAAE,MAAM,CAAC,CACxB,CAAC;QAEF,IAAM,eAAe,GAAG,KAAK,CAAC,WAAW,CACvC,UAAC,EAAsC;YACrC,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAG,EAAE,CAAC,CAAC;YAClB,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE;gBAC5B,aAAa,CAAC,mBAAmB,GAAG,IAAI,CAAC;aAC1C;QACH,CAAC,EACD,CAAC,aAAa,EAAE,WAAW,CAAC,CAC7B,CAAC;QAEF,IAAM,aAAa,GAAG,KAAK,CAAC,WAAW,CACrC,UAAC,EAAsC;YACrC,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAG,EAAE,CAAC,CAAC;YAChB,0DAA0D;YAC1D,IAAI,aAAa,CAAC,mBAAmB,EAAE;gBACrC,aAAa,CAAC,mBAAmB,GAAG,KAAK,CAAC;gBAC1C,8DAA8D;gBAC9D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC1D,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE;wBACxC,qBAAqB,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC;wBAClE,MAAM;qBACP;iBACF;aACF;QACH,CAAC,EACD,CAAC,aAAa,EAAE,SAAS,CAAC,CAC3B,CAAC;QAEF,IAAM,iBAAiB,GAAG,KAAK,CAAC,WAAW,CACzC,UAAC,EAA2D,EAAE,UAAkB;YAC9E,IAAI,aAAa,CAAC,mBAAmB,KAAK,IAAI,IAAI,SAAS,CAAC,OAAO,EAAE;gBACnE,aAAa,CAAC,mBAAmB,GAAG;oBAClC,UAAU,EAAE,SAAS;oBACrB,cAAc,EAAE,SAAS,CAAC,OAAO,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;oBACjG,YAAY,EAAE,SAAS,CAAC,OAAO,CAAC,YAAY,KAAK,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC5F,CAAC;aACH;YACD,IAAI,CAAC,aAAa,CAAC,mBAAmB,EAAE;gBACtC,OAAO;aACR;YAED,iDAAiD;YACjD,IAAI,SAAS,GAAG,CAAC,CAAC;YACZ,IAAA,KAA+C,aAAa,CAAC,mBAAmB,EAA9E,UAAU,gBAAA,EAAE,cAAc,oBAAA,EAAE,YAAY,kBAAsC,CAAC;YAEvF,IAAI,UAAU,KAAK,YAAY,EAAE;gBAC/B,IAAM,aAAa,GAAG,YAAY,GAAG,cAAc,CAAC;gBACpD,IAAM,SAAS,GAAG,UAAU,CAAC,MAAM,GAAG,aAAa,GAAG,YAAY,CAAC,MAAM,CAAC;gBAC1E,IAAM,QAAQ,GAAG,cAAc,CAAC;gBAChC,IAAM,YAAY,GAAG,UAAU,CAAC,MAAM,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;gBAE5D,gCAAgC;gBAChC,IAAI,aAAa,EAAE;oBACjB,aAAa,CAAC,YAAY,GAAG,sBAAU,CAAC,aAAa,CAAC,YAAY,EAAE,cAAc,EAAE,aAAa,CAAC,CAAC;iBACpG;gBACD,SAAS,GAAG,wBAAY,CAAC,aAAa,CAAC,YAAY,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;aAC9E;iBAAM,IAAI,UAAU,KAAK,QAAQ,IAAI,UAAU,KAAK,WAAW,EAAE;gBAChE,iEAAiE;gBACjE,IAAM,KAAK,GAAG,UAAU,KAAK,QAAQ,CAAC;gBACtC,IAAM,SAAS,GAAG,YAAY,GAAG,cAAc,CAAC;gBAEhD,IAAI,SAAS,EAAE;oBACb,wCAAwC;oBACxC,aAAa,CAAC,YAAY,GAAG,sBAAU,CAAC,aAAa,CAAC,YAAY,EAAE,cAAc,EAAE,SAAS,CAAC,CAAC;oBAC/F,SAAS,GAAG,+BAAmB,CAAC,aAAa,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;iBAC7E;qBAAM;oBACL,gFAAgF;oBAChF,IAAI,KAAK,EAAE;wBACT,aAAa,CAAC,YAAY,GAAG,qBAAS,CAAC,aAAa,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;wBACnF,SAAS,GAAG,+BAAmB,CAAC,aAAa,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;qBAC7E;yBAAM;wBACL,aAAa,CAAC,YAAY,GAAG,qBAAS,CAAC,aAAa,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;wBACnF,SAAS,GAAG,8BAAkB,CAAC,aAAa,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;qBAC5E;iBACF;aACF;iBAAM,IAAI,UAAU,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,EAAE;gBAClD,4CAA4C;gBAC5C,IAAM,SAAS,GAAG,UAAU,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;gBAC1D,IAAM,QAAQ,GAAG,YAAY,GAAG,SAAS,CAAC;gBAC1C,IAAM,aAAa,GAAG,UAAU,CAAC,MAAM,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;gBAE7D,SAAS,GAAG,wBAAY,CAAC,aAAa,CAAC,YAAY,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;aAC/E;iBAAM,IAAI,UAAU,CAAC,MAAM,IAAI,YAAY,CAAC,MAAM,EAAE;gBACnD;;;mBAGG;gBACH,IAAM,SAAS,GAAG,CAAC,CAAC;gBACpB,IAAM,WAAW,GAAG,YAAY,CAAC,MAAM,GAAG,SAAS,GAAG,UAAU,CAAC,MAAM,CAAC;gBACxE,IAAM,QAAQ,GAAG,YAAY,GAAG,SAAS,CAAC;gBAC1C,IAAM,aAAa,GAAG,UAAU,CAAC,MAAM,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;gBAE7D,2BAA2B;gBAC3B,aAAa,CAAC,YAAY,GAAG,sBAAU,CAAC,aAAa,CAAC,YAAY,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;gBAC3F,+BAA+B;gBAC/B,SAAS,GAAG,wBAAY,CAAC,aAAa,CAAC,YAAY,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;aAC/E;YAED,aAAa,CAAC,mBAAmB,GAAG,IAAI,CAAC;YAEzC,IAAM,QAAQ,GAAG,0BAAc,CAAC,IAAI,EAAE,aAAa,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;YAE5E,eAAe,CAAC,QAAQ,CAAC,CAAC;YAC1B,qBAAqB,CAAC,SAAS,CAAC,CAAC;YAEjC,qGAAqG;YACrG,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAG,EAAE,EAAE,QAAQ,CAAC,CAAC;QAC3B,CAAC,EACD,CAAC,YAAY,CAAC,MAAM,EAAE,aAAa,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAC/D,CAAC;QAEF,IAAM,aAAa,GAAG,KAAK,CAAC,WAAW,CACrC,UAAC,EAAyC;YACxC,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAG,EAAE,CAAC,CAAC;YAEhB,aAAa,CAAC,mBAAmB,GAAG,IAAI,CAAC;YACzC,IAAI,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,OAAO,CAAC,KAAK,EAAE;gBAChD,mDAAmD;gBAC3C,IAAA,OAAO,GAAuB,EAAE,QAAzB,EAAE,OAAO,GAAc,EAAE,QAAhB,EAAE,OAAO,GAAK,EAAE,QAAP,CAAQ;gBAEzC,+BAA+B;gBAC/B,IAAI,OAAO,IAAI,OAAO,EAAE;oBACtB,OAAO;iBACR;gBAED,8DAA8D;gBAC9D,IAAI,OAAO,KAAK,oBAAQ,CAAC,SAAS,IAAI,OAAO,KAAK,oBAAQ,CAAC,GAAG,EAAE;oBAC9D,IAAM,cAAc,GAAI,EAAE,CAAC,MAA2B,CAAC,cAAc,CAAC;oBACtE,IAAM,YAAY,GAAI,EAAE,CAAC,MAA2B,CAAC,YAAY,CAAC;oBAElE,+CAA+C;oBAC/C,IACE,CAAC,CAAC,OAAO,KAAK,oBAAQ,CAAC,SAAS,IAAI,YAAY,IAAI,YAAY,GAAG,CAAC,CAAC;wBACrE,CAAC,CAAC,OAAO,KAAK,oBAAQ,CAAC,GAAG,IAAI,cAAc,KAAK,IAAI,IAAI,cAAc,GAAG,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,EACzG;wBACA,OAAO;qBACR;oBAED,aAAa,CAAC,mBAAmB,GAAG;wBAClC,UAAU,EAAE,OAAO,KAAK,oBAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ;wBACnE,cAAc,EAAE,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC7D,YAAY,EAAE,YAAY,KAAK,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;qBACxD,CAAC;iBACH;aACF;QACH,CAAC,EACD,CAAC,aAAa,EAAE,SAAS,CAAC,CAC3B,CAAC;QAEF,IAAM,WAAW,GAAG,KAAK,CAAC,WAAW,CACnC,UAAC,EAA0C;YACzC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAG,EAAE,CAAC,CAAC;YAEd,IAAM,cAAc,GAAI,EAAE,CAAC,MAA2B,CAAC,cAAc,CAAC;YACtE,IAAM,YAAY,GAAI,EAAE,CAAC,MAA2B,CAAC,YAAY,CAAC;YAClE,kCAAkC;YAClC,aAAa,CAAC,mBAAmB,GAAG;gBAClC,UAAU,EAAE,YAAY;gBACxB,cAAc,EAAE,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC7D,YAAY,EAAE,YAAY,KAAK,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;aACxD,CAAC;QACJ,CAAC,EACD,CAAC,aAAa,EAAE,OAAO,CAAC,CACzB,CAAC;QAEF,2DAA2D;QAC3D,KAAK,CAAC,SAAS,CAAC;YACd,aAAa,CAAC,YAAY,GAAG,qBAAS,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;YACzD,KAAK,KAAK,SAAS,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC;YACvC,eAAe,CAAC,0BAAc,CAAC,IAAI,EAAE,aAAa,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC,CAAC;YAC5E,yGAAyG;QAC3G,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;QAElB,qEAAqE;QACrE,uCAAyB,CAAC;YACxB,4CAA4C;YAC5C,IAAI,kBAAkB,KAAK,SAAS,IAAI,SAAS,CAAC,OAAO,EAAE;gBACzD,SAAS,CAAC,OAAO,CAAC,iBAAiB,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,CAAC;aAC7E;QACH,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC,CAAC;QAEzB,2BAA2B;QAC3B,KAAK,CAAC,SAAS,CAAC;YACd,uEAAuE;YACvE,IAAI,aAAa,CAAC,SAAS,IAAI,kBAAkB,KAAK,SAAS,IAAI,SAAS,CAAC,OAAO,EAAE;gBACpF,SAAS,CAAC,OAAO,CAAC,iBAAiB,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,CAAC;aAC7E;QACH,CAAC,CAAC,CAAC;QAEH,eAAe,CAAC,YAAY,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC;QAExD,OAAO,CACL,oBAAC,qBAAS,uBACJ,KAAK,IACT,UAAU,EAAE,GAAG,EACf,OAAO,EAAE,WAAW,EACpB,MAAM,EAAE,UAAU,EAClB,WAAW,EAAE,eAAe,EAC5B,SAAS,EAAE,aAAa,EACxB,QAAQ,EAAE,iBAAiB,EAC3B,SAAS,EAAE,aAAa,EACxB,OAAO,EAAE,WAAW,EACpB,KAAK,EAAE,YAAY,IAAI,EAAE,EACzB,YAAY,EAAE,SAAS,IACvB,CACH,CAAC;IACJ,CAAC,CAAC,CAAC;IACH,uBAAe,CAAC,WAAW,GAAG,cAAc,CAAC","sourcesContent":["import * as React from 'react';\nimport { TextField } from '../TextField';\nimport { KeyCodes } from '../../../Utilities';\nimport {\n  clearNext,\n  clearPrev,\n  clearRange,\n  DEFAULT_MASK_FORMAT_CHARS,\n  getLeftFormatIndex,\n  getMaskDisplay,\n  getRightFormatIndex,\n  insertString,\n  parseMask,\n} from './inputMask';\nimport { useConst, useIsomorphicLayoutEffect } from '@fluentui/react-hooks';\nimport type { IMaskedTextFieldProps, IMaskedTextField } from '../TextField.types';\nimport type { IRefObject } from '../../../Utilities';\nimport type { IMaskValue } from './inputMask';\n\ninterface IMaskedTextFieldInternalState {\n  maskCharData: IMaskValue[];\n  isFocused: boolean;\n  moveCursorOnMouseUp: boolean;\n  changeSelectionData: {\n    changeType: 'default' | 'backspace' | 'delete' | 'textPasted';\n    selectionStart: number;\n    selectionEnd: number;\n  } | null;\n}\n\nconst COMPONENT_NAME = 'MaskedTextField';\n\nconst useComponentRef = (\n  componentRef: IRefObject<IMaskedTextField> | undefined,\n  internalState: IMaskedTextFieldInternalState,\n  textField: React.RefObject<IMaskedTextField>,\n) => {\n  React.useImperativeHandle(\n    componentRef,\n    (): IMaskedTextField => ({\n      get value() {\n        let value = '';\n\n        for (let i = 0; i < internalState.maskCharData.length; i++) {\n          if (!internalState.maskCharData[i].value) {\n            return undefined;\n          }\n          value += internalState.maskCharData[i].value;\n        }\n        return value;\n      },\n\n      get selectionStart(): number | null {\n        return textField.current && textField.current.selectionStart !== null ? textField.current.selectionStart : -1;\n      },\n\n      get selectionEnd(): number | null {\n        return textField.current && textField.current.selectionEnd ? textField.current.selectionEnd : -1;\n      },\n\n      focus(): void {\n        textField.current && textField.current.focus();\n      },\n\n      blur(): void {\n        textField.current && textField.current.blur();\n      },\n\n      select(): void {\n        textField.current && textField.current.select();\n      },\n\n      setSelectionStart(value: number): void {\n        textField.current && textField.current.setSelectionStart(value);\n      },\n\n      setSelectionEnd(value: number): void {\n        textField.current && textField.current.setSelectionEnd(value);\n      },\n\n      setSelectionRange(start: number, end: number): void {\n        textField.current && textField.current.setSelectionRange(start, end);\n      },\n    }),\n    [internalState, textField],\n  );\n};\n\nexport const DEFAULT_MASK_CHAR = '_';\n\nexport const MaskedTextField: React.FunctionComponent<IMaskedTextFieldProps> = React.forwardRef<\n  HTMLDivElement,\n  IMaskedTextFieldProps\n>((props, ref) => {\n  const textField = React.useRef<IMaskedTextField>(null);\n\n  const {\n    componentRef,\n    onFocus,\n    onBlur,\n    onMouseDown,\n    onMouseUp,\n    onChange,\n    onPaste,\n    onKeyDown,\n    mask,\n    maskChar = DEFAULT_MASK_CHAR,\n    maskFormat = DEFAULT_MASK_FORMAT_CHARS,\n    value,\n  } = props;\n\n  const internalState = useConst<IMaskedTextFieldInternalState>(() => ({\n    maskCharData: parseMask(mask, maskFormat),\n    isFocused: false,\n    moveCursorOnMouseUp: false,\n    changeSelectionData: null,\n  }));\n\n  /** The index into the rendered value of the first unfilled format character */\n  const [maskCursorPosition, setMaskCursorPosition] = React.useState<number | undefined>();\n\n  /**\n   * The mask string formatted with the input value.\n   * This is what is displayed inside the TextField\n   * @example\n   *  `Phone Number: 12_ - 4___`\n   */\n  const [displayValue, setDisplayValue] = React.useState<string>(() =>\n    getMaskDisplay(mask, internalState.maskCharData, maskChar),\n  );\n\n  const setValue = React.useCallback(\n    (newValue: string): void => {\n      let valueIndex = 0;\n      let charDataIndex = 0;\n\n      while (valueIndex < newValue.length && charDataIndex < internalState.maskCharData.length) {\n        // Test if the next character in the new value fits the next format character\n        const testVal = newValue[valueIndex];\n        if (internalState.maskCharData[charDataIndex].format.test(testVal)) {\n          internalState.maskCharData[charDataIndex].value = testVal;\n          charDataIndex++;\n        }\n        valueIndex++;\n      }\n    },\n    [internalState],\n  );\n\n  const handleFocus = React.useCallback(\n    (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      onFocus?.(ev);\n      internalState.isFocused = true;\n\n      // Move the cursor position to the leftmost unfilled position\n      for (let i = 0; i < internalState.maskCharData.length; i++) {\n        if (!internalState.maskCharData[i].value) {\n          setMaskCursorPosition(internalState.maskCharData[i].displayIndex);\n          break;\n        }\n      }\n    },\n    [internalState, onFocus],\n  );\n\n  const handleBlur = React.useCallback(\n    (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      onBlur?.(ev);\n      internalState.isFocused = false;\n      internalState.moveCursorOnMouseUp = true;\n    },\n    [internalState, onBlur],\n  );\n\n  const handleMouseDown = React.useCallback(\n    (ev: React.MouseEvent<HTMLInputElement>) => {\n      onMouseDown?.(ev);\n      if (!internalState.isFocused) {\n        internalState.moveCursorOnMouseUp = true;\n      }\n    },\n    [internalState, onMouseDown],\n  );\n\n  const handleMouseUp = React.useCallback(\n    (ev: React.MouseEvent<HTMLInputElement>) => {\n      onMouseUp?.(ev);\n      // Move the cursor on mouseUp after focusing the textField\n      if (internalState.moveCursorOnMouseUp) {\n        internalState.moveCursorOnMouseUp = false;\n        // Move the cursor position to the rightmost unfilled position\n        for (let i = 0; i < internalState.maskCharData.length; i++) {\n          if (!internalState.maskCharData[i].value) {\n            setMaskCursorPosition(internalState.maskCharData[i].displayIndex);\n            break;\n          }\n        }\n      }\n    },\n    [internalState, onMouseUp],\n  );\n\n  const handleInputChange = React.useCallback(\n    (ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, inputValue: string) => {\n      if (internalState.changeSelectionData === null && textField.current) {\n        internalState.changeSelectionData = {\n          changeType: 'default',\n          selectionStart: textField.current.selectionStart !== null ? textField.current.selectionStart : -1,\n          selectionEnd: textField.current.selectionEnd !== null ? textField.current.selectionEnd : -1,\n        };\n      }\n      if (!internalState.changeSelectionData) {\n        return;\n      }\n\n      // The initial value of cursorPos does not matter\n      let cursorPos = 0;\n      const { changeType, selectionStart, selectionEnd } = internalState.changeSelectionData;\n\n      if (changeType === 'textPasted') {\n        const charsSelected = selectionEnd - selectionStart;\n        const charCount = inputValue.length + charsSelected - displayValue.length;\n        const startPos = selectionStart;\n        const pastedString = inputValue.substr(startPos, charCount);\n\n        // Clear any selected characters\n        if (charsSelected) {\n          internalState.maskCharData = clearRange(internalState.maskCharData, selectionStart, charsSelected);\n        }\n        cursorPos = insertString(internalState.maskCharData, startPos, pastedString);\n      } else if (changeType === 'delete' || changeType === 'backspace') {\n        // isDel is true If the characters are removed LTR, otherwise RTL\n        const isDel = changeType === 'delete';\n        const charCount = selectionEnd - selectionStart;\n\n        if (charCount) {\n          // charCount is > 0 if range was deleted\n          internalState.maskCharData = clearRange(internalState.maskCharData, selectionStart, charCount);\n          cursorPos = getRightFormatIndex(internalState.maskCharData, selectionStart);\n        } else {\n          // If charCount === 0, there was no selection and a single character was deleted\n          if (isDel) {\n            internalState.maskCharData = clearNext(internalState.maskCharData, selectionStart);\n            cursorPos = getRightFormatIndex(internalState.maskCharData, selectionStart);\n          } else {\n            internalState.maskCharData = clearPrev(internalState.maskCharData, selectionStart);\n            cursorPos = getLeftFormatIndex(internalState.maskCharData, selectionStart);\n          }\n        }\n      } else if (inputValue.length > displayValue.length) {\n        // This case is if the user added characters\n        const charCount = inputValue.length - displayValue.length;\n        const startPos = selectionEnd - charCount;\n        const enteredString = inputValue.substr(startPos, charCount);\n\n        cursorPos = insertString(internalState.maskCharData, startPos, enteredString);\n      } else if (inputValue.length <= displayValue.length) {\n        /**\n         * This case is reached only if the user has selected a block of 1 or more\n         * characters and input a character replacing the characters they've selected.\n         */\n        const charCount = 1;\n        const selectCount = displayValue.length + charCount - inputValue.length;\n        const startPos = selectionEnd - charCount;\n        const enteredString = inputValue.substr(startPos, charCount);\n\n        // Clear the selected range\n        internalState.maskCharData = clearRange(internalState.maskCharData, startPos, selectCount);\n        // Insert the printed character\n        cursorPos = insertString(internalState.maskCharData, startPos, enteredString);\n      }\n\n      internalState.changeSelectionData = null;\n\n      const newValue = getMaskDisplay(mask, internalState.maskCharData, maskChar);\n\n      setDisplayValue(newValue);\n      setMaskCursorPosition(cursorPos);\n\n      // Perform onChange after input has been processed. Return value is expected to be the displayed text\n      onChange?.(ev, newValue);\n    },\n    [displayValue.length, internalState, mask, maskChar, onChange],\n  );\n\n  const handleKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLInputElement>) => {\n      onKeyDown?.(ev);\n\n      internalState.changeSelectionData = null;\n      if (textField.current && textField.current.value) {\n        // eslint-disable-next-line deprecation/deprecation\n        const { keyCode, ctrlKey, metaKey } = ev;\n\n        // Ignore ctrl and meta keydown\n        if (ctrlKey || metaKey) {\n          return;\n        }\n\n        // On backspace or delete, store the selection and the keyCode\n        if (keyCode === KeyCodes.backspace || keyCode === KeyCodes.del) {\n          const selectionStart = (ev.target as HTMLInputElement).selectionStart;\n          const selectionEnd = (ev.target as HTMLInputElement).selectionEnd;\n\n          // Check if backspace or delete press is valid.\n          if (\n            !(keyCode === KeyCodes.backspace && selectionEnd && selectionEnd > 0) &&\n            !(keyCode === KeyCodes.del && selectionStart !== null && selectionStart < textField.current.value.length)\n          ) {\n            return;\n          }\n\n          internalState.changeSelectionData = {\n            changeType: keyCode === KeyCodes.backspace ? 'backspace' : 'delete',\n            selectionStart: selectionStart !== null ? selectionStart : -1,\n            selectionEnd: selectionEnd !== null ? selectionEnd : -1,\n          };\n        }\n      }\n    },\n    [internalState, onKeyDown],\n  );\n\n  const handlePaste = React.useCallback(\n    (ev: React.ClipboardEvent<HTMLInputElement>) => {\n      onPaste?.(ev);\n\n      const selectionStart = (ev.target as HTMLInputElement).selectionStart;\n      const selectionEnd = (ev.target as HTMLInputElement).selectionEnd;\n      // Store the paste selection range\n      internalState.changeSelectionData = {\n        changeType: 'textPasted',\n        selectionStart: selectionStart !== null ? selectionStart : -1,\n        selectionEnd: selectionEnd !== null ? selectionEnd : -1,\n      };\n    },\n    [internalState, onPaste],\n  );\n\n  // Updates the display value if mask or value props change.\n  React.useEffect(() => {\n    internalState.maskCharData = parseMask(mask, maskFormat);\n    value !== undefined && setValue(value);\n    setDisplayValue(getMaskDisplay(mask, internalState.maskCharData, maskChar));\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- Should only update when mask or value changes.\n  }, [mask, value]);\n\n  // Run before browser paint to avoid flickering from selection reset.\n  useIsomorphicLayoutEffect(() => {\n    // Move the cursor to position before paint.\n    if (maskCursorPosition !== undefined && textField.current) {\n      textField.current.setSelectionRange(maskCursorPosition, maskCursorPosition);\n    }\n  }, [maskCursorPosition]);\n\n  // Run after browser paint.\n  React.useEffect(() => {\n    // Move the cursor to the start of the mask format after values update.\n    if (internalState.isFocused && maskCursorPosition !== undefined && textField.current) {\n      textField.current.setSelectionRange(maskCursorPosition, maskCursorPosition);\n    }\n  });\n\n  useComponentRef(componentRef, internalState, textField);\n\n  return (\n    <TextField\n      {...props}\n      elementRef={ref}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onChange={handleInputChange}\n      onKeyDown={handleKeyDown}\n      onPaste={handlePaste}\n      value={displayValue || ''}\n      componentRef={textField}\n    />\n  );\n});\nMaskedTextField.displayName = COMPONENT_NAME;\n"]}
{"version":3,"file":"TextField.types.js","sourceRoot":"../src/","sources":["components/TextField/TextField.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { IRefObject, IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IIconProps } from '../../Icon';\n\n/**\n * {@docCategory TextField}\n */\nexport interface ITextField {\n  /** Gets the current value of the input. */\n  value: string | undefined;\n\n  /** Sets focus to the input. */\n  focus: () => void;\n\n  /** Blurs the input */\n  blur: () => void;\n\n  /** Select the value of the text field. */\n  select: () => void;\n\n  /** Sets the selection start of the text field to a specified value. */\n  setSelectionStart: (value: number) => void;\n\n  /** Sets the selection end of the text field to a specified value. */\n  setSelectionEnd: (value: number) => void;\n\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * Call with start and end set to the same value to set the cursor position.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n  setSelectionRange: (start: number, end: number) => void;\n\n  /** Gets the selection start of the text field. Returns -1 if there is no selection. */\n  selectionStart: number | null;\n\n  /** Gets the selection end of the text field. Returns -1 if there is no selection. */\n  selectionEnd: number | null;\n}\n\n/**\n * TextField component props.\n * {@docCategory TextField}\n */\nexport interface ITextFieldProps extends React.AllHTMLAttributes<HTMLInputElement | HTMLTextAreaElement> {\n  /**\n   * Optional callback to access the ITextField component. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ITextField>;\n\n  /**\n   * Optional callback to access the root DOM element.\n   * @deprecated Temporary solution which will be replaced with ref once TextField is converted to a function component.\n   */\n  elementRef?: React.Ref<HTMLDivElement>;\n\n  /**\n   * Whether or not the text field is a multiline text field.\n   * @defaultvalue false\n   */\n  multiline?: boolean;\n\n  /**\n   * For multiline text fields, whether or not the field is resizable.\n   * @defaultvalue true\n   */\n  resizable?: boolean;\n\n  /**\n   * For multiline text fields, whether or not to auto adjust text field height.\n   * @defaultvalue false\n   */\n  autoAdjustHeight?: boolean;\n\n  /**\n   * Whether or not the text field is underlined.\n   * @defaultvalue false\n   */\n  underlined?: boolean;\n\n  /**\n   * Whether or not the text field is borderless.\n   * @defaultvalue false\n   */\n  borderless?: boolean;\n\n  /**\n   * Label displayed above the text field (and read by screen readers).\n   */\n  label?: string;\n\n  /**\n   * Custom renderer for the label.\n   * If you don't call defaultRender, ensure that you give your custom-rendered label an id and that\n   * you set the textfield's aria-labelledby prop to that id.\n   */\n  onRenderLabel?: IRenderFunction<ITextFieldProps>;\n\n  /**\n   * Description displayed below the text field to provide additional details about what text to enter.\n   */\n  description?: string;\n\n  /**\n   * Custom renderer for the description.\n   */\n  onRenderDescription?: IRenderFunction<ITextFieldProps>;\n\n  /**\n   * Custom renderer for the actual single-line input field (not used if `multiline` is true).\n   * This receives the processed props which would usually be passed to the `<input>` element\n   * and allows manually modifying them or rendering as a different element. (Use with care,\n   * since changes here could easily break the component.)\n   */\n  onRenderInput?: IRenderFunction<React.InputHTMLAttributes<HTMLInputElement> & React.RefAttributes<HTMLInputElement>>;\n\n  /**\n   * Prefix displayed before the text field contents. This is not included in the value.\n   * Ensure a descriptive label is present to assist screen readers, as the value does not include the prefix.\n   */\n  prefix?: string;\n\n  /**\n   * Suffix displayed after the text field contents. This is not included in the value.\n   * Ensure a descriptive label is present to assist screen readers, as the value does not include the suffix.\n   */\n  suffix?: string;\n\n  /**\n   * Custom render function for prefix.\n   */\n  onRenderPrefix?: IRenderFunction<ITextFieldProps>;\n\n  /**\n   * Custom render function for suffix.\n   */\n  onRenderSuffix?: IRenderFunction<ITextFieldProps>;\n\n  /**\n   * Props for an optional icon, displayed in the far right end of the text field.\n   */\n  iconProps?: IIconProps;\n\n  /**\n   * Default value of the text field. Only provide this if the text field is an uncontrolled component;\n   * otherwise, use the `value` property.\n   */\n  defaultValue?: string;\n\n  /**\n   * Current value of the text field. Only provide this if the text field is a controlled component where you\n   * are maintaining its current state; otherwise, use the `defaultValue` property.\n   */\n  value?: string;\n\n  /**\n   * Disabled state of the text field.\n   * @defaultvalue false\n   */\n  disabled?: boolean;\n\n  /**\n   * If true, the text field is readonly.\n   * @defaultvalue false\n   */\n  readOnly?: boolean;\n\n  /**\n   * If true, the text field is invalid. Will be auto-determined by errorMessage unless set.\n   * @defaultvalue false\n   */\n  invalid?: boolean;\n\n  /**\n   * Static error message displayed below the text field. Use `onGetErrorMessage` to dynamically\n   * change the error message displayed (if any) based on the current value. `errorMessage` and\n   * `onGetErrorMessage` are mutually exclusive (`errorMessage` takes precedence).\n   */\n  errorMessage?: string | JSX.Element;\n\n  /**\n   * Callback for when the input value changes.\n   * This is called on both `input` and `change` events.\n   * (In a later version, this will probably only be called for the `change` event.)\n   */\n  onChange?: (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => void;\n\n  /**\n   * Function called after validation completes.\n   */\n  onNotifyValidationResult?: (errorMessage: string | JSX.Element, value: string | undefined) => void;\n\n  /**\n   * Function used to determine whether the input value is valid and get an error message if not.\n   * Mutually exclusive with the static string `errorMessage` (it will take precedence over this).\n   *\n   * When it returns `string | JSX.Element`:\n   * - If valid, it returns empty string.\n   * - If invalid, it returns the error message and the text field will\n   *   show a red border and show an error message below the text field.\n   *\n   * When it returns `Promise<string | JSX.Element>`:\n   * - The resolved value is displayed as the error message.\n   * - If rejected, the value is thrown away.\n   */\n  onGetErrorMessage?: (value: string) => string | JSX.Element | PromiseLike<string | JSX.Element> | undefined;\n\n  /**\n   * Text field will start to validate after users stop typing for `deferredValidationTime` milliseconds.\n   * Updates to this prop will not be respected.\n   * @defaultvalue 200\n   */\n  deferredValidationTime?: number;\n\n  /**\n   * Optional class name that is added to the container of the component.\n   */\n  className?: string;\n\n  /**\n   * Optional class name that is added specifically to the input/textarea element.\n   */\n  inputClassName?: string;\n\n  /**\n   * Aria label for the text field.\n   */\n  ariaLabel?: string;\n\n  /**\n   * Run validation when focus moves into the input, and **do not** validate on change.\n   *\n   * (Unless this prop and/or `validateOnFocusOut` is set to true, validation will run on every change.)\n   * @defaultvalue false\n   */\n  validateOnFocusIn?: boolean;\n\n  /**\n   * Run validation when focus moves out of the input, and **do not** validate on change.\n   *\n   * (Unless this prop and/or `validateOnFocusIn` is set to true, validation will run on every change.)\n   * @defaultvalue false\n   */\n  validateOnFocusOut?: boolean;\n\n  /**\n   * Whether validation should run when the input is initially rendered.\n   * @defaultvalue true\n   */\n  validateOnLoad?: boolean;\n\n  /**\n   * Theme (provided through customization).\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ITextFieldStyleProps, ITextFieldStyles>;\n\n  /**\n   * Whether the input field should have autocomplete enabled.\n   * This tells the browser to display options based on earlier typed values.\n   * Common values are 'on' and 'off' but for all possible values see the following links:\n   * https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#Values\n   * https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\n   */\n  autoComplete?: string;\n\n  /**\n   * Whether to show the reveal password button for input type `'password'`. This will be ignored\n   * if the `type` prop is not set to `'password'`, or if the browser is known to have a built-in\n   * reveal button for password inputs (Edge, IE).\n   */\n  canRevealPassword?: boolean;\n\n  /**\n   * If `canRevealPassword` is true, aria label for the reveal password button (example: \"Show\n   * password\"). Note that this will NOT be used in browsers known to have a built-in reveal\n   * password button for password inputs (Edge, IE).\n   */\n  revealPasswordAriaLabel?: string;\n}\n\n/**\n * {@docCategory TextField}\n */\nexport type ITextFieldStyleProps = Required<Pick<ITextFieldProps, 'theme'>> &\n  Pick<\n    ITextFieldProps,\n    | 'className'\n    | 'disabled'\n    | 'inputClassName'\n    | 'required'\n    | 'multiline'\n    | 'borderless'\n    | 'resizable'\n    | 'underlined'\n    | 'autoAdjustHeight'\n  > & {\n    /** Element has an error message. */\n    hasErrorMessage?: boolean;\n    /** Element has an icon. */\n    hasIcon?: boolean;\n    /** Element has a label. */\n    hasLabel?: boolean;\n    /** Element has focus. */\n    focused?: boolean;\n    /** Element has a peek button for passwords */\n    hasRevealButton?: boolean;\n  };\n\n/**\n * {@docCategory TextField}\n */\nexport interface ITextFieldSubComponentStyles {\n  /**\n   * Styling for Label child component.\n   */\n  // TODO: this should be the interface once we're on TS 2.9.2 but otherwise causes errors in 2.8.4\n  // label: IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>;\n  label: IStyleFunctionOrObject<any, any>;\n}\n\n/**\n * {@docCategory TextField}\n */\nexport interface ITextFieldStyles {\n  /**\n   * Style for root element.\n   */\n  root: IStyle;\n\n  /**\n   * Style for field group encompassing entry area (prefix, field, icon and suffix).\n   */\n  fieldGroup: IStyle;\n\n  /**\n   * Style for prefix element.\n   */\n  prefix: IStyle;\n\n  /**\n   * Style for suffix element.\n   */\n  suffix: IStyle;\n\n  /**\n   * Style for main field entry element.\n   */\n  field: IStyle;\n\n  /**\n   * Style for icon prop element.\n   */\n  icon: IStyle;\n\n  /**\n   * Style for description element.\n   */\n  description: IStyle;\n\n  /**\n   * Style for TextField wrapper element.\n   * Mainly useful for overriding border styles for underlined fields.\n   */\n  wrapper: IStyle;\n\n  /**\n   * Style for error message element.\n   */\n  errorMessage: IStyle;\n\n  /**\n   * Styling for subcomponents.\n   */\n  subComponentStyles: ITextFieldSubComponentStyles;\n\n  /**\n   * Styling for reveal password button\n   */\n  revealButton: IStyle;\n\n  /**\n   * Styling for reveal password span\n   */\n  revealSpan: IStyle;\n\n  /**\n   * Styling for reveal password icon\n   */\n  revealIcon: IStyle;\n}\n\n/**\n * {@docCategory TextField}\n */\nexport interface IMaskedTextField extends ITextField {\n  /**\n   * The value of all filled format characters, or undefined if not all format characters are filled.\n   */\n  value: string | undefined;\n}\n\n/**\n * MaskedTextField component props.\n * {@docCategory TextField}\n */\nexport interface IMaskedTextFieldProps extends ITextFieldProps, React.RefAttributes<HTMLDivElement> {\n  /**\n   * Optional callback to access the IMaskedTextField interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IMaskedTextField>;\n\n  /**\n   * The masking string that defines the mask's behavior.\n   * A backslash will escape any character.\n   * Special format characters are:\n   * '9': [0-9]\n   * 'a': [a-zA-Z]\n   * '*': [a-zA-Z0-9]\n   *\n   * @example `Phone Number: (999) 999-9999`\n   */\n  mask?: string;\n\n  /**\n   * The character to show in place of unfilled characters of the mask.\n   * @defaultvalue '_'\n   */\n  maskChar?: string;\n\n  /**\n   * An object defining the format characters and corresponding regexp values.\n   * Default format characters: \\{\n   *  '9': /[0-9]/,\n   *  'a': /[a-zA-Z]/,\n   *  '*': /[a-zA-Z0-9]/\n   * \\}\n   */\n  maskFormat?: { [key: string]: RegExp };\n}\n"]}
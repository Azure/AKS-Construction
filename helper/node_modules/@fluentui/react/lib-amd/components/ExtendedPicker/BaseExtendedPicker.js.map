{"version":3,"file":"BaseExtendedPicker.js","sourceRoot":"../src/","sources":["components/ExtendedPicker/BaseExtendedPicker.tsx"],"names":[],"mappings":";;;;IAaA,IAAM,MAAM,GAAQ,YAAY,CAAC;IAMjC;QACU,8CAA+C;QASvD,4BAAY,eAAkB;YAA9B,YACE,kBAAM,eAAe,CAAC,SAQvB;YAhBM,oBAAc,GAAG,KAAK,CAAC,SAAS,EAAsD,CAAC;YACvF,uBAAiB,GAAG,KAAK,CAAC,SAAS,EAA4D,CAAC;YAE7F,UAAI,GAAG,KAAK,CAAC,SAAS,EAAkB,CAAC;YACzC,WAAK,GAAG,KAAK,CAAC,SAAS,EAAY,CAAC;YA8FpC,uBAAiB,GAAG;gBAC5B,KAAI,CAAC,WAAW,EAAE,CAAC;YACrB,CAAC,CAAC;YAoCQ,mBAAa,GAAG,UAAC,KAAa,EAAE,SAAmB;gBAC3D,0FAA0F;gBAC1F,IAAI,CAAC,SAAS,EAAE;oBACd,KAAI,CAAC,QAAQ,CAAC,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,CAAC;oBACtC,IAAI,KAAI,CAAC,cAAc,CAAC,OAAO,EAAE;wBAC/B,KAAI,CAAC,cAAc,CAAC,OAAO,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;qBACzD;iBACF;YACH,CAAC,CAAC;YAEQ,kBAAY,GAAG,UAAC,EAAiD;gBACzE,IAAI,KAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE;oBAClC,KAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;iBAC9C;gBAED,IAAI,KAAI,CAAC,KAAK,CAAC,UAAU,IAAI,KAAI,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,EAAE;oBAC1D,KAAI,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,EAAwC,CAAC,CAAC;iBACzE;YACH,CAAC,CAAC;YAEQ,kBAAY,GAAG,UAAC,EAAiD;gBACzE,IAAI,KAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE;oBAClC,KAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;iBAC9C;gBAED,IAAI,KAAI,CAAC,cAAc,CAAC,OAAO,IAAI,KAAI,CAAC,YAAY,EAAE;oBACpD,kHAAkH;oBAClH,IAAM,gBAAgB,GACpB,KAAI,CAAC,YAAY,CAAC,KAAK,KAAK,EAAE,IAAI,KAAI,CAAC,YAAY,CAAC,KAAK,KAAK,KAAI,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,CAAC;oBACtG,KAAI,CAAC,cAAc,CAAC,OAAO,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;iBAC1D;YACH,CAAC,CAAC;YAEF,+GAA+G;YAC/G,kHAAkH;YACxG,iBAAW,GAAG,UAAC,EAAoC;gBAC3D,mDAAmD;gBACnD,IAAI,EAAE,CAAC,KAAK,KAAK,oBAAQ,CAAC,SAAS,EAAE;oBACnC,OAAO;iBACR;gBAED,IAAI,KAAI,CAAC,iBAAiB,CAAC,OAAO,IAAI,KAAI,CAAC,KAAK,CAAC,MAAM,EAAE;oBACvD,IACE,KAAI,CAAC,KAAK,CAAC,OAAO;wBAClB,CAAC,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,eAAe;wBACnC,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,KAAK,EAAE,CAAC,aAAa,CAAC,aAAa,CAAC,aAAa;wBAC/E,KAAI,CAAC,KAAK,CAAC,OAAoB,CAAC,cAAc,KAAK,CAAC,EACrD;wBACA,IAAI,KAAI,CAAC,cAAc,CAAC,OAAO,EAAE;4BAC/B,KAAI,CAAC,cAAc,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;yBAC1C;wBACD,EAAE,CAAC,cAAc,EAAE,CAAC;wBACpB,KAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,YAAY,CAAC,KAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;wBACnE,KAAI,CAAC,uBAAuB,EAAE,CAAC;qBAChC;yBAAM,IAAI,KAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,gBAAgB,EAAE,EAAE;wBAC5D,IAAI,KAAI,CAAC,cAAc,CAAC,OAAO,EAAE;4BAC/B,KAAI,CAAC,cAAc,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;yBAC1C;wBACD,EAAE,CAAC,cAAc,EAAE,CAAC;wBACpB,KAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,mBAAmB,EAAE,CAAC;wBACrD,KAAI,CAAC,uBAAuB,EAAE,CAAC;qBAChC;iBACF;YACH,CAAC,CAAC;YAEQ,YAAM,GAAG,UAAC,EAAqC;gBACvD,IAAI,KAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE;oBAClC,4CAA4C;oBAC5C,KAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;iBAC3C;YACH,CAAC,CAAC;YAEQ,aAAO,GAAG,UAAC,EAAqD;gBACxE,IAAI,KAAI,CAAC,KAAK,CAAC,OAAO,EAAE;oBACtB,IAAM,SAAS,GAAG,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;oBACnD,EAAE,CAAC,cAAc,EAAE,CAAC;oBACpB,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;iBAC/B;YACH,CAAC,CAAC;YAEQ,2BAAqB,GAAG,UAAC,IAAO;gBACxC,IAAM,0BAA0B,GAAG,KAAI,CAAC,KAAK,CAAC,0BAA0B,CAAC;gBACzE,IAAM,WAAW,GAAG,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC;gBAC3C,IAAI,0BAA0B,KAAK,SAAS,IAAI,0BAA0B,KAAK,WAAW,EAAE;oBAC1F,IAAM,aAAa,GAA8B,KAAI,CAAC,KAAK,CAAC,cAAc;wBACxE,CAAC,CAAE,KAAI,CAAC,KAAK,CAAC,cAAsB,CAAC,IAAI,CAAC;wBAC1C,CAAC,CAAC,IAAI,CAAC;oBAET,IAAI,aAAa,KAAK,IAAI,EAAE;wBAC1B,OAAO;qBACR;oBAED,IAAM,mBAAmB,GAAM,aAAkB,CAAC;oBAClD,IAAM,wBAAwB,GAAmB,aAA+B,CAAC;oBAEjF,IAAI,SAAU,CAAC;oBACf,IAAI,wBAAwB,IAAI,wBAAwB,CAAC,IAAI,EAAE;wBAC7D,wBAAwB,CAAC,IAAI,CAAC,UAAC,qBAAwB;4BACrD,SAAO,GAAG,qBAAqB,CAAC;4BAChC,KAAI,CAAC,iBAAiB,CAAC,SAAO,CAAC,CAAC;wBAClC,CAAC,CAAC,CAAC;qBACJ;yBAAM;wBACL,SAAO,GAAG,mBAAmB,CAAC;wBAC9B,KAAI,CAAC,iBAAiB,CAAC,SAAO,CAAC,CAAC;qBACjC;iBACF;YACH,CAAC,CAAC;YAEQ,6BAAuB,GAAG;gBAClC,KAAI,CAAC,KAAK,EAAE,CAAC;YACf,CAAC,CAAC;YAEF;;;;;;;;eAQG;YACK,iCAA2B,GAAG;gBACpC,KAAI,CAAC,WAAW,EAAE,CAAC;YACrB,CAAC,CAAC;YAzPA,kCAAsB,CAAC,KAAI,CAAC,CAAC;YAC7B,KAAI,CAAC,SAAS,GAAG,IAAI,qBAAS,CAAC,EAAE,kBAAkB,EAAE,cAAM,OAAA,KAAI,CAAC,iBAAiB,EAAE,EAAxB,CAAwB,EAAE,CAAC,CAAC;YAEvF,KAAI,CAAC,KAAK,GAAG;gBACX,WAAW,EAAE,EAAE;aAChB,CAAC;;QACJ,CAAC;QAED,sBAAW,qCAAK;iBAAhB;;gBACE,OAAO,MAAA,MAAA,MAAA,IAAI,CAAC,KAAK,CAAC,aAAa,mCAAI,MAAA,IAAI,CAAC,iBAAiB,CAAC,OAAO,0CAAE,KAAK,mCAAI,IAAI,CAAC,KAAK,CAAC,oBAAoB,mCAAI,IAAI,CAAC;YACtH,CAAC;;;WAAA;QAEM,8CAAiB,GAAxB;YACE,IAAI,CAAC,WAAW,EAAE,CAAC;QACrB,CAAC;QAEM,kCAAK,GAAZ;YACE,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;gBACtB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;aAC5B;QACH,CAAC;QAEM,uCAAU,GAAjB;YACE,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;gBACtB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;aAC5B;QACH,CAAC;QAED,sBAAW,4CAAY;iBAAvB;gBACE,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC;YAC/D,CAAC;;;WAAA;QAED,sBAAW,gDAAgB;iBAA3B;gBACE,OAAO,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;YACjG,CAAC;;;WAAA;QAEM,mCAAM,GAAb;YACQ,IAAA,KAAsD,IAAI,CAAC,KAAK,EAA9D,SAAS,eAAA,EAAE,UAAU,gBAAA,EAAE,QAAQ,cAAA,EAAE,cAAc,oBAAe,CAAC;YACvE,IAAM,gBAAgB,GACpB,IAAI,CAAC,cAAc,CAAC,OAAO,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,8BAA8B,KAAK,CAAC,CAAC;gBAC9F,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,8BAA8B;gBACrE,CAAC,CAAC,SAAS,CAAC;YAChB,IAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC,KAAK,CAAC;YAExG,OAAO,CACL,6BACE,GAAG,EAAE,IAAI,CAAC,IAAI,EACd,SAAS,EAAE,eAAG,CAAC,qCAAqC,EAAE,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,EACjF,SAAS,EAAE,IAAI,CAAC,WAAW,EAC3B,MAAM,EAAE,IAAI,CAAC,MAAM;gBAEnB,oBAAC,qBAAS,qBAAC,SAAS,EAAE,8BAAkB,CAAC,aAAa,IAAM,cAAc;oBACxE,oBAAC,yBAAa,IAAC,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,aAAa,EAAE,yBAAa,CAAC,QAAQ;wBAC7E,6BAAK,SAAS,EAAE,eAAG,CAAC,oBAAoB,EAAE,MAAM,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,MAAM;4BACvE,IAAI,CAAC,KAAK,CAAC,eAAe;4BAC1B,IAAI,CAAC,uBAAuB,EAAE;4BAC9B,IAAI,CAAC,WAAW,EAAE,IAAI,CACrB,oBAAC,mBAAQ,uBACF,UAA0B,IAC/B,SAAS,EAAE,eAAG,CAAC,qBAAqB,EAAE,MAAM,CAAC,WAAW,CAAC,EACzD,GAAG,EAAE,IAAI,CAAC,KAAK,EACf,OAAO,EAAE,IAAI,CAAC,YAAY,EAC1B,OAAO,EAAE,IAAI,CAAC,YAAY,EAC1B,kBAAkB,EAAE,IAAI,CAAC,aAAa,2BACf,gBAAgB,eAC5B,UAAU,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,SAAS,mBACtC,UAAU,mBACX,MAAM,EACpB,IAAI,EAAC,UAAU,EACf,QAAQ,EAAE,QAAQ,EAClB,OAAO,EAAE,IAAI,CAAC,OAAO,IACrB,CACH,CACG,CACQ,CACN;gBACX,IAAI,CAAC,oBAAoB,EAAE,CACxB,CACP,CAAC;QACJ,CAAC;QACD,sBAAc,mDAAmB;iBAAjC;gBACE,OAAO,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC;YACxC,CAAC;;;WAAA;QAED,sBAAc,sDAAsB;iBAApC;gBACE,OAAO,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC;YAC3C,CAAC;;;WAAA;QAMS,wCAAW,GAArB;YACU,IAAA,SAAS,GAAK,IAAI,CAAC,KAAK,UAAf,CAAgB;YACjC,OAAO,SAAS,KAAK,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,SAAS,CAAC;QAClE,CAAC;QAES,iDAAoB,GAA9B;YACE,IAAM,cAAc,GAAqD,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC;YAC3G,OAAO,CACL,oBAAC,cAAc,qBACb,YAAY,EAAE,IAAI,CAAC,cAAc,EACjC,QAAQ,EAAE,IAAI,CAAC,qBAAqB,EACpC,mBAAmB,EAAE,IAAI,CAAC,2BAA2B,EACrD,kBAAkB,EAAE,IAAI,CAAC,2BAA2B,EACpD,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,EAC9E,aAAa,EAAE,IAAI,CAAC,KAAK,EACzB,eAAe,EAAE,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,SAAS,IAChF,IAAI,CAAC,mBAAmB,EAC5B,CACH,CAAC;QACJ,CAAC;QAES,oDAAuB,GAAjC;YACE,IAAM,aAAa,GAAwD,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC;YAC5G,OAAO,CACL,oBAAC,aAAa,qBACZ,YAAY,EAAE,IAAI,CAAC,iBAAiB,EACpC,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,EAC9E,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,SAAS,IAC5E,IAAI,CAAC,sBAAsB,EAC/B,CACH,CAAC;QACJ,CAAC;QA+HO,8CAAiB,GAAzB,UAA0B,OAAU;YAClC,wEAAwE;YACxE,4CAA4C;YAC5C,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;gBAC1B,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;aACjC;YAED,IAAI,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE;gBAClC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;aACpD;YAED,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;gBACtB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;aAC5B;YAED,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;gBAC/B,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;aAC1C;YAED,IAAI,CAAC,KAAK,EAAE,CAAC;QACf,CAAC;QACH,yBAAC;IAAD,CAAC,AA7RD,CACU,KAAK,CAAC,SAAS,GA4RxB;IA7RY,gDAAkB","sourcesContent":["import * as React from 'react';\nimport { KeyCodes, css, initializeComponentRef } from '../../Utilities';\nimport { Autofill } from '../../Autofill';\nimport * as stylesImport from './BaseExtendedPicker.scss';\nimport { BaseFloatingPicker } from '../../FloatingPicker';\nimport { BaseSelectedItemsList } from '../../SelectedItemsList';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../Selection';\nimport type { IInputProps } from '../../Pickers';\nimport type { IBaseExtendedPickerProps, IBaseExtendedPicker } from './BaseExtendedPicker.types';\nimport type { IBaseFloatingPickerProps } from '../../FloatingPicker';\nimport type { IBaseSelectedItemsListProps } from '../../SelectedItemsList';\n\nconst styles: any = stylesImport;\n\nexport interface IBaseExtendedPickerState<T> {\n  queryString: string | null;\n}\n\nexport class BaseExtendedPicker<T, P extends IBaseExtendedPickerProps<T>>\n  extends React.Component<P, IBaseExtendedPickerState<T>>\n  implements IBaseExtendedPicker<T> {\n  public floatingPicker = React.createRef<BaseFloatingPicker<T, IBaseFloatingPickerProps<T>>>();\n  public selectedItemsList = React.createRef<BaseSelectedItemsList<T, IBaseSelectedItemsListProps<T>>>();\n\n  protected root = React.createRef<HTMLDivElement>();\n  protected input = React.createRef<Autofill>();\n  protected selection: Selection;\n\n  constructor(basePickerProps: P) {\n    super(basePickerProps);\n\n    initializeComponentRef(this);\n    this.selection = new Selection({ onSelectionChanged: () => this.onSelectionChange() });\n\n    this.state = {\n      queryString: '',\n    };\n  }\n\n  public get items(): any {\n    return this.props.selectedItems ?? this.selectedItemsList.current?.items ?? this.props.defaultSelectedItems ?? null;\n  }\n\n  public componentDidMount(): void {\n    this.forceUpdate();\n  }\n\n  public focus(): void {\n    if (this.input.current) {\n      this.input.current.focus();\n    }\n  }\n\n  public clearInput(): void {\n    if (this.input.current) {\n      this.input.current.clear();\n    }\n  }\n\n  public get inputElement(): HTMLInputElement | null {\n    return this.input.current && this.input.current.inputElement;\n  }\n\n  public get highlightedItems(): T[] {\n    return this.selectedItemsList.current ? this.selectedItemsList.current.highlightedItems() : [];\n  }\n\n  public render(): JSX.Element {\n    const { className, inputProps, disabled, focusZoneProps } = this.props;\n    const activeDescendant =\n      this.floatingPicker.current && this.floatingPicker.current.currentSelectedSuggestionIndex !== -1\n        ? 'sug-' + this.floatingPicker.current.currentSelectedSuggestionIndex\n        : undefined;\n    const isExpanded = this.floatingPicker.current ? this.floatingPicker.current.isSuggestionsShown : false;\n\n    return (\n      <div\n        ref={this.root}\n        className={css('ms-BasePicker ms-BaseExtendedPicker', className ? className : '')}\n        onKeyDown={this.onBackspace}\n        onCopy={this.onCopy}\n      >\n        <FocusZone direction={FocusZoneDirection.bidirectional} {...focusZoneProps}>\n          <SelectionZone selection={this.selection} selectionMode={SelectionMode.multiple}>\n            <div className={css('ms-BasePicker-text', styles.pickerText)} role={'list'}>\n              {this.props.headerComponent}\n              {this.renderSelectedItemsList()}\n              {this.canAddItems() && (\n                <Autofill\n                  {...(inputProps as IInputProps)}\n                  className={css('ms-BasePicker-input', styles.pickerInput)}\n                  ref={this.input}\n                  onFocus={this.onInputFocus}\n                  onClick={this.onInputClick}\n                  onInputValueChange={this.onInputChange}\n                  aria-activedescendant={activeDescendant}\n                  aria-owns={isExpanded ? 'suggestion-list' : undefined}\n                  aria-expanded={isExpanded}\n                  aria-haspopup=\"true\"\n                  role=\"combobox\"\n                  disabled={disabled}\n                  onPaste={this.onPaste}\n                />\n              )}\n            </div>\n          </SelectionZone>\n        </FocusZone>\n        {this.renderFloatingPicker()}\n      </div>\n    );\n  }\n  protected get floatingPickerProps(): IBaseFloatingPickerProps<T> {\n    return this.props.floatingPickerProps;\n  }\n\n  protected get selectedItemsListProps(): IBaseSelectedItemsListProps<T> {\n    return this.props.selectedItemsListProps;\n  }\n\n  protected onSelectionChange = (): void => {\n    this.forceUpdate();\n  };\n\n  protected canAddItems(): boolean {\n    const { itemLimit } = this.props;\n    return itemLimit === undefined || this.items.length < itemLimit;\n  }\n\n  protected renderFloatingPicker(): JSX.Element {\n    const FloatingPicker: React.ComponentType<IBaseFloatingPickerProps<T>> = this.props.onRenderFloatingPicker;\n    return (\n      <FloatingPicker\n        componentRef={this.floatingPicker}\n        onChange={this._onSuggestionSelected}\n        onSuggestionsHidden={this._onSuggestionsShownOrHidden}\n        onSuggestionsShown={this._onSuggestionsShownOrHidden}\n        inputElement={this.input.current ? this.input.current.inputElement : undefined}\n        selectedItems={this.items}\n        suggestionItems={this.props.suggestionItems ? this.props.suggestionItems : undefined}\n        {...this.floatingPickerProps}\n      />\n    );\n  }\n\n  protected renderSelectedItemsList(): JSX.Element {\n    const SelectedItems: React.ComponentType<IBaseSelectedItemsListProps<T>> = this.props.onRenderSelectedItems;\n    return (\n      <SelectedItems\n        componentRef={this.selectedItemsList}\n        selection={this.selection}\n        selectedItems={this.props.selectedItems ? this.props.selectedItems : undefined}\n        onItemsDeleted={this.props.selectedItems ? this.props.onItemsRemoved : undefined}\n        {...this.selectedItemsListProps}\n      />\n    );\n  }\n\n  protected onInputChange = (value: string, composing?: boolean): void => {\n    // We don't want to update the picker's suggestions when the input is still being composed\n    if (!composing) {\n      this.setState({ queryString: value });\n      if (this.floatingPicker.current) {\n        this.floatingPicker.current.onQueryStringChanged(value);\n      }\n    }\n  };\n\n  protected onInputFocus = (ev: React.FocusEvent<HTMLInputElement | Autofill>): void => {\n    if (this.selectedItemsList.current) {\n      this.selectedItemsList.current.unselectAll();\n    }\n\n    if (this.props.inputProps && this.props.inputProps.onFocus) {\n      this.props.inputProps.onFocus(ev as React.FocusEvent<HTMLInputElement>);\n    }\n  };\n\n  protected onInputClick = (ev: React.MouseEvent<HTMLInputElement | Autofill>): void => {\n    if (this.selectedItemsList.current) {\n      this.selectedItemsList.current.unselectAll();\n    }\n\n    if (this.floatingPicker.current && this.inputElement) {\n      // Update the value if the input value is empty or is different than the current inputText from the floatingPicker\n      const shoudUpdateValue =\n        this.inputElement.value === '' || this.inputElement.value !== this.floatingPicker.current.inputText;\n      this.floatingPicker.current.showPicker(shoudUpdateValue);\n    }\n  };\n\n  // This is protected because we may expect the backspace key to work differently in a different kind of picker.\n  // This lets the subclass override it and provide it's own onBackspace. For an example see the BasePickerListBelow\n  protected onBackspace = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which !== KeyCodes.backspace) {\n      return;\n    }\n\n    if (this.selectedItemsList.current && this.items.length) {\n      if (\n        this.input.current &&\n        !this.input.current.isValueSelected &&\n        this.input.current.inputElement === ev.currentTarget.ownerDocument.activeElement &&\n        (this.input.current as Autofill).cursorLocation === 0\n      ) {\n        if (this.floatingPicker.current) {\n          this.floatingPicker.current.hidePicker();\n        }\n        ev.preventDefault();\n        this.selectedItemsList.current.removeItemAt(this.items.length - 1);\n        this._onSelectedItemsChanged();\n      } else if (this.selectedItemsList.current.hasSelectedItems()) {\n        if (this.floatingPicker.current) {\n          this.floatingPicker.current.hidePicker();\n        }\n        ev.preventDefault();\n        this.selectedItemsList.current.removeSelectedItems();\n        this._onSelectedItemsChanged();\n      }\n    }\n  };\n\n  protected onCopy = (ev: React.ClipboardEvent<HTMLElement>): void => {\n    if (this.selectedItemsList.current) {\n      // Pass it down into the selected items list\n      this.selectedItemsList.current.onCopy(ev);\n    }\n  };\n\n  protected onPaste = (ev: React.ClipboardEvent<Autofill | HTMLInputElement>): void => {\n    if (this.props.onPaste) {\n      const inputText = ev.clipboardData.getData('Text');\n      ev.preventDefault();\n      this.props.onPaste(inputText);\n    }\n  };\n\n  protected _onSuggestionSelected = (item: T): void => {\n    const currentRenderedQueryString = this.props.currentRenderedQueryString;\n    const queryString = this.state.queryString;\n    if (currentRenderedQueryString === undefined || currentRenderedQueryString === queryString) {\n      const processedItem: T | PromiseLike<T> | null = this.props.onItemSelected\n        ? (this.props.onItemSelected as any)(item)\n        : item;\n\n      if (processedItem === null) {\n        return;\n      }\n\n      const processedItemObject: T = processedItem as T;\n      const processedItemPromiseLike: PromiseLike<T> = processedItem as PromiseLike<T>;\n\n      let newItem: T;\n      if (processedItemPromiseLike && processedItemPromiseLike.then) {\n        processedItemPromiseLike.then((resolvedProcessedItem: T) => {\n          newItem = resolvedProcessedItem;\n          this._addProcessedItem(newItem);\n        });\n      } else {\n        newItem = processedItemObject;\n        this._addProcessedItem(newItem);\n      }\n    }\n  };\n\n  protected _onSelectedItemsChanged = (): void => {\n    this.focus();\n  };\n\n  /**\n   * The floating picker is the source of truth for if the menu has been opened or not.\n   *\n   * Because this isn't tracked inside the state of this component, we need to\n   * force an update here to keep the rendered output that depends on the picker being open\n   * in sync with the state\n   *\n   * Called when the suggestions is shown or closed\n   */\n  private _onSuggestionsShownOrHidden = () => {\n    this.forceUpdate();\n  };\n\n  private _addProcessedItem(newItem: T) {\n    // If this is a controlled component, call the on item selected callback\n    // Otherwise add it to the selectedItemsList\n    if (this.props.onItemAdded) {\n      this.props.onItemAdded(newItem);\n    }\n\n    if (this.selectedItemsList.current) {\n      this.selectedItemsList.current.addItems([newItem]);\n    }\n\n    if (this.input.current) {\n      this.input.current.clear();\n    }\n\n    if (this.floatingPicker.current) {\n      this.floatingPicker.current.hidePicker();\n    }\n\n    this.focus();\n  }\n}\n"]}
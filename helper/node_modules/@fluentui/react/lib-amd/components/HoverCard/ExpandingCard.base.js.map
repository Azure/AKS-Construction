{"version":3,"file":"ExpandingCard.base.js","sourceRoot":"../src/","sources":["components/HoverCard/ExpandingCard.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, KeyCodes, Async, initializeComponentRef } from '../../Utilities';\nimport { ExpandingCardMode } from './ExpandingCard.types';\nimport { CardCallout } from './CardCallout/CardCallout';\nimport type { IExpandingCardProps, IExpandingCardStyles, IExpandingCardStyleProps } from './ExpandingCard.types';\n\nconst getClassNames = classNamesFunction<IExpandingCardStyleProps, IExpandingCardStyles>();\n\nexport interface IExpandingCardState {\n  firstFrameRendered: boolean;\n  needsScroll: boolean;\n}\n\nexport class ExpandingCardBase extends React.Component<IExpandingCardProps, IExpandingCardState> {\n  public static defaultProps = {\n    compactCardHeight: 156,\n    expandedCardHeight: 384,\n    directionalHintFixed: true,\n  };\n\n  private _classNames: { [key in keyof IExpandingCardStyles]: string };\n  private _expandedElem = React.createRef<HTMLDivElement>();\n  private _async: Async;\n\n  constructor(props: IExpandingCardProps) {\n    super(props);\n\n    this._async = new Async(this);\n    initializeComponentRef(this);\n\n    this.state = {\n      firstFrameRendered: false,\n      needsScroll: false,\n    };\n  }\n\n  public componentDidMount(): void {\n    this._checkNeedsScroll();\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n  }\n\n  public render(): JSX.Element {\n    const { styles, compactCardHeight, expandedCardHeight, theme, mode, className } = this.props;\n    const { needsScroll, firstFrameRendered } = this.state;\n\n    const finalHeight = compactCardHeight! + expandedCardHeight!;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      compactCardHeight,\n      className,\n      expandedCardHeight,\n      needsScroll: needsScroll,\n      expandedCardFirstFrameRendered: mode === ExpandingCardMode.expanded && firstFrameRendered,\n    });\n\n    const content: JSX.Element = (\n      <div onMouseEnter={this.props.onEnter} onMouseLeave={this.props.onLeave} onKeyDown={this._onKeyDown}>\n        {this._onRenderCompactCard()}\n        {this._onRenderExpandedCard()}\n      </div>\n    );\n\n    return (\n      <CardCallout {...this.props} content={content} finalHeight={finalHeight} className={this._classNames.root} />\n    );\n  }\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which === KeyCodes.escape) {\n      this.props.onLeave && this.props.onLeave(ev);\n    }\n  };\n\n  private _onRenderCompactCard = (): JSX.Element => {\n    return <div className={this._classNames.compactCard}>{this.props.onRenderCompactCard!(this.props.renderData)}</div>;\n  };\n\n  private _onRenderExpandedCard = (): JSX.Element => {\n    // firstFrameRendered helps in initially setting height of expanded card to 1px, even if mode prop is set to\n    // ExpandingCardMode.expanded on first render. This is to make sure transition animation takes place.\n    !this.state.firstFrameRendered &&\n      this._async.requestAnimationFrame(() => {\n        this.setState({\n          firstFrameRendered: true,\n        });\n      });\n\n    return (\n      <div className={this._classNames.expandedCard} ref={this._expandedElem}>\n        <div className={this._classNames.expandedCardScroll}>\n          {this.props.onRenderExpandedCard && this.props.onRenderExpandedCard(this.props.renderData)}\n        </div>\n      </div>\n    );\n  };\n\n  private _checkNeedsScroll = (): void => {\n    const { expandedCardHeight } = this.props;\n    this._async.requestAnimationFrame(() => {\n      if (this._expandedElem.current && this._expandedElem.current.scrollHeight >= expandedCardHeight!) {\n        this.setState({\n          needsScroll: true,\n        });\n      }\n    });\n  };\n}\n"]}
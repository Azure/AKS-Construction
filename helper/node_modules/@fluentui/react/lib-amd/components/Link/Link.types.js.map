{"version":3,"file":"Link.types.js","sourceRoot":"../src/","sources":["components/Link/Link.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { IStyle, ITheme } from '@fluentui/style-utilities';\nimport type { IRefObject, IStyleFunctionOrObject } from '@fluentui/utilities';\n\n/**\n * {@docCategory Link}\n */\nexport interface ILink {\n  /** Sets focus to the link. */\n  focus(): void;\n}\n\n/**\n * @deprecated No longer used.\n */\nexport interface ILinkHTMLAttributes<T> extends React.HTMLAttributes<T> {\n  // Shared\n  type?: string;\n\n  // Anchor\n  download?: any;\n  href?: string;\n  hrefLang?: string;\n  media?: string;\n  rel?: string;\n  target?: string;\n\n  // Button\n  autoFocus?: boolean;\n  disabled?: boolean;\n  form?: string;\n  formAction?: string;\n  formEncType?: string;\n  formMethod?: string;\n  formNoValidate?: boolean;\n  formTarget?: string;\n  name?: string;\n  value?: string | string[] | number;\n\n  /** Any other props for HTMLElements or a React component passed to `as` */\n  [key: string]: any;\n}\n\n/**\n * Link component props. All built-in props for `<a>` and `<button>` are supported (including\n * various event handlers) even if not listed below.\n * {@docCategory Link}\n */\nexport interface ILinkProps\n  extends React.AnchorHTMLAttributes<HTMLAnchorElement | HTMLButtonElement | HTMLElement>,\n    Omit<React.ButtonHTMLAttributes<HTMLAnchorElement | HTMLButtonElement | HTMLElement>, 'type'>,\n    React.RefAttributes<HTMLElement> {\n  /**\n   * Optional callback to access the ILink interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ILink>;\n\n  /**\n   * URL the link points to. If not provided, the link renders as a button (unless that behavior is\n   * overridden using `as`).\n   */\n  href?: string;\n\n  /**\n   * Where to open the linked URL. Common values are `_blank` (a new tab or window),\n   * `_self` (the current window/context), `_parent`, and `_top`.\n   */\n  target?: string;\n\n  /**\n   * Relationship to the linked URL (can be a space-separated list).\n   * Most common values are `noreferrer` and/or `noopener`.\n   */\n  rel?: string;\n\n  /**\n   * Click handler for the link.\n   */\n  onClick?: (event: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement | HTMLElement>) => void;\n\n  /**\n   * Whether the link is disabled\n   */\n  disabled?: boolean;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ILinkStyleProps, ILinkStyles>;\n\n  /**\n   * Theme (provided through customization.)\n   */\n  theme?: ITheme;\n\n  /**\n   * A component type or primitive that is rendered as the type of the root element.\n   */\n  as?: React.ElementType;\n\n  /**\n   * Built-in HTML attribute with different behavior depending on how the link is rendered.\n   * If rendered as `<a>`, hints at the MIME type.\n   * If rendered as `<button>`, override the type of button (`button` is the default).\n   */\n  type?: string;\n\n  /**\n   * Whether the link is styled with an underline or not.\n   * Should be used when the link is placed alongside other text content.\n   */\n  underline?: boolean;\n\n  /** Any other props for elements or a React component passed to `as` */\n  [key: string]: any;\n}\n\n/**\n * {@docCategory Link}\n */\nexport interface ILinkStyleProps {\n  className?: string;\n  isButton?: boolean;\n  isDisabled?: boolean;\n  isUnderlined?: boolean;\n  theme: ITheme;\n}\n\n/**\n * {@docCategory Link}\n */\nexport interface ILinkStyles {\n  root: IStyle;\n}\n"]}
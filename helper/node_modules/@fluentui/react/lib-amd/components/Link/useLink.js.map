{"version":3,"file":"useLink.js","sourceRoot":"../src/","sources":["components/Link/useLink.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useMergedRefs } from '@fluentui/react-hooks';\nimport { classNamesFunction, useFocusRects } from '@fluentui/utilities';\nimport type { ILink, ILinkProps, ILinkStyleProps, ILinkStyles } from './Link.types';\n\nconst getClassNames = classNamesFunction<ILinkStyleProps, ILinkStyles>();\n\n/**\n * The useLink hook processes the Link component props and returns\n * state, slots and slotProps for consumption by the component.\n */\nexport const useLink = (props: ILinkProps, forwardedRef: React.Ref<HTMLElement>): any => {\n  const { as, className, disabled, href, onClick, styles, theme, underline } = props;\n  const rootRef = React.useRef<HTMLDivElement | null>(null);\n  const mergedRootRefs: React.Ref<HTMLElement> = useMergedRefs(rootRef, forwardedRef);\n\n  useComponentRef(props, rootRef);\n  useFocusRects(rootRef);\n\n  const classNames = getClassNames(styles!, {\n    className,\n    isButton: !href,\n    isDisabled: disabled,\n    isUnderlined: underline,\n    theme: theme!,\n  });\n\n  const _onClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n    if (disabled) {\n      ev.preventDefault();\n    } else if (onClick) {\n      onClick(ev);\n    }\n  };\n\n  const rootType = as ? as : href ? 'a' : 'button';\n\n  const state = {};\n  const slots = { root: rootType };\n  const slotProps = {\n    root: {\n      ...adjustPropsForRootType(rootType, props),\n      'aria-disabled': disabled,\n      className: classNames.root,\n      onClick: _onClick,\n      ref: mergedRootRefs,\n    },\n  };\n\n  return { state, slots, slotProps };\n};\n\nconst useComponentRef = (props: ILinkProps, link: React.RefObject<ILink>) => {\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      focus() {\n        if (link.current) {\n          link.current.focus();\n        }\n      },\n    }),\n    [link],\n  );\n};\n\nconst adjustPropsForRootType = (\n  RootType: string | React.ComponentClass | React.FunctionComponent,\n  props: ILinkProps & { getStyles?: any },\n): Partial<ILinkProps> => {\n  // Deconstruct the props so we remove props like `as`, `theme` and `styles`\n  // as those will always be removed. We also take some props that are optional\n  // based on the RootType.\n  const { as, disabled, target, href, theme, getStyles, styles, componentRef, underline, ...restProps } = props;\n\n  // RootType will be a string if we're dealing with an html component\n  if (typeof RootType === 'string') {\n    // Remove the disabled prop for anchor elements\n    if (RootType === 'a') {\n      return {\n        target,\n        href: disabled ? undefined : href,\n        ...restProps,\n      };\n    }\n\n    // Add the type='button' prop for button elements\n    if (RootType === 'button') {\n      return {\n        type: 'button',\n        disabled,\n        ...restProps,\n      };\n    }\n\n    // Remove the target and href props for all other non anchor elements\n    return { ...restProps, disabled };\n  }\n\n  // Retain all props except 'as' for ReactComponents\n  return { target, href, disabled, ...restProps };\n};\n"]}
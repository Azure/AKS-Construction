{"version":3,"file":"setVersion.js","sourceRoot":"../src/","sources":["setVersion.ts"],"names":[],"mappings":";;;;IAAA,wGAAwG;IACxG,+DAA+D;IAC/D,IAAM,aAAa,GAA+B,EAAE,CAAC;IAErD,oDAAoD;IACpD,IAAI,IAAI,GAAuB,SAAS,CAAC;IAEzC,IAAI;QACF,IAAI,GAAG,MAAM,CAAC;KACf;IAAC,OAAO,CAAC,EAAE;QACV,WAAW;KACZ;IAED,SAAgB,UAAU,CAAC,WAAmB,EAAE,cAAsB;QACpE,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;YAC/B,8DAA8D;YAC9D,IAAM,QAAQ,GAAG,CAAE,IAAY,CAAC,YAAY,GAAI,IAAY,CAAC,YAAY,IAAI,EAAE,CAAC,CAAC;YAEjF,4FAA4F;YAC5F,0CAA0C;YAC1C,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,EAAE;gBACzD,aAAa,CAAC,WAAW,CAAC,GAAG,cAAc,CAAC;gBAC5C,IAAM,QAAQ,GAAG,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,QAAQ,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC;gBACvE,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;aAC/B;SACF;IACH,CAAC;IAbD,gCAaC","sourcesContent":["// A packages cache that makes sure that we don't inject the same packageName twice in the same bundle -\n// this cache is local to the module closure inside this bundle\nconst packagesCache: { [name: string]: string } = {};\n\n// Cache access to window to avoid IE11 memory leak.\nlet _win: Window | undefined = undefined;\n\ntry {\n  _win = window;\n} catch (e) {\n  /* no-op */\n}\n\nexport function setVersion(packageName: string, packageVersion: string): void {\n  if (typeof _win !== 'undefined') {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const packages = ((_win as any).__packages__ = (_win as any).__packages__ || {});\n\n    // We allow either the global packages or local packages caches to invalidate so testing can\n    // just clear the global to set this state\n    if (!packages[packageName] || !packagesCache[packageName]) {\n      packagesCache[packageName] = packageVersion;\n      const versions = (packages[packageName] = packages[packageName] || []);\n      versions.push(packageVersion);\n    }\n  }\n}\n"]}
{"version":3,"file":"safeRequestAnimationFrame.js","sourceRoot":"../src/","sources":["safeRequestAnimationFrame.ts"],"names":[],"mappings":";;;;IAGA;;;;;OAKG;IACI,IAAM,yBAAyB,GAAG,UAAC,SAA0B;QAClE,IAAI,cAA2B,CAAC;QAEhC,OAAO,UAAC,EAAY;YAClB,IAAI,CAAC,cAAc,EAAE;gBACnB,cAAc,GAAG,IAAI,GAAG,EAAU,CAAC;gBAEnC,iCAAe,CAAC,SAAS,EAAE;oBACzB,oBAAoB,EAAE;wBACpB,cAAc,CAAC,OAAO,CAAC,UAAC,EAAU,IAAK,OAAA,oBAAoB,CAAC,EAAE,CAAC,EAAxB,CAAwB,CAAC,CAAC;oBACnE,CAAC;iBACF,CAAC,CAAC;aACJ;YAED,IAAM,SAAS,GAAG,qBAAqB,CAAC;gBACtC,cAAc,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;gBACjC,EAAE,EAAE,CAAC;YACP,CAAC,CAAC,CAAC;YAEH,cAAc,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAChC,CAAC,CAAC;IACJ,CAAC,CAAC;IArBW,QAAA,yBAAyB,6BAqBpC","sourcesContent":["import * as React from 'react';\nimport { extendComponent } from './extendComponent';\n\n/**\n * Generates a function to be attached to a React component, which can be called\n * as a replacement to RAF. In-flight async calls will be auto canceled if the component\n * is unmounting before the async code is executed, preventing bugs where code\n * accesses things within the component after being unmounted.\n */\nexport const safeRequestAnimationFrame = (component: React.Component): ((cb: Function) => void) => {\n  let activeTimeouts: Set<number>;\n\n  return (cb: Function) => {\n    if (!activeTimeouts) {\n      activeTimeouts = new Set<number>();\n\n      extendComponent(component, {\n        componentWillUnmount: () => {\n          activeTimeouts.forEach((id: number) => cancelAnimationFrame(id));\n        },\n      });\n    }\n\n    const timeoutId = requestAnimationFrame(() => {\n      activeTimeouts.delete(timeoutId);\n      cb();\n    });\n\n    activeTimeouts.add(timeoutId);\n  };\n};\n"]}
{"version":3,"file":"language.js","sourceRoot":"../src/","sources":["language.ts"],"names":[],"mappings":";;;;IAIA,4DAA4D;IAC5D,IAAI,SAAwB,CAAC;IAE7B,IAAM,WAAW,GAAG,UAAU,CAAC;IAE/B;;;OAGG;IACH,SAAgB,WAAW,CACzB,eAA8E;QAA9E,gCAAA,EAAA,kCAA8E;QAE9E,IAAI,SAAS,KAAK,SAAS,EAAE;YAC3B,IAAI,GAAG,GAAG,yBAAW,EAAE,CAAC;YACxB,IAAM,aAAa,GACjB,eAAe,KAAK,cAAc;gBAChC,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC;gBACnC,CAAC,CAAC,eAAe,KAAK,gBAAgB;oBACtC,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,WAAW,CAAC;oBACrC,CAAC,CAAC,SAAS,CAAC;YAEhB,IAAI,aAAa,EAAE;gBACjB,SAAS,GAAG,aAAa,CAAC;aAC3B;YAED,IAAI,SAAS,KAAK,SAAS,IAAI,GAAG,EAAE;gBAClC,SAAS,GAAG,GAAG,CAAC,eAAe,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;aACtD;YAED,IAAI,SAAS,KAAK,SAAS,EAAE;gBAC3B,SAAS,GAAG,IAAI,CAAC;aAClB;SACF;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IA1BD,kCA0BC;IAeD,SAAgB,WAAW,CACzB,QAAgB,EAChB,gBAAuE;QAEvE,IAAI,GAAG,GAAG,yBAAW,EAAE,CAAC;QAExB,IAAI,GAAG,EAAE;YACP,GAAG,CAAC,eAAe,CAAC,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;SACpD;QAED,IAAM,eAAe,GAAG,gBAAgB,KAAK,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,gBAAgB,CAAC;QACrH,IAAI,eAAe,KAAK,cAAc,EAAE;YACtC,YAAY,CAAC,OAAO,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;SAC7C;aAAM,IAAI,eAAe,KAAK,gBAAgB,EAAE;YAC/C,cAAc,CAAC,OAAO,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;SAC/C;QAED,SAAS,GAAG,QAAQ,CAAC;IACvB,CAAC;IAlBD,kCAkBC","sourcesContent":["import { getDocument } from './dom/getDocument';\nimport * as localStorage from './localStorage';\nimport * as sessionStorage from './sessionStorage';\n\n// Default to undefined so that we initialize on first read.\nlet _language: string | null;\n\nconst STORAGE_KEY = 'language';\n\n/**\n * Gets the language set for the page.\n * @param persistenceType - Where to persist the value. Default is `sessionStorage` if available.\n */\nexport function getLanguage(\n  persistenceType: 'localStorage' | 'sessionStorage' | 'none' = 'sessionStorage',\n): string | null {\n  if (_language === undefined) {\n    let doc = getDocument();\n    const savedLanguage =\n      persistenceType === 'localStorage'\n        ? localStorage.getItem(STORAGE_KEY)\n        : persistenceType === 'sessionStorage'\n        ? sessionStorage.getItem(STORAGE_KEY)\n        : undefined;\n\n    if (savedLanguage) {\n      _language = savedLanguage;\n    }\n\n    if (_language === undefined && doc) {\n      _language = doc.documentElement.getAttribute('lang');\n    }\n\n    if (_language === undefined) {\n      _language = 'en';\n    }\n  }\n\n  return _language;\n}\n\n/**\n * Sets the language for the page (by adjusting the lang attribute of the html element).\n * @param language - Language to set.\n * @param persistenceType - Where to persist the value. Default is `sessionStorage` if available.\n */\nexport function setLanguage(language: string, persistenceType?: 'localStorage' | 'sessionStorage' | 'none'): void;\n/**\n * Sets the language for the page (by adjusting the lang attribute of the html element).\n * @deprecated Use string parameter version.\n * @param language - Language to set.\n * @param avoidPersisting - If true, don't store the value.\n */\nexport function setLanguage(language: string, avoidPersisting?: boolean): void;\nexport function setLanguage(\n  language: string,\n  persistenceParam?: 'localStorage' | 'sessionStorage' | 'none' | boolean,\n): void {\n  let doc = getDocument();\n\n  if (doc) {\n    doc.documentElement.setAttribute('lang', language);\n  }\n\n  const persistenceType = persistenceParam === true ? 'none' : !persistenceParam ? 'sessionStorage' : persistenceParam;\n  if (persistenceType === 'localStorage') {\n    localStorage.setItem(STORAGE_KEY, language);\n  } else if (persistenceType === 'sessionStorage') {\n    sessionStorage.setItem(STORAGE_KEY, language);\n  }\n\n  _language = language;\n}\n"]}
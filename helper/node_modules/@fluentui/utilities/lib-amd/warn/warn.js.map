{"version":3,"file":"warn.js","sourceRoot":"../src/","sources":["warn/warn.ts"],"names":[],"mappings":"AAAA,+BAA+B;;;;;IAE/B,IAAI,gBAAgB,GAA4C,SAAS,CAAC;IAI1E;;;;;OAKG;IACH,SAAgB,IAAI,CAAC,OAAe;QAClC,IAAI,gBAAgB,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;YAC7D,gBAAgB,CAAC,OAAO,CAAC,CAAC;SAC3B;aAAM,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI,EAAE;YAClC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACvB;IACH,CAAC;IAND,oBAMC;IAED;;;;;;OAMG;IACH,SAAgB,kBAAkB,CAAC,eAA2C;QAC5E,gBAAgB,GAAG,eAAe,CAAC;IACrC,CAAC;IAFD,gDAEC","sourcesContent":["/* eslint-disable no-console */\n\nlet _warningCallback: ((message: string) => void) | undefined = undefined;\n\nexport type ISettingsMap<T> = { [P in keyof T]?: string };\n\n/**\n * Sends a warning to console, if the api is present.\n *\n * @public\n * @param message - Warning message.\n */\nexport function warn(message: string): void {\n  if (_warningCallback && process.env.NODE_ENV !== 'production') {\n    _warningCallback(message);\n  } else if (console && console.warn) {\n    console.warn(message);\n  }\n}\n\n/**\n * Configures the warning callback. Passing in undefined will reset it to use the default\n * console.warn function.\n *\n * @public\n * @param warningCallback - Callback to override the generated warnings.\n */\nexport function setWarningCallback(warningCallback?: (message: string) => void): void {\n  _warningCallback = warningCallback;\n}\n"]}
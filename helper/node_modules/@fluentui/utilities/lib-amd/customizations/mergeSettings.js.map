{"version":3,"file":"mergeSettings.js","sourceRoot":"../src/","sources":["customizations/mergeSettings.ts"],"names":[],"mappings":";;;;IAEA;;;;;;OAMG;IACH,SAAgB,aAAa,CAAC,WAA2B,EAAE,WAA2C;QAAxE,4BAAA,EAAA,gBAA2B;QACvD,IAAM,iBAAiB,GAAG,mBAAmB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;QAE3G,OAAO,iBAAiB,CAAC,WAAW,CAAC,CAAC;IACxC,CAAC;IAJD,sCAIC;IAED,SAAgB,mBAAmB,CACjC,WAA2B,EAC3B,WAA2C;QAD3C,4BAAA,EAAA,gBAA2B;QAG3B,IAAM,iBAAiB,GAAG,mBAAmB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,wBAAwB,CAAC,WAAW,CAAC,CAAC;QAEjH,OAAO,iBAAiB,CAAC,WAAW,CAAC,CAAC;IACxC,CAAC;IAPD,kDAOC;IAED,SAAS,mBAAmB,CAAC,QAAwC;QACnE,OAAO,OAAO,QAAQ,KAAK,UAAU,CAAC;IACxC,CAAC;IAED,SAAS,kBAAkB,CAAC,WAAoB;QAC9C,OAAO,UAAC,QAAmB,IAAK,OAAA,CAAC,WAAW,CAAC,CAAC,uCAAM,QAAQ,GAAK,WAAW,EAAG,CAAC,CAAC,QAAQ,CAAC,EAA1D,CAA0D,CAAC;IAC7F,CAAC;IAED,SAAS,wBAAwB,CAAC,uBAAuC;QAAvC,wCAAA,EAAA,4BAAuC;QACvE,OAAO,UAAC,iBAA4B;YAClC,IAAM,iBAAiB,wBAAmB,iBAAiB,CAAE,CAAC;YAE9D,KAAK,IAAI,SAAS,IAAI,uBAAuB,EAAE;gBAC7C,IAAI,uBAAuB,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;oBACrD,iBAAiB,CAAC,SAAS,CAAC,yCAAQ,iBAAiB,CAAC,SAAS,CAAC,GAAK,uBAAuB,CAAC,SAAS,CAAC,CAAE,CAAC;iBAC3G;aACF;YAED,OAAO,iBAAiB,CAAC;QAC3B,CAAC,CAAC;IACJ,CAAC","sourcesContent":["import type { ISettings, ISettingsFunction } from './Customizations';\n\n/**\n * Merge new and old settings, giving priority to new settings.\n * New settings is optional in which case oldSettings is returned as-is.\n * @param oldSettings - Old settings to fall back to.\n * @param newSettings - New settings that will be merged over oldSettings.\n * @returns Merged settings.\n */\nexport function mergeSettings(oldSettings: ISettings = {}, newSettings?: ISettings | ISettingsFunction): ISettings {\n  const mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _settingsMergeWith(newSettings);\n\n  return mergeSettingsWith(oldSettings);\n}\n\nexport function mergeScopedSettings(\n  oldSettings: ISettings = {},\n  newSettings?: ISettings | ISettingsFunction,\n): ISettings {\n  const mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _scopedSettingsMergeWith(newSettings);\n\n  return mergeSettingsWith(oldSettings);\n}\n\nfunction _isSettingsFunction(settings?: ISettings | ISettingsFunction): settings is ISettingsFunction {\n  return typeof settings === 'function';\n}\n\nfunction _settingsMergeWith(newSettings?: object): (settings: ISettings) => ISettings {\n  return (settings: ISettings) => (newSettings ? { ...settings, ...newSettings } : settings);\n}\n\nfunction _scopedSettingsMergeWith(scopedSettingsFromProps: ISettings = {}): (scopedSettings: ISettings) => ISettings {\n  return (oldScopedSettings: ISettings): ISettings => {\n    const newScopedSettings: ISettings = { ...oldScopedSettings };\n\n    for (let scopeName in scopedSettingsFromProps) {\n      if (scopedSettingsFromProps.hasOwnProperty(scopeName)) {\n        newScopedSettings[scopeName] = { ...oldScopedSettings[scopeName], ...scopedSettingsFromProps[scopeName] };\n      }\n    }\n\n    return newScopedSettings;\n  };\n}\n"]}
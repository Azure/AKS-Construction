{"version":3,"file":"mergeCustomizations.js","sourceRoot":"../src/","sources":["customizations/mergeCustomizations.ts"],"names":[],"mappings":";;;;IAIA;;;;;;OAMG;IACH,SAAgB,mBAAmB,CAAC,KAAuB,EAAE,aAAiC;QACpF,IAAA,KAA0D,CAAA,aAAa,IAAI,EAAE,CAAA,eAAxB,EAArD,cAAc,mBAAG,EAAE,QAAQ,EAAE,EAAE,EAAE,cAAc,EAAE,EAAE,EAAE,KAAA,CAAyB;QAEtF,OAAO;YACL,cAAc,EAAE;gBACd,QAAQ,EAAE,6BAAa,CAAC,cAAc,CAAC,QAAQ,EAAE,KAAK,CAAC,QAAQ,CAAC;gBAChE,cAAc,EAAE,mCAAmB,CAAC,cAAc,CAAC,cAAc,EAAE,KAAK,CAAC,cAAc,CAAC;gBACxF,mBAAmB,EAAE,IAAI;aAC1B;SACF,CAAC;IACJ,CAAC;IAVD,kDAUC","sourcesContent":["import { mergeSettings, mergeScopedSettings } from './mergeSettings';\nimport type { ICustomizerProps } from './Customizer.types';\nimport type { ICustomizerContext } from './CustomizerContext';\n\n/**\n * Merge props and customizations giving priority to props over context.\n * NOTE: This function will always perform multiple merge operations. Use with caution.\n * @param props - New settings to merge in.\n * @param parentContext - Context containing current settings.\n * @returns Merged customizations.\n */\nexport function mergeCustomizations(props: ICustomizerProps, parentContext: ICustomizerContext): ICustomizerContext {\n  const { customizations = { settings: {}, scopedSettings: {} } } = parentContext || {};\n\n  return {\n    customizations: {\n      settings: mergeSettings(customizations.settings, props.settings),\n      scopedSettings: mergeScopedSettings(customizations.scopedSettings, props.scopedSettings),\n      inCustomizerContext: true,\n    },\n  };\n}\n"]}
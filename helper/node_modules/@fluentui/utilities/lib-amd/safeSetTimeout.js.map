{"version":3,"file":"safeSetTimeout.js","sourceRoot":"../src/","sources":["safeSetTimeout.ts"],"names":[],"mappings":";;;;IAGA;;;;;OAKG;IACI,IAAM,cAAc,GAAG,UAAC,SAA0B;QACvD,IAAI,cAAiC,CAAC;QAEtC,OAAO,UAAC,EAAY,EAAE,QAAgB;YACpC,IAAI,CAAC,cAAc,EAAE;gBACnB,cAAc,GAAG,IAAI,GAAG,EAAgB,CAAC;gBAEzC,iCAAe,CAAC,SAAS,EAAE;oBACzB,oBAAoB,EAAE;wBACpB,cAAc,CAAC,OAAO,CAAC,UAAC,EAAgB,IAAK,OAAA,YAAY,CAAC,EAAE,CAAC,EAAhB,CAAgB,CAAC,CAAC;oBACjE,CAAC;iBACF,CAAC,CAAC;aACJ;YAED,IAAM,SAAS,GAAG,UAAU,CAAC;gBAC3B,cAAc,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;gBACjC,EAAE,EAAE,CAAC;YACP,CAAC,EAAE,QAAQ,CAAC,CAAC;YACb,cAAc,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAChC,CAAC,CAAC;IACJ,CAAC,CAAC;IApBW,QAAA,cAAc,kBAoBzB","sourcesContent":["import * as React from 'react';\nimport { extendComponent } from './extendComponent';\n\n/**\n * Generates a function to be attached to a React component, which can be called\n * as a replacement to setTimeout. In-flight async calls will be auto canceled if the component\n * is unmounting before the async code is executed, preventing bugs where code\n * accesses things within the component after being unmounted.\n */\nexport const safeSetTimeout = (component: React.Component) => {\n  let activeTimeouts: Set<NodeJS.Timer>;\n\n  return (cb: Function, duration: number) => {\n    if (!activeTimeouts) {\n      activeTimeouts = new Set<NodeJS.Timer>();\n\n      extendComponent(component, {\n        componentWillUnmount: () => {\n          activeTimeouts.forEach((id: NodeJS.Timer) => clearTimeout(id));\n        },\n      });\n    }\n\n    const timeoutId = setTimeout(() => {\n      activeTimeouts.delete(timeoutId);\n      cb();\n    }, duration);\n    activeTimeouts.add(timeoutId);\n  };\n};\n"]}
{"version":3,"file":"getNativeElementProps.js","sourceRoot":"../src/","sources":["getNativeElementProps.ts"],"names":[],"mappings":";;;AAAA,2CAuBsB;AAGtB,IAAM,gBAAgB,GAA2C;IAC/D,KAAK,EAAE,4BAAe;IACtB,KAAK,EAAE,4BAAe;IACtB,KAAK,EAAE,4BAAe;IACtB,EAAE,EAAE,yBAAY;IAChB,EAAE,EAAE,yBAAY;IAChB,CAAC,EAAE,6BAAgB;IACnB,MAAM,EAAE,6BAAgB;IACxB,KAAK,EAAE,4BAAe;IACtB,QAAQ,EAAE,+BAAkB;IAC5B,MAAM,EAAE,6BAAgB;IACxB,MAAM,EAAE,6BAAgB;IACxB,KAAK,EAAE,4BAAe;IACtB,EAAE,EAAE,yBAAY;IAChB,EAAE,EAAE,yBAAY;IAChB,EAAE,EAAE,yBAAY;IAChB,QAAQ,EAAE,+BAAkB;IAC5B,GAAG,EAAE,0BAAa;IAClB,IAAI,EAAE,2BAAc;IACpB,MAAM,EAAE,6BAAgB;IACxB,GAAG,EAAE,0BAAa;CACnB,CAAC;AAEF;;;;;;GAMG;AACH,8DAA8D;AAC9D,SAAgB,qBAAqB,CACnC,OAAe,EACf,KAAS,EACT,iBAA4B;IAE5B,IAAM,gBAAgB,GAAG,CAAC,OAAO,IAAI,gBAAgB,CAAC,OAAO,CAAC,CAAC,IAAI,kCAAqB,CAAC;IAEzF,OAAO,2BAAc,CAAC,KAAK,EAAE,gBAAgB,EAAE,iBAAiB,CAAC,CAAC;AACpE,CAAC;AARD,sDAQC","sourcesContent":["import {\n  labelProperties,\n  audioProperties,\n  videoProperties,\n  olProperties,\n  liProperties,\n  anchorProperties,\n  buttonProperties,\n  inputProperties,\n  textAreaProperties,\n  selectProperties,\n  optionProperties,\n  tableProperties,\n  trProperties,\n  thProperties,\n  tdProperties,\n  colGroupProperties,\n  colProperties,\n  formProperties,\n  iframeProperties,\n  imgProperties,\n  htmlElementProperties,\n  getNativeProps,\n} from './properties';\nimport * as React from 'react';\n\nconst nativeElementMap: Record<string, Record<string, number>> = {\n  label: labelProperties,\n  audio: audioProperties,\n  video: videoProperties,\n  ol: olProperties,\n  li: liProperties,\n  a: anchorProperties,\n  button: buttonProperties,\n  input: inputProperties,\n  textarea: textAreaProperties,\n  select: selectProperties,\n  option: optionProperties,\n  table: tableProperties,\n  tr: trProperties,\n  th: thProperties,\n  td: tdProperties,\n  colGroup: colGroupProperties,\n  col: colProperties,\n  form: formProperties,\n  iframe: iframeProperties,\n  img: imgProperties,\n};\n\n/**\n * Given an element tagname and user props, filters the props to only allowed props for the given\n * element type.\n * @param tagName - Tag name (e.g. \"div\")\n * @param props - Props object\n * @param excludedPropNames - List of props to disallow\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getNativeElementProps<TAttributes extends React.HTMLAttributes<any>>(\n  tagName: string,\n  props: {},\n  excludedPropNames?: string[],\n): TAttributes {\n  const allowedPropNames = (tagName && nativeElementMap[tagName]) || htmlElementProperties;\n\n  return getNativeProps(props, allowedPropNames, excludedPropNames);\n}\n"]}
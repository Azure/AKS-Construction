{"version":3,"file":"FocusRectsProvider.js","sourceRoot":"../src/","sources":["FocusRectsProvider.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,iDAAoD;AAc7C,IAAM,kBAAkB,GAAsC,UAAA,KAAK;IAChE,IAAA,WAAW,GAAgB,KAAK,YAArB,EAAE,SAAS,GAAK,KAAK,UAAV,CAAW;IAClC,IAAA,mBAAmB,GAAI,KAAK,CAAC,QAAQ,CAAiC,EAAE,CAAC,GAAtD,CAAuD;IACjF,IAAM,aAAa,GAAG,KAAK,CAAC,UAAU,CAAC,iCAAiB,CAAC,CAAC;IAE1D,wEAAwE;IACxE,uFAAuF;IACvF,2GAA2G;IAC3G,IAAM,oBAAoB,GAAG,aAAa,KAAK,SAAS,IAAI,CAAC,SAAS,CAAC;IAEvE,IAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAC3B;QACE,OAAA,oBAAoB;YAClB,CAAC,CAAC,SAAS;YACX,CAAC,CAAC;gBACE,WAAW,aAAA;gBACX,mBAAmB,qBAAA;gBACnB,gBAAgB,EAAE,UAAC,GAAiC;oBAClD,iFAAiF;oBACjF,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC9B,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,gBAAgB,CAAC,GAAG,CAAC,CAAC;gBACvC,CAAC;gBACD,kBAAkB,EAAE,UAAC,GAAiC;oBACpD,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,kBAAkB,CAAC,GAAG,CAAC,CAAC;oBACvC,IAAM,CAAC,GAAG,mBAAmB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;oBAC3C,IAAI,CAAC,IAAI,CAAC,EAAE;wBACV,mBAAmB,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;qBAClC;gBACH,CAAC;aACF;IAjBL,CAiBK,EACP,CAAC,WAAW,EAAE,mBAAmB,EAAE,aAAa,EAAE,oBAAoB,CAAC,CACxE,CAAC;IAEF,KAAK,CAAC,SAAS,CAAC;QACd,IAAI,OAAO,EAAE;YACX,OAAO,CAAC,gBAAgB,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YAC9C,OAAO,cAAM,OAAA,OAAO,CAAC,kBAAkB,CAAC,OAAO,CAAC,WAAW,CAAC,EAA/C,CAA+C,CAAC;SAC9D;IACH,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAEd,2EAA2E;IAC3E,IAAI,OAAO,EAAE;QACX,OAAO,oBAAC,iCAAiB,CAAC,QAAQ,IAAC,KAAK,EAAE,OAAO,IAAG,KAAK,CAAC,QAAQ,CAA8B,CAAC;KAClG;SAAM;QACL,OAAO,0CAAG,KAAK,CAAC,QAAQ,CAAI,CAAC;KAC9B;AACH,CAAC,CAAC;AA9CW,QAAA,kBAAkB,sBA8C7B","sourcesContent":["import * as React from 'react';\nimport { FocusRectsContext } from './useFocusRects';\n\nexport type FocusRectsProviderProps = {\n  /**\n   * Ref to the root element that this is providing focus rects for.\n   */\n  providerRef: React.RefObject<HTMLElement>;\n\n  /**\n   * Indicates that this is the root of a layer, and should not inherit the providerRef from a parent context.\n   */\n  layerRoot?: boolean;\n};\n\nexport const FocusRectsProvider: React.FC<FocusRectsProviderProps> = props => {\n  const { providerRef, layerRoot } = props;\n  const [registeredProviders] = React.useState<React.RefObject<HTMLElement>[]>([]);\n  const parentContext = React.useContext(FocusRectsContext);\n\n  // Inherit the parent context if it exists, unless this is a layer root.\n  // This allows the topmost provider element in the DOM tree to handle the focus events.\n  // Since layers are in a separate HTML tree from their parent, they shouldn't use the parent's providerRef.\n  const inheritParentContext = parentContext !== undefined && !layerRoot;\n\n  const context = React.useMemo(\n    () =>\n      inheritParentContext\n        ? undefined\n        : {\n            providerRef,\n            registeredProviders,\n            registerProvider: (ref: React.RefObject<HTMLElement>) => {\n              // Register this child provider with the current context, and any parent contexts\n              registeredProviders.push(ref);\n              parentContext?.registerProvider(ref);\n            },\n            unregisterProvider: (ref: React.RefObject<HTMLElement>) => {\n              parentContext?.unregisterProvider(ref);\n              const i = registeredProviders.indexOf(ref);\n              if (i >= 0) {\n                registeredProviders.splice(i, 1);\n              }\n            },\n          },\n    [providerRef, registeredProviders, parentContext, inheritParentContext],\n  );\n\n  React.useEffect(() => {\n    if (context) {\n      context.registerProvider(context.providerRef);\n      return () => context.unregisterProvider(context.providerRef);\n    }\n  }, [context]);\n\n  // Create a new context provider if this is not inheriting from the parent.\n  if (context) {\n    return <FocusRectsContext.Provider value={context}>{props.children}</FocusRectsContext.Provider>;\n  } else {\n    return <>{props.children}</>;\n  }\n};\n"]}
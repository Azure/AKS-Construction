{"version":3,"file":"elementContains.js","sourceRoot":"../src/","sources":["elementContains.ts"],"names":[],"mappings":";;;;IACA;;;;;;OAMG;IACH,SAAgB,eAAe,CAC7B,MAA0B,EAC1B,KAAyB,EACzB,mBAAmC;QAAnC,oCAAA,EAAA,0BAAmC;QAEnC,IAAI,WAAW,GAAG,KAAK,CAAC;QAExB,IAAI,MAAM,IAAI,KAAK,EAAE;YACnB,IAAI,mBAAmB,EAAE;gBACvB,IAAI,MAAM,KAAK,KAAK,EAAE;oBACpB,WAAW,GAAG,IAAI,CAAC;iBACpB;qBAAM;oBACL,WAAW,GAAG,KAAK,CAAC;oBAEpB,OAAO,KAAK,EAAE;wBACZ,IAAM,UAAU,GAAuB,qBAAS,CAAC,KAAK,CAAC,CAAC;wBAExD,IAAI,UAAU,KAAK,MAAM,EAAE;4BACzB,WAAW,GAAG,IAAI,CAAC;4BACnB,MAAM;yBACP;wBAED,KAAK,GAAG,UAAU,CAAC;qBACpB;iBACF;aACF;iBAAM,IAAI,MAAM,CAAC,QAAQ,EAAE;gBAC1B,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;aACtC;SACF;QAED,OAAO,WAAW,CAAC;IACrB,CAAC;IA/BD,0CA+BC","sourcesContent":["import { getParent } from './getParent';\n/**\n * Determines whether or not a parent element contains a given child element.\n * If `allowVirtualParents` is true, this method may return `true` if the child\n * has the parent in its virtual element hierarchy.\n *\n * @public\n */\nexport function elementContains(\n  parent: HTMLElement | null,\n  child: HTMLElement | null,\n  allowVirtualParents: boolean = true,\n): boolean {\n  let isContained = false;\n\n  if (parent && child) {\n    if (allowVirtualParents) {\n      if (parent === child) {\n        isContained = true;\n      } else {\n        isContained = false;\n\n        while (child) {\n          const nextParent: HTMLElement | null = getParent(child);\n\n          if (nextParent === parent) {\n            isContained = true;\n            break;\n          }\n\n          child = nextParent;\n        }\n      }\n    } else if (parent.contains) {\n      isContained = parent.contains(child);\n    }\n  }\n\n  return isContained;\n}\n"]}
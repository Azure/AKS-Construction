{"version":3,"file":"getChildren.js","sourceRoot":"../src/","sources":["getChildren.ts"],"names":[],"mappings":";;;;IACA;;;;;;OAMG;IACH,SAAgB,WAAW,CAAC,MAAmB,EAAE,oBAAoC;QAApC,qCAAA,EAAA,2BAAoC;QACnF,IAAM,QAAQ,GAAkB,EAAE,CAAC;QACnC,IAAI,MAAM,EAAE;YACV,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC/C,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAgB,CAAC,CAAC;aACvD;YACD,IAAI,oBAAoB,IAAI,mCAAgB,CAAC,MAAM,CAAC,EAAE;gBACpD,QAAQ,CAAC,IAAI,OAAb,QAAQ,EAAS,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE;aAC5C;SACF;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAXD,kCAWC","sourcesContent":["import { isVirtualElement } from './isVirtualElement';\n/**\n * Gets the elements which are child elements of the given element.\n * If `allowVirtualChildren` is `true`, this method enumerates virtual child elements\n * after the original children.\n * @param parent - The element to get the children of.\n * @param allowVirtualChildren - true if the method should enumerate virtual child elements.\n */\nexport function getChildren(parent: HTMLElement, allowVirtualChildren: boolean = true): HTMLElement[] {\n  const children: HTMLElement[] = [];\n  if (parent) {\n    for (let i = 0; i < parent.children.length; i++) {\n      children.push(parent.children.item(i) as HTMLElement);\n    }\n    if (allowVirtualChildren && isVirtualElement(parent)) {\n      children.push(...parent._virtual.children);\n    }\n  }\n  return children;\n}\n"]}
{"version":3,"file":"useTarget.js","sourceRoot":"../src/","sources":["useTarget.ts"],"names":[],"mappings":";;;;IAOA;;;;;;OAMG;IACH,SAAgB,SAAS,CACvB,MAA0B,EAC1B,WAA8C;QAE9C,IAAM,kBAAkB,GAAG,KAAK,CAAC,MAAM,EAEpC,CAAC;QAEJ,IAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAkD,IAAI,CAAC,CAAC;QACtF;;;WAGG;QACH,IAAM,YAAY,GAAG,iCAAS,EAAE,CAAC;QAEjC,sEAAsE;QACtE,wEAAwE;QACxE,kEAAkE;QAClE,IAAI,CAAC,MAAM,IAAI,MAAM,KAAK,kBAAkB,CAAC,OAAO,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YAClF,IAAM,cAAc,GAAG,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,OAAO,CAAC;YAC5C,IAAI,MAAM,EAAE;gBACV,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;oBAC9B,IAAM,UAAU,GAAa,uBAAW,CAAC,cAAc,CAAE,CAAC;oBAC1D,SAAS,CAAC,OAAO,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;iBAC1E;qBAAM,IAAI,iBAAiB,IAAI,MAAM,EAAE;oBACtC,SAAS,CAAC,OAAO,GAAG,MAAM,CAAC;iBAC5B;qBAAM,IAAI,uBAAuB,IAAI,MAAM,EAAE;oBAC5C,SAAS,CAAC,OAAO,GAAG,MAAM,CAAC;iBAC5B;qBAAM,IAAI,SAAS,IAAI,MAAM,EAAE;oBAC9B,SAAS,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;iBACpC;qBAAM;oBACL,SAAS,CAAC,OAAO,GAAG,MAAM,CAAC;iBAC5B;aACF;YACD,kBAAkB,CAAC,OAAO,GAAG,MAAM,CAAC;SACrC;QAED,OAAO,CAAC,SAAS,EAAE,YAAY,CAAU,CAAC;IAC5C,CAAC;IAtCD,8BAsCC","sourcesContent":["import { getDocument, Rectangle } from '@fluentui/utilities';\nimport * as React from 'react';\nimport { useWindow } from '@fluentui/react-window-provider';\nimport type { Point } from '@fluentui/utilities';\n\nexport type Target = Element | string | MouseEvent | Point | Rectangle | null | React.RefObject<Element>;\n\n/**\n * Hook to calculate and cache the target element specified by the given target attribute,\n * as well as the target element's (or host element's) parent window\n * @param target- Target selector passed to the component as a property, describing the element that\n * the callout should target\n * @param hostElement- The callout's host element, used for determining the parent window.\n */\nexport function useTarget<TElement extends HTMLElement = HTMLElement>(\n  target: Target | undefined,\n  hostElement?: React.RefObject<TElement | null>,\n): Readonly<[React.RefObject<Element | MouseEvent | Point | Rectangle | null>, Window | undefined]> {\n  const previousTargetProp = React.useRef<\n    Element | string | MouseEvent | Point | Rectangle | React.RefObject<Element> | null | undefined\n  >();\n\n  const targetRef = React.useRef<Element | MouseEvent | Point | Rectangle | null>(null);\n  /**\n   * Stores an instance of Window, used to check\n   * for server side rendering and if focus was lost.\n   */\n  const targetWindow = useWindow();\n\n  // If the target element changed, find the new one. If we are tracking\n  // target with class name, always find element because we do not know if\n  // fabric has rendered a new element and disposed the old element.\n  if (!target || target !== previousTargetProp.current || typeof target === 'string') {\n    const currentElement = hostElement?.current;\n    if (target) {\n      if (typeof target === 'string') {\n        const currentDoc: Document = getDocument(currentElement)!;\n        targetRef.current = currentDoc ? currentDoc.querySelector(target) : null;\n      } else if ('stopPropagation' in target) {\n        targetRef.current = target;\n      } else if ('getBoundingClientRect' in target) {\n        targetRef.current = target;\n      } else if ('current' in target) {\n        targetRef.current = target.current;\n      } else {\n        targetRef.current = target;\n      }\n    }\n    previousTargetProp.current = target;\n  }\n\n  return [targetRef, targetWindow] as const;\n}\n"]}
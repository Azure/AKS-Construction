{"version":3,"file":"useConstCallback.js","sourceRoot":"../src/","sources":["useConstCallback.ts"],"names":[],"mappings":";;;;IAEA;;;;;;;;;OASG;IACH,8DAA8D;IAC9D,SAAgB,gBAAgB,CAAoC,QAAW;QAC7E,IAAM,GAAG,GAAG,KAAK,CAAC,MAAM,EAAK,CAAC;QAC9B,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE;YAChB,GAAG,CAAC,OAAO,GAAG,QAAQ,CAAC;SACxB;QACD,OAAO,GAAG,CAAC,OAAO,CAAC;IACrB,CAAC;IAND,4CAMC","sourcesContent":["import * as React from 'react';\n\n/**\n * @deprecated Deprecated due to potential for misuse. Generally, use `React.useCallback` instead.\n * If you need a callback reference that never changes, consider `useEventCallback`.\n *\n * This hook was intended for creating callbacks which have no dependencies, and therefore never\n * need to change. It works fine if everyone using it is extremely mindful of how closures work,\n * but that's not a safe assumption--so in practice, usage of this hook tends to result in bugs\n * like unintentionally capturing the first value of a prop and not respecting updates (when\n * updates should be respected).\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useConstCallback<T extends (...args: any[]) => any>(callback: T): T {\n  const ref = React.useRef<T>();\n  if (!ref.current) {\n    ref.current = callback;\n  }\n  return ref.current;\n}\n"]}
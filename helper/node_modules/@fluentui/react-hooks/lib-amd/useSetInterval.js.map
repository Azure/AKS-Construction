{"version":3,"file":"useSetInterval.js","sourceRoot":"../src/","sources":["useSetInterval.ts"],"names":[],"mappings":";;;;IAQA;;OAEG;IACI,IAAM,cAAc,GAAG;QAC5B,IAAM,WAAW,GAAG,mBAAQ,CAAyB,EAAE,CAAC,CAAC;QAEzD,KAAK,CAAC,SAAS,CACb,cAAM,OAAA;YACJ,KAAiB,UAAwB,EAAxB,KAAA,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,EAAxB,cAAwB,EAAxB,IAAwB,EAAE;gBAAtC,IAAM,EAAE,SAAA;gBACX,8DAA8D;gBAC9D,aAAa,CAAC,EAAS,CAAC,CAAC;aAC1B;QACH,CAAC,EALK,CAKL;QACD,6FAA6F;QAC7F,CAAC,WAAW,CAAC,CACd,CAAC;QAEF,OAAO,mBAAQ,CAAC;YACd,WAAW,EAAE,UAAC,IAAgB,EAAE,QAAgB;gBAC9C,IAAM,EAAE,GAAI,WAAW,CAAC,IAAI,EAAE,QAAQ,CAAuB,CAAC;gBAE9D,WAAW,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBAEpB,OAAO,EAAE,CAAC;YACZ,CAAC;YAED,aAAa,EAAE,UAAC,EAAU;gBACxB,OAAO,WAAW,CAAC,EAAE,CAAC,CAAC;gBACvB,aAAa,CAAC,EAAE,CAAC,CAAC;YACpB,CAAC;SACF,CAAC,CAAC;IACL,CAAC,CAAC;IA5BW,QAAA,cAAc,kBA4BzB","sourcesContent":["import * as React from 'react';\nimport { useConst } from './useConst';\n\nexport type UseSetIntervalReturnType = {\n  setInterval: (callback: () => void, duration: number) => number;\n  clearInterval: (id: number) => void;\n};\n\n/**\n *  Returns a wrapper function for `setInterval` which automatically handles disposal.\n */\nexport const useSetInterval = (): UseSetIntervalReturnType => {\n  const intervalIds = useConst<Record<number, number>>({});\n\n  React.useEffect(\n    () => () => {\n      for (const id of Object.keys(intervalIds)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        clearInterval(id as any);\n      }\n    },\n    // useConst ensures this will never change, but react-hooks/exhaustive-deps doesn't know that\n    [intervalIds],\n  );\n\n  return useConst({\n    setInterval: (func: () => void, duration: number): number => {\n      const id = (setInterval(func, duration) as unknown) as number;\n\n      intervalIds[id] = 1;\n\n      return id;\n    },\n\n    clearInterval: (id: number): void => {\n      delete intervalIds[id];\n      clearInterval(id);\n    },\n  });\n};\n"]}
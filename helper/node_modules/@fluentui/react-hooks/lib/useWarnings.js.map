{"version":3,"file":"useWarnings.js","sourceRoot":"../src/","sources":["useWarnings.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EACL,IAAI,EACJ,mBAAmB,EACnB,8BAA8B,EAC9B,gBAAgB,EAChB,qBAAqB,GACtB,MAAM,qBAAqB,CAAC;AAC7B,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAmDtC,IAAI,SAAS,GAAG,CAAC,CAAC;AAElB;;;;GAIG;AACH,MAAM,UAAU,WAAW,CAAI,OAA2B;IACxD,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;QAEvC,IAAA,MAAI,GAOF,OAAO,KAPL,EACJ,KAAK,GAMH,OAAO,MANJ,EACL,KAKE,OAAO,MALC,EAAV,KAAK,mBAAG,EAAE,KAAA,EACV,qBAAqB,GAInB,OAAO,sBAJY,EACrB,YAAY,GAGV,OAAO,aAHG,EACZ,iBAAiB,GAEf,OAAO,kBAFQ,EACjB,eAAe,GACb,OAAO,gBADM,CACL;QAEZ,yEAAyE;QACzE,IAAM,YAAY,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACzC,IAAM,WAAW,GAAG,QAAQ,CAAC,cAAM,OAAA,iBAAe,SAAS,EAAI,EAA5B,CAA4B,CAAC,CAAC;QACjE,IAAM,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;QACpC,8CAA8C;QAE9C,kFAAkF;QAClF,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;YACzB,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC;YAE5B,KAAsB,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK,EAAE;gBAAxB,IAAM,OAAO,cAAA;gBAChB,IAAI,CAAC,OAAO,CAAC,CAAC;aACf;YAED,IAAI,qBAAqB,EAAE;gBACzB,KAAkB,UAAqB,EAArB,+CAAqB,EAArB,mCAAqB,EAArB,IAAqB,EAAE;oBAApC,IAAM,GAAG,8BAAA;oBACZ,8BAA8B,CAAC,MAAI,EAAE,KAAK,EAAE,GAAG,CAAC,aAAa,EAAE,GAAG,CAAC,mBAAmB,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC;iBACxG;aACF;YAED,YAAY,IAAI,gBAAgB,CAAC,MAAI,EAAE,KAAK,EAAE,YAAY,CAAC,CAAC;YAE5D,iBAAiB,IAAI,qBAAqB,CAAC,MAAI,EAAE,KAAK,EAAE,iBAAiB,CAAC,CAAC;SAC5E;QAED,0FAA0F;QAC1F,yFAAyF;QACzF,2FAA2F;QAC3F,8EAA8E;QAC9E,eAAe,IAAI,mBAAmB,uBAAM,eAAe,KAAE,WAAW,aAAA,EAAE,KAAK,OAAA,EAAE,aAAa,EAAE,MAAI,EAAE,QAAQ,UAAA,IAAG,CAAC;KACnH;AACH,CAAC","sourcesContent":["import * as React from 'react';\nimport {\n  warn,\n  warnControlledUsage,\n  warnConditionallyRequiredProps,\n  warnDeprecations,\n  warnMutuallyExclusive,\n} from '@fluentui/utilities';\nimport { usePrevious } from './usePrevious';\nimport { useConst } from './useConst';\nimport type { ISettingsMap, IWarnControlledUsageParams } from '@fluentui/utilities';\n\nexport interface IWarningOptions<P> {\n  /** Name of the component */\n  name: string;\n\n  /** Current component props */\n  props: P;\n\n  /** Generic messages */\n  other?: string[];\n\n  /** Warns when props are required if a condition is met */\n  conditionallyRequired?: {\n    /** Props required when the condition is met */\n    requiredProps: string[];\n    /** Name of the prop that the condition is based on */\n    conditionalPropName: string;\n    /** Whether the condition is met */\n    condition: boolean;\n  }[];\n\n  /**\n   * Warns when deprecated props are being used. Each key is a prop name and each value is\n   * either undefined or a replacement prop name.\n   */\n  deprecations?: ISettingsMap<P>;\n\n  /**\n   * Warns when two props which are mutually exclusive are both being used.\n   * The key is one prop name and the value is the other.\n   */\n  mutuallyExclusive?: ISettingsMap<P>;\n\n  /**\n   * Check for and warn on the following error conditions with a form component:\n   * - A value prop is provided (indicated it's being used as controlled) without a change handler,\n   *    and the component is not read-only\n   * - Both the value and defaultValue props are provided\n   * - The component is attempting to switch between controlled and uncontrolled\n   *\n   * The messages mimic the warnings React gives for these error conditions on input elements.\n   * The warning will only be displayed once per component instance.\n   */\n  controlledUsage?: Pick<\n    IWarnControlledUsageParams<P>,\n    'valueProp' | 'defaultValueProp' | 'onChangeProp' | 'readOnlyProp'\n  >;\n}\n\nlet warningId = 0;\n\n/**\n * Only in development mode, display console warnings when certain conditions are met.\n * Note that all warnings except `controlledUsage` will only be shown on first render\n * (new `controlledUsage` warnings may be shown later due to prop changes).\n */\nexport function useWarnings<P>(options: IWarningOptions<P>) {\n  if (process.env.NODE_ENV !== 'production') {\n    const {\n      name,\n      props,\n      other = [],\n      conditionallyRequired,\n      deprecations,\n      mutuallyExclusive,\n      controlledUsage,\n    } = options;\n\n    /* eslint-disable react-hooks/rules-of-hooks -- build-time conditional */\n    const hasWarnedRef = React.useRef(false);\n    const componentId = useConst(() => `useWarnings_${warningId++}`);\n    const oldProps = usePrevious(props);\n    /* eslint-enable react-hooks/rules-of-hooks */\n\n    // Warn synchronously (not in useEffect) on first render to make debugging easier.\n    if (!hasWarnedRef.current) {\n      hasWarnedRef.current = true;\n\n      for (const warning of other) {\n        warn(warning);\n      }\n\n      if (conditionallyRequired) {\n        for (const req of conditionallyRequired) {\n          warnConditionallyRequiredProps(name, props, req.requiredProps, req.conditionalPropName, req.condition);\n        }\n      }\n\n      deprecations && warnDeprecations(name, props, deprecations);\n\n      mutuallyExclusive && warnMutuallyExclusive(name, props, mutuallyExclusive);\n    }\n\n    // Controlled usage warnings may be displayed on either first or subsequent renders due to\n    // prop changes. Note that it's safe to run this synchronously (not in useEffect) even in\n    // concurrent mode because `warnControlledUsage` internally tracks which warnings have been\n    // displayed for each component instance (so nothing will be displayed twice).\n    controlledUsage && warnControlledUsage({ ...controlledUsage, componentId, props, componentName: name, oldProps });\n  }\n}\n"]}
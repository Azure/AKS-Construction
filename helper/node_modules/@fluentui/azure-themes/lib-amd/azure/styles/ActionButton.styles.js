define(["require", "exports", "tslib", "../Constants"], function (require, exports, tslib_1, StyleConstants) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActionButtonStyles = void 0;
    var ActionButtonStyles = function (theme) {
        var semanticColors = theme.semanticColors;
        var extendedSemanticColors = semanticColors;
        var iconColor = function (color) {
            return {
                selectors: {
                    '.ms-Button-icon': { color: color },
                },
            };
        };
        return {
            root: tslib_1.__assign({ fontSize: theme.fonts.medium.fontSize, backgroundColor: semanticColors.buttonBackground, border: StyleConstants.borderWidth + " solid " + semanticColors.inputBorder, color: semanticColors.buttonText }, iconColor(extendedSemanticColors.iconButtonFill)),
            rootDisabled: tslib_1.__assign({ border: StyleConstants.borderWidth + " solid " + extendedSemanticColors.primaryButtonBorderDisabled + " !important", backgroundColor: semanticColors.primaryButtonBackgroundDisabled, color: semanticColors.primaryButtonTextDisabled }, iconColor(semanticColors.primaryButtonTextDisabled)),
            rootHovered: {
                border: StyleConstants.borderWidth + " solid " + semanticColors.inputBorderHovered,
                backgroundColor: semanticColors.buttonBackgroundHovered,
                color: semanticColors.buttonTextHovered,
                selectors: {
                    ':hover': tslib_1.__assign({}, iconColor(extendedSemanticColors.iconButtonFillHovered)),
                },
            },
            rootPressed: {
                border: StyleConstants.borderWidth + " solid " + extendedSemanticColors.inputBorderPressed,
                backgroundColor: semanticColors.buttonBackgroundPressed,
                color: semanticColors.buttonTextPressed,
                selectors: {
                    ':active': tslib_1.__assign({}, iconColor(extendedSemanticColors.iconButtonFillHovered)),
                },
            },
            rootChecked: tslib_1.__assign({ border: StyleConstants.borderWidth + " solid " + semanticColors.buttonTextPressed, backgroundColor: semanticColors.buttonBackgroundPressed, color: semanticColors.buttonTextPressed }, iconColor(extendedSemanticColors.iconButtonFillHovered)),
            rootCheckedHovered: {
                border: StyleConstants.borderWidth + " solid " + semanticColors.buttonTextHovered,
                backgroundColor: semanticColors.buttonBackgroundHovered,
                color: semanticColors.buttonTextHovered,
                selectors: {
                    ':hover': tslib_1.__assign({}, iconColor(extendedSemanticColors.iconButtonFillHovered)),
                },
            },
            rootCheckedPressed: {
                border: StyleConstants.borderWidth + " solid " + semanticColors.buttonTextPressed,
                backgroundColor: semanticColors.buttonBackgroundPressed,
                color: semanticColors.buttonTextPressed,
                selectors: {
                    ':active': tslib_1.__assign({}, iconColor(extendedSemanticColors.iconButtonFillHovered)),
                },
            },
        };
    };
    exports.ActionButtonStyles = ActionButtonStyles;
});
//# sourceMappingURL=ActionButton.styles.js.map
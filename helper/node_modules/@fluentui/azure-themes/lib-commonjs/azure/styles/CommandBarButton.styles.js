"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandBarButtonStyles = void 0;
var tslib_1 = require("tslib");
var Styling_1 = require("@fluentui/react/lib/Styling");
var CommandBarButtonStyles = function (theme) {
    var semanticColors = theme.semanticColors;
    var extendedSemanticColors = semanticColors;
    return {
        icon: {
            color: extendedSemanticColors.iconButtonFill,
        },
        menuIcon: {
            color: semanticColors.bodyText,
        },
        root: tslib_1.__assign(tslib_1.__assign({}, Styling_1.getFocusStyle(theme, { inset: 2 })), { fontSize: theme.fonts.medium.fontSize, backgroundColor: semanticColors.bodyBackground, color: extendedSemanticColors.commandBarButtonText, paddingLeft: 4, paddingRight: 4 }),
        rootExpanded: {
            backgroundColor: extendedSemanticColors.commandBarButtonBackgroundHover,
            color: extendedSemanticColors.commandBarButtonTextHover,
            selectors: {
                '.ms-Button-icon': {
                    color: extendedSemanticColors.commandBarButtonIconHover,
                },
                '.ms-Button-menuIcon': {
                    color: extendedSemanticColors.commandBarButtonTextHover,
                },
            },
        },
        rootExpandedHovered: {
            backgroundColor: extendedSemanticColors.commandBarButtonBackgroundSelectedHover,
            color: extendedSemanticColors.commandBarButtonTextHover,
            selectors: {
                '.ms-Button-icon': {
                    color: extendedSemanticColors.commandBarButtonIconSelected,
                },
                '.ms-Button-menuIcon': {
                    color: extendedSemanticColors.commandBarButtonTextHover,
                },
            },
        },
        rootHovered: {
            backgroundColor: extendedSemanticColors.commandBarButtonBackgroundHover,
            color: extendedSemanticColors.commandBarButtonTextHover,
            selectors: {
                '.ms-Button-icon': {
                    color: extendedSemanticColors.commandBarButtonIconHover,
                },
                '.ms-Button-menuIcon': {
                    color: extendedSemanticColors.commandBarButtonTextHover,
                },
            },
        },
        rootPressed: {
            backgroundColor: extendedSemanticColors.commandBarButtonBackgroundSelected,
            color: extendedSemanticColors.commandBarButtonTextHover,
            selectors: {
                '.ms-Button-icon': {
                    color: extendedSemanticColors.commandBarButtonIconSelected,
                },
                '.ms-Button-menuIcon': {
                    color: extendedSemanticColors.commandBarButtonTextHover,
                },
            },
        },
        rootChecked: {
            backgroundColor: extendedSemanticColors.commandBarButtonBackgroundSelected,
            color: extendedSemanticColors.commandBarButtonTextHover,
            selectors: {
                '.ms-Button-icon': {
                    color: extendedSemanticColors.commandBarButtonIconSelected,
                },
                '.ms-Button-menuIcon': {
                    color: extendedSemanticColors.commandBarButtonTextHover,
                },
            },
        },
        rootDisabled: {
            backgroundColor: semanticColors.bodyBackground,
            color: extendedSemanticColors.commandBarButtonTextDisabled,
            selectors: {
                '.ms-Button-icon': {
                    color: extendedSemanticColors.commandBarButtonTextDisabled,
                },
                '.ms-Button-menuIcon': {
                    color: extendedSemanticColors.commandBarButtonTextDisabled,
                },
            },
        },
        rootFocused: {
            backgroundColor: semanticColors.menuItemBackgroundHovered,
            color: semanticColors.buttonTextHovered,
            selectors: {
                '.ms-Button-icon': {
                    color: extendedSemanticColors.iconButtonFillHovered,
                },
                '.ms-Button-menuIcon': {
                    color: semanticColors.buttonTextHovered,
                },
                '::after': {
                    outlineColor: extendedSemanticColors.commandBarButtonAfterColor + " !important",
                },
            },
        },
        splitButtonMenuButton: {
            backgroundColor: semanticColors.bodyBackground,
            selectors: {
                ':hover': {
                    backgroundColor: semanticColors.menuItemBackgroundHovered,
                },
            },
        },
        splitButtonMenuButtonChecked: {
            backgroundColor: semanticColors.bodyBackground,
            selectors: {
                ':hover': {
                    backgroundColor: semanticColors.menuItemBackgroundHovered,
                },
            },
        },
        splitButtonMenuButtonDisabled: {
            backgroundColor: semanticColors.bodyBackground,
        },
        splitButtonMenuButtonExpanded: {
            backgroundColor: semanticColors.bodyBackground,
            selectors: {
                ':hover': {
                    backgroundColor: semanticColors.menuItemBackgroundHovered,
                },
            },
        },
        splitButtonMenuIcon: {
            color: semanticColors.bodyText,
        },
    };
};
exports.CommandBarButtonStyles = CommandBarButtonStyles;
//# sourceMappingURL=CommandBarButton.styles.js.map
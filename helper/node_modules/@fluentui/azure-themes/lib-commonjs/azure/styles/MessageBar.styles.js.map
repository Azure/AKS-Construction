{"version":3,"file":"MessageBar.styles.js","sourceRoot":"../src/","sources":["azure/styles/MessageBar.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import { IStyle } from '@fluentui/react';\nimport { IMessageBarStyleProps, IMessageBarStyles, MessageBarType } from '@fluentui/react/lib/MessageBar';\nimport { IExtendedSemanticColors } from '../IExtendedSemanticColors';\n\nconst generateBaseStyle = (backgroundColor: string, textColor: string): IStyle => {\n  return {\n    backgroundColor: backgroundColor,\n    color: textColor,\n    selectors: {\n      '.ms-Button-icon': {\n        color: textColor,\n        selectors: {\n          '&:hover': {\n            backgroundColor: backgroundColor,\n          },\n          '&:active': {\n            backgroundColor: backgroundColor,\n          },\n        },\n      },\n    },\n  };\n};\n\nconst IconButtonStyles = (props: IMessageBarStyleProps): IStyle => {\n  const { theme, messageBarType } = props;\n  const semanticColors = theme.semanticColors as IExtendedSemanticColors;\n\n  return [\n    (messageBarType === MessageBarType.error || messageBarType === MessageBarType.severeWarning) &&\n      generateBaseStyle(semanticColors.statusErrorBackground, semanticColors.statusErrorText),\n\n    messageBarType === MessageBarType.info &&\n      generateBaseStyle(semanticColors.statusInformationBackground, semanticColors.statusInformationText),\n\n    messageBarType === MessageBarType.success &&\n      generateBaseStyle(semanticColors.statusSuccessBackground, semanticColors.statusSuccessText),\n\n    (messageBarType === MessageBarType.warning || messageBarType === MessageBarType.blocked) &&\n      generateBaseStyle(semanticColors.statusWarningBackground, semanticColors.statusWarningText),\n\n    typeof messageBarType !== 'number' && generateBaseStyle(semanticColors.bodyBackground, semanticColors.bodyText),\n  ];\n};\n\nexport const MessageBarStyles = (props: IMessageBarStyleProps): Partial<IMessageBarStyles> => {\n  const { theme, messageBarType } = props;\n  const semanticColors = theme.semanticColors as IExtendedSemanticColors;\n  const iconButtonStyles = IconButtonStyles(props);\n\n  return {\n    actions: {\n      // Buttons utilizes an alpha channel < 1 for their pressed and hover state background colors.\n      // This styling effectively makes the button background the body background and applies hover / active styles\n      // to next child down.\n      selectors: {\n        '.ms-Button': {\n          backgroundColor: semanticColors.bodyBackground,\n          color: semanticColors.buttonText,\n          padding: '0px',\n          border: `1px solid ${semanticColors.buttonText}`,\n          selectors: {\n            '.ms-Button-flexContainer': {\n              paddingLeft: '16px',\n              paddingRight: '16px',\n              selectors: {\n                ':hover': {\n                  backgroundColor: semanticColors.buttonBackgroundHovered,\n                  color: semanticColors.buttonTextHovered,\n                },\n                ':active': {\n                  backgroundColor: semanticColors.buttonBackgroundPressed,\n                  color: semanticColors.buttonTextPressed,\n                },\n              },\n            },\n            ':hover': {\n              backgroundColor: semanticColors.bodyBackground,\n              color: semanticColors.buttonText,\n            },\n            ':active': {\n              backgroundColor: semanticColors.bodyBackground,\n              color: semanticColors.buttonText,\n            },\n          },\n        },\n      },\n    },\n    dismissSingleLine: iconButtonStyles,\n    dismissal: iconButtonStyles,\n    expand: iconButtonStyles,\n    expandSingleLine: iconButtonStyles,\n    icon: [\n      (messageBarType === MessageBarType.error || messageBarType === MessageBarType.severeWarning) && {\n        color: semanticColors.statusErrorIcon,\n      },\n\n      messageBarType === MessageBarType.info && {\n        color: semanticColors.statusInformationIcon,\n      },\n\n      messageBarType === MessageBarType.success && {\n        color: semanticColors.statusSuccessIcon,\n      },\n\n      (messageBarType === MessageBarType.warning || messageBarType === MessageBarType.blocked) && {\n        color: semanticColors.statusWarningIcon,\n      },\n\n      !messageBarType && {\n        color: semanticColors.statusInformationIcon,\n      },\n    ],\n    root: [\n      {\n        color: semanticColors.bodyText,\n        width: 'calc(100% - 2px)', // needed for border-right to be visible\n        selectors: {\n          '.ms-Link': {\n            color: semanticColors.statusLink,\n            textDecoration: 'underline',\n          },\n          '.ms-Link:hover': {\n            color: semanticColors.linkHovered,\n          },\n        },\n      },\n      (messageBarType === MessageBarType.error || messageBarType === MessageBarType.severeWarning) && {\n        backgroundColor: semanticColors.statusErrorBackground,\n        border: `1px solid ${semanticColors.statusErrorBorder}`,\n      },\n\n      messageBarType === MessageBarType.info && {\n        backgroundColor: semanticColors.statusInformationBackground,\n        border: `1px solid ${semanticColors.statusDefaultBorder}`,\n      },\n\n      messageBarType === MessageBarType.success && {\n        backgroundColor: semanticColors.statusSuccessBackground,\n        border: `1px solid ${semanticColors.statusSuccessBorder}`,\n      },\n\n      (messageBarType === MessageBarType.warning || messageBarType === MessageBarType.blocked) && {\n        backgroundColor: semanticColors.statusWarningBackground,\n        border: `1px solid ${semanticColors.statusWarningBorder}`,\n      },\n\n      !messageBarType && {\n        backgroundColor: semanticColors.statusDefaultBackground,\n        border: `1px solid ${semanticColors.statusDefaultBorder}`,\n      },\n    ],\n  };\n};\n"]}
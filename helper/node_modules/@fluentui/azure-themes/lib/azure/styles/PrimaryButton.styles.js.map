{"version":3,"file":"PrimaryButton.styles.js","sourceRoot":"../src/","sources":["azure/styles/PrimaryButton.styles.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,cAAc,MAAM,cAAc,CAAC;AAI/C,MAAM,CAAC,IAAM,mBAAmB,GAAG,UAAC,KAAa;IACvC,IAAA,cAAc,GAAK,KAAK,eAAV,CAAW;IACjC,IAAM,sBAAsB,GAAG,cAAyC,CAAC;IAEzE,OAAO;QACL,IAAI,EAAE;YACJ,MAAM,EAAE,cAAc,CAAC,kBAAkB;YACzC,OAAO,EAAE,cAAc,CAAC,aAAa;YACrC,MAAM,EAAK,cAAc,CAAC,WAAW,eAAU,cAAc,CAAC,mBAAqB;YACnF,SAAS,EAAE;gBACT,UAAU,EAAE;oBACV,YAAY,EAAE,sBAAsB,CAAC,sBAAsB;oBAC3D,WAAW,EAAK,sBAAsB,CAAC,kBAAkB,gBAAa;oBACtE,eAAe,EAAE,sBAAsB,CAAC,sBAAsB;oBAC9D,KAAK,EAAE,sBAAsB,CAAC,0BAA0B;oBACxD,SAAS,EAAE;wBACT,QAAQ,EAAE;4BACR,YAAY,EAAE,sBAAsB,CAAC,6BAA6B;4BAClE,WAAW,EAAK,sBAAsB,CAAC,yBAAyB,gBAAa;4BAC7E,eAAe,EAAE,sBAAsB,CAAC,6BAA6B;4BACrE,KAAK,EAAE,sBAAsB,CAAC,iCAAiC;yBAChE;wBACD,SAAS,EAAE;4BACT,YAAY,EAAE,sBAAsB,CAAC,6BAA6B;4BAClE,WAAW,EAAE,sBAAsB,CAAC,yBAAyB;4BAC7D,eAAe,EAAK,sBAAsB,CAAC,6BAA6B,gBAAa;4BACrF,KAAK,EAAE,sBAAsB,CAAC,iCAAiC;yBAChE;wBACD,QAAQ,EAAE;4BACR,YAAY,EAAK,sBAAsB,CAAC,6BAA6B,gBAAa;4BAClF,WAAW,EAAK,sBAAsB,CAAC,6BAA6B,gBAAa;4BACjF,eAAe,EAAK,sBAAsB,CAAC,6BAA6B,gBAAa;4BACrF,KAAK,EAAK,sBAAsB,CAAC,iCAAiC,gBAAa;yBAChF;qBACF;iBACF;aACF;SACF;QACD,WAAW,EAAE;YACX,SAAS,EAAE;gBACT,SAAS,EAAE;oBACT,YAAY,EAAK,cAAc,CAAC,iBAAiB,gBAAa;iBAC/D;aACF;YACD,eAAe,EAAE,cAAc,CAAC,uBAAuB;YACvD,KAAK,EAAE,cAAc,CAAC,iBAAiB;YACvC,WAAW,EAAE,sBAAsB,CAAC,2BAA2B;SAChE;QACD,WAAW,EAAE;YACX,MAAM,EAAE,MAAM;SACf;QACD,kBAAkB,EAAE;YAClB,eAAe,EAAE,cAAc,CAAC,8BAA8B;YAC9D,KAAK,EAAE,cAAc,CAAC,wBAAwB;SAC/C;QACD,kBAAkB,EAAE;YAClB,eAAe,EAAE,cAAc,CAAC,8BAA8B;YAC9D,KAAK,EAAE,cAAc,CAAC,wBAAwB;SAC/C;QACD,YAAY,EAAE;YACZ,MAAM,EAAK,cAAc,CAAC,WAAW,eAAU,sBAAsB,CAAC,2BAA2B,gBAAa;SAC/G;KACF,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { IButtonStyles } from '@fluentui/react/lib/Button';\nimport * as StyleConstants from '../Constants';\nimport { ITheme } from '@fluentui/react/lib/Styling';\nimport { IExtendedSemanticColors } from '../IExtendedSemanticColors';\n\nexport const PrimaryButtonStyles = (theme: ITheme): Partial<IButtonStyles> => {\n  const { semanticColors } = theme;\n  const extendedSemanticColors = semanticColors as IExtendedSemanticColors;\n\n  return {\n    root: {\n      height: StyleConstants.inputControlHeight,\n      padding: StyleConstants.buttonPadding,\n      border: `${StyleConstants.borderWidth} solid ${semanticColors.primaryButtonBorder}`,\n      selectors: {\n        '&.danger': {\n          outlineColor: extendedSemanticColors.ButtonBackgroundDanger,\n          borderColor: `${extendedSemanticColors.ButtonBorderDanger} !important`,\n          backgroundColor: extendedSemanticColors.ButtonBackgroundDanger,\n          color: extendedSemanticColors.ButtonBackgroundDangerText,\n          selectors: {\n            ':hover': {\n              outlineColor: extendedSemanticColors.ButtonBackgroundDangerHovered,\n              borderColor: `${extendedSemanticColors.ButtonBorderDangerHovered} !important`,\n              backgroundColor: extendedSemanticColors.ButtonBackgroundDangerHovered,\n              color: extendedSemanticColors.ButtonBackgroundDangerTextHovered,\n            },\n            ':active': {\n              outlineColor: extendedSemanticColors.ButtonBackgroundDangerPressed,\n              borderColor: extendedSemanticColors.ButtonBorderDangerPressed,\n              backgroundColor: `${extendedSemanticColors.ButtonBackgroundDangerPressed} !important`,\n              color: extendedSemanticColors.ButtonBackgroundDangerTextHovered,\n            },\n            ':focus': {\n              outlineColor: `${extendedSemanticColors.ButtonBackgroundDangerPressed} !important`,\n              borderColor: `${extendedSemanticColors.ButtonBackgroundDangerPressed} !important`,\n              backgroundColor: `${extendedSemanticColors.ButtonBackgroundDangerPressed} !important`,\n              color: `${extendedSemanticColors.ButtonBackgroundDangerTextHovered} !important`,\n            },\n          },\n        },\n      },\n    },\n    rootFocused: {\n      selectors: {\n        '::after': {\n          outlineColor: `${semanticColors.primaryButtonText} !important`,\n        },\n      },\n      backgroundColor: semanticColors.primaryButtonBackground,\n      color: semanticColors.primaryButtonText,\n      borderColor: extendedSemanticColors.primaryCompoundButtonBorder,\n    },\n    rootChecked: {\n      border: 'none',\n    },\n    rootCheckedHovered: {\n      backgroundColor: semanticColors.primaryButtonBackgroundHovered,\n      color: semanticColors.primaryButtonTextHovered,\n    },\n    rootCheckedPressed: {\n      backgroundColor: semanticColors.primaryButtonBackgroundPressed,\n      color: semanticColors.primaryButtonTextPressed,\n    },\n    rootDisabled: {\n      border: `${StyleConstants.borderWidth} solid ${extendedSemanticColors.primaryButtonBorderDisabled} !important`,\n    },\n  };\n};\n"]}
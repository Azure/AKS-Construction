import * as StyleConstants from '../Constants';
export var TextFieldStyles = function (props) {
    var focused = props.focused, disabled = props.disabled, hasErrorMessage = props.hasErrorMessage, multiline = props.multiline, theme = props.theme;
    var semanticColors = theme.semanticColors;
    var extendedSemanticColors = semanticColors;
    return {
        fieldGroup: [
            !multiline && {
                height: StyleConstants.inputControlHeight,
            },
            !hasErrorMessage && {
                borderColor: semanticColors.inputBorder,
                selectors: {
                    '::after': {
                        borderColor: extendedSemanticColors.controlFocus,
                    },
                },
            },
            !focused &&
                !disabled && {
                selectors: {
                    ':hover': {
                        borderColor: semanticColors.inputText,
                    },
                },
            },
            focused && {
                borderColor: semanticColors.focusBorder,
            },
            disabled && {
                borderColor: extendedSemanticColors.textFieldBorderDisabled,
                backgroundColor: semanticColors.primaryButtonBackgroundDisabled,
            },
            hasErrorMessage && [
                {
                    borderWidth: StyleConstants.borderWidthError,
                },
                focused && {
                    borderColor: semanticColors.focusBorder,
                    selectors: {
                        '&:focus, &:hover': {
                            borderColor: semanticColors.focusBorder,
                        },
                    },
                },
            ],
        ],
        icon: {
            bottom: 2,
        },
        prefix: {
            fontSize: theme.fonts.medium.fontSize,
        },
        suffix: {
            fontSize: theme.fonts.medium.fontSize,
        },
        field: [
            {
                color: semanticColors.inputText,
                backgroundColor: extendedSemanticColors.controlBackground,
                fontSize: theme.fonts.medium.fontSize,
                selectors: {
                    '::placeholder': {
                        color: semanticColors.inputPlaceholderText,
                        fontStyle: 'italic',
                    },
                    ':-ms-input-placeholder': {
                        color: semanticColors.inputPlaceholderText,
                        fontStyle: 'italic',
                    },
                    '::-webkit-input-placeholder': {
                        color: semanticColors.inputPlaceholderText,
                        fontStyle: 'italic',
                    },
                },
            },
            disabled && {
                color: semanticColors.primaryButtonTextDisabled,
                backgroundColor: semanticColors.primaryButtonBackgroundDisabled,
                selectors: {
                    '::placeholder': {
                        color: semanticColors.disabledBodyText,
                    },
                    ':-ms-input-placeholder': {
                        color: semanticColors.disabledBodyText,
                    },
                    '::-webkit-input-placeholder': {
                        color: semanticColors.disabledBodyText,
                    },
                },
            },
        ],
        errorMessage: {
            color: semanticColors.errorText,
        },
    };
};
//# sourceMappingURL=TextField.styles.js.map
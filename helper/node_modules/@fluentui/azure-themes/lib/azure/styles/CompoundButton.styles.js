import { __assign } from "tslib";
import * as StyleConstants from '../Constants';
export var CompoundButtonStyles = function (theme) {
    var semanticColors = theme.semanticColors;
    var extendedSemanticColors = semanticColors;
    var labelTextColor = function (color) {
        return {
            '.ms-Button-description': { color: color },
            '.ms-Button-label': { color: color },
        };
    };
    return {
        root: {
            fontSize: theme.fonts.medium.fontSize,
            backgroundColor: semanticColors.buttonBackground,
            border: StyleConstants.borderWidth + " solid " + semanticColors.inputBorder,
            selectors: __assign(__assign({}, labelTextColor(semanticColors.buttonText)), { '&.ms-Button--compoundPrimary': {
                    backgroundColor: semanticColors.primaryButtonBackground,
                    border: StyleConstants.borderWidth + " solid " + extendedSemanticColors.primaryCompoundButtonBorder,
                    selectors: __assign({}, labelTextColor(semanticColors.primaryButtonText)),
                }, '&.ms-Button--compoundPrimary:focus': {
                    backgroundColor: semanticColors.primaryButtonBackground,
                    border: StyleConstants.borderWidth + " solid " + extendedSemanticColors.primaryCompoundButtonBorder,
                    selectors: __assign({}, labelTextColor(extendedSemanticColors.primaryButtonTextFocused)),
                }, '&.ms-Button--compound:focus': {
                    backgroundColor: semanticColors.buttonBackground,
                    border: StyleConstants.borderWidth + " solid " + semanticColors.inputBorder,
                    selectors: __assign(__assign({}, labelTextColor(semanticColors.buttonText)), { '&.ms-Button--compound:hover': {
                            backgroundColor: semanticColors.buttonBackgroundHovered,
                        } }),
                } }),
        },
        rootHovered: {
            backgroundColor: semanticColors.buttonBackgroundHovered,
            border: StyleConstants.borderWidth + " solid " + semanticColors.inputBorderHovered,
            selectors: {
                '&.ms-Button--compound:hover': {
                    selectors: __assign({}, labelTextColor(semanticColors.buttonTextHovered)),
                },
                '&.ms-Button--compoundPrimary:hover': {
                    backgroundColor: semanticColors.primaryButtonBackgroundHovered,
                    color: semanticColors.primaryButtonTextHovered,
                    border: StyleConstants.borderWidth + " solid " + semanticColors.primaryButtonBackgroundHovered,
                    selectors: __assign({}, labelTextColor(semanticColors.primaryButtonTextHovered)),
                },
            },
        },
        rootPressed: {
            border: StyleConstants.borderWidth + " solid " + semanticColors.inputBorder,
            selectors: {
                '&.ms-Button--compound:active': {
                    backgroundColor: semanticColors.buttonBackgroundPressed,
                    borderColor: semanticColors.buttonBackgroundPressed,
                    selectors: __assign({}, labelTextColor(semanticColors.buttonTextPressed)),
                },
                '&.ms-Button--compoundPrimary:active': {
                    backgroundColor: semanticColors.primaryButtonBackgroundPressed,
                    color: semanticColors.primaryButtonTextPressed,
                    border: StyleConstants.borderWidth + " solid " + semanticColors.primaryButtonBackgroundPressed,
                    selectors: __assign({}, labelTextColor(semanticColors.primaryButtonTextPressed)),
                },
            },
        },
        rootDisabled: {
            backgroundColor: semanticColors.buttonBackgroundDisabled,
            border: '0px',
            selectors: __assign(__assign({}, labelTextColor(semanticColors.buttonTextDisabled)), { '&.ms-Button--compoundPrimary': {
                    backgroundColor: semanticColors.primaryButtonBackgroundDisabled,
                    border: StyleConstants.borderWidth + " solid " + extendedSemanticColors.primaryButtonBorderDisabled,
                    selectors: __assign({}, labelTextColor(semanticColors.primaryButtonTextDisabled)),
                }, '&.ms-Button--compound': {
                    border: extendedSemanticColors.primaryButtonBorderDisabled,
                } }),
        },
        rootChecked: {
            backgroundColor: semanticColors.buttonBackgroundPressed,
            border: StyleConstants.borderWidth + " solid " + semanticColors.buttonTextPressed,
            selectors: __assign(__assign({}, labelTextColor(semanticColors.buttonTextPressed)), { '&.ms-Button--compoundPrimary.is-checked': {
                    backgroundColor: semanticColors.primaryButtonBackgroundPressed,
                    border: "0px",
                    selectors: __assign({}, labelTextColor(semanticColors.primaryButtonTextPressed)),
                } }),
        },
        rootCheckedHovered: {
            backgroundColor: semanticColors.buttonBackgroundHovered,
            border: StyleConstants.borderWidth + " solid " + semanticColors.buttonTextPressed,
            selectors: __assign(__assign({}, labelTextColor(semanticColors.buttonTextHovered)), { '&.ms-Button--compoundPrimary.is-checked:hover': {
                    backgroundColor: semanticColors.primaryButtonBackgroundHovered,
                    border: "0px",
                    selectors: __assign({}, labelTextColor(semanticColors.primaryButtonTextHovered)),
                } }),
        },
        rootCheckedPressed: {
            backgroundColor: semanticColors.buttonBackgroundPressed,
            border: StyleConstants.borderWidth + " solid " + semanticColors.buttonTextPressed,
            selectors: __assign(__assign({}, labelTextColor(semanticColors.buttonTextPressed)), { '&.ms-Button--compoundPrimary.is-checked:active': {
                    backgroundColor: semanticColors.primaryButtonBackgroundPressed,
                    border: "0px",
                    selectors: __assign({}, labelTextColor(semanticColors.primaryButtonTextPressed)),
                } }),
        },
        rootCheckedDisabled: {
            backgroundColor: semanticColors.buttonBackgroundDisabled,
            border: '0px',
            selectors: __assign(__assign({}, labelTextColor(semanticColors.buttonTextDisabled)), { '&.ms-Button--compoundPrimary.is-checked.is-disabled': {
                    backgroundColor: semanticColors.buttonBackgroundDisabled,
                    selectors: __assign({}, labelTextColor(semanticColors.buttonTextDisabled)),
                } }),
        },
    };
};
//# sourceMappingURL=CompoundButton.styles.js.map
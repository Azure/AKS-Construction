import { Depths } from '../AzureDepths';
import * as StyleConstants from '../Constants';
export var DropdownStyles = function (props) {
    var _a, _b, _c, _d;
    var disabled = props.disabled, theme = props.theme, hasError = props.hasError, isOpen = props.isOpen;
    if (!theme) {
        return {};
    }
    var semanticColors = theme.semanticColors;
    var extendedSemanticColors = semanticColors;
    return {
        root: {
            selectors: {
                '.ms-Dropdown': {
                    height: StyleConstants.inputControlHeight,
                },
            },
        },
        callout: {
            border: 'none',
            boxShadow: Depths.depth8,
            selectors: (_a = {},
                _a['.ms-Callout-main'] = {
                    backgroundColor: semanticColors.inputBackground,
                    borderColor: semanticColors.inputBorder,
                    borderStyle: StyleConstants.borderSolid,
                    borderWidth: 0,
                },
                _a),
        },
        caretDownWrapper: {
            right: 8,
            height: StyleConstants.inputControlHeightInner,
            lineHeight: StyleConstants.inputControlHeight,
        },
        caretDown: [
            {
                color: semanticColors.inputText,
            },
            disabled && {
                color: semanticColors.disabledBodyText,
            },
        ],
        dropdown: [
            {
                fontSize: theme.fonts.medium.fontSize,
                height: StyleConstants.dropDownItemHeight,
                color: semanticColors.inputText,
                border: 0,
                selectors: {
                    ':focus::after, :focus, :active': {
                        borderColor: extendedSemanticColors.controlFocus,
                    },
                },
            },
            disabled && {
                borderWidth: '0px',
                color: semanticColors.primaryButtonTextDisabled,
                selectors: (_b = {},
                    _b['.ms-Dropdown-title, .ms-Dropdown-titleIsPlaceHolder, .ms-Dropdown-caretDown'] = {
                        color: semanticColors.primaryButtonTextDisabled,
                    },
                    _b),
            },
            !disabled && {
                selectors: (_c = {},
                    _c['.ms-Dropdown-title'] = {
                        color: semanticColors.bodyText,
                        borderColor: semanticColors.inputBorder,
                        backgroundColor: extendedSemanticColors.controlBackground,
                    },
                    _c['.ms-Dropdown-titleIsPlaceHolder.ms-Dropdown-title'] = {
                        color: semanticColors.inputPlaceholderText,
                    },
                    _c['&:hover .ms-Dropdown-title'] = {
                        color: extendedSemanticColors.commandBarButtonTextHover,
                        borderColor: semanticColors.inputText,
                    },
                    _c['&:focus .ms-Dropdown-title'] = {
                        borderColor: semanticColors.focusBorder,
                    },
                    _c['&:active .ms-Dropdown-title'] = {
                        color: extendedSemanticColors.commandBarButtonTextHover,
                        borderColor: semanticColors.focusBorder,
                    },
                    // CaretDown states are the same for focus, hover, active.
                    _c['&:hover .ms-Dropdown-caretDown, &:focus .ms-Dropdown-caretDown, &:active .ms-Dropdown-caretDown'] = {
                        color: semanticColors.inputText,
                    },
                    _c),
            },
            hasError && {
                selectors: (_d = {},
                    _d['.ms-Dropdown-title'] = {
                        borderColor: semanticColors.errorText,
                    },
                    _d),
            },
        ],
        dropdownDivider: {
            backgroundColor: extendedSemanticColors.rowBorder,
        },
        title: [
            {
                height: StyleConstants.inputControlHeight,
                lineHeight: '21px',
                borderColor: semanticColors.inputBorder,
                selectors: {
                    span: {
                        lineHeight: StyleConstants.inputControlHeight,
                        position: 'absolute',
                    },
                },
            },
            hasError && {
                borderColor: semanticColors.errorBackground,
                borderWidth: StyleConstants.borderWidthError,
            },
            isOpen &&
                !hasError && {
                borderColor: semanticColors.inputBorder,
            },
            disabled && {
                color: semanticColors.disabledBodyText,
            },
        ],
        dropdownItemsWrapper: {
            backgroundColor: semanticColors.bodyBackground,
            borderColor: semanticColors.inputBorder,
            border: 0,
        },
        dropdownItem: {
            color: semanticColors.bodyText,
            fontSize: theme.fonts.medium.fontSize,
            backgroundColor: extendedSemanticColors.controlBackground,
            selectors: {
                // active: Mouse down on the item, then drag outside.
                '&:hover, &:active, &:hover:focus': {
                    backgroundColor: semanticColors.listItemBackgroundHovered,
                    borderColor: 'transparent',
                    color: extendedSemanticColors.commandBarButtonTextHover,
                },
            },
        },
        dropdownItemDisabled: {
            color: semanticColors.primaryButtonTextDisabled,
            fontSize: theme.fonts.medium.fontSize,
            backgroundColor: extendedSemanticColors.controlBackground,
        },
        dropdownItemSelected: {
            fontSize: theme.fonts.medium.fontSize,
            backgroundColor: semanticColors.listItemBackgroundChecked,
            color: extendedSemanticColors.commandBarButtonTextHover,
            selectors: {
                '&:hover, &:focus, &:active, &:hover:focus': {
                    backgroundColor: semanticColors.listItemBackgroundChecked,
                    borderColor: 'transparent',
                },
            },
        },
        dropdownItemHeader: {
            color: semanticColors.inputText,
            fontWeight: '600',
            backgroundColor: extendedSemanticColors.controlBackground,
        },
        subComponentStyles: {
            panel: {},
            label: {},
            multiSelectItem: {
                root: {
                    padding: 0,
                    backgroundColor: extendedSemanticColors.controlBackground,
                    selectors: {
                        // active: Mouse down on the item, then drag outside.
                        '&:hover, &:active, &:hover:focus': {
                            backgroundColor: extendedSemanticColors.controlBackground,
                        },
                    },
                },
            },
        },
        errorMessage: {
            color: semanticColors.errorText,
            fontSize: theme.fonts.medium.fontSize,
        },
    };
};
//# sourceMappingURL=DropDown.styles.js.map
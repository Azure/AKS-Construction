{"version":3,"file":"createComponent.js","sourceRoot":"../src/","sources":["createComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { concatStyleSets, IStyleSet, ITheme } from '@fluentui/style-utilities';\nimport { Customizations, CustomizerContext, ICustomizerContext } from '@fluentui/utilities';\nimport { createFactory } from './slots';\nimport { assign } from './utilities';\n\nimport {\n  IComponentOptions,\n  ICustomizationProps,\n  IStyleableComponentProps,\n  IStylesFunctionOrObject,\n  IToken,\n  ITokenFunction,\n  IViewComponent,\n} from './IComponent';\nimport { IDefaultSlotProps, ISlotCreator, ValidProps } from './ISlots';\n\n/**\n * Assembles a higher order component based on the following: styles, theme, view, and state.\n * Imposes a separation of concern and centralizes styling processing to increase ease of use and robustness\n * in how components use and apply styling and theming.\n *\n * Automatically merges and applies themes and styles with theme / styleprops having the highest priority.\n * State component, if provided, is passed in props for processing. Props from state / user are automatically processed\n * and styled before finally being passed to view.\n *\n * State components should contain all stateful behavior and should not generate any JSX, but rather simply call\n * the view prop.\n *\n * Views should simply be stateless pure functions that receive all props needed for rendering their output.\n *\n * State component is optional. If state is not provided, created component is essentially a functional\n * stateless component.\n *\n * @param options - component Component options. See IComponentOptions for more detail.\n */\nexport function createComponent<\n  TComponentProps extends ValidProps,\n  TTokens,\n  TStyleSet extends IStyleSet<TStyleSet>,\n  TViewProps extends TComponentProps = TComponentProps,\n  TStatics = {}\n>(\n  view: IViewComponent<TViewProps>,\n  options: IComponentOptions<TComponentProps, TTokens, TStyleSet, TViewProps, TStatics> = {},\n): React.FunctionComponent<TComponentProps> & TStatics {\n  const { factoryOptions = {} } = options;\n  const { defaultProp } = factoryOptions;\n\n  const ResultComponent: React.FunctionComponent<TComponentProps> = (\n    componentProps: TComponentProps & IStyleableComponentProps<TViewProps, TTokens, TStyleSet>,\n  ) => {\n    const settings: ICustomizationProps<TViewProps, TTokens, TStyleSet> = _getCustomizations(\n      options.displayName,\n      React.useContext(CustomizerContext),\n      options.fields,\n    );\n\n    const stateReducer = options.state;\n\n    if (stateReducer) {\n      // Don't assume state will return all props, so spread useState result over component props.\n      componentProps = {\n        ...componentProps,\n        ...stateReducer(componentProps),\n      };\n    }\n\n    const theme = componentProps.theme || settings.theme;\n\n    const tokens = _resolveTokens(componentProps, theme, options.tokens, settings.tokens, componentProps.tokens);\n    const styles = _resolveStyles(\n      componentProps,\n      theme,\n      tokens,\n      options.styles,\n      settings.styles,\n      componentProps.styles,\n    );\n\n    const viewProps = ({\n      ...componentProps,\n      styles,\n      tokens,\n      _defaultStyles: styles,\n      theme,\n    } as unknown) as TViewProps & IDefaultSlotProps<any>;\n\n    return view(viewProps);\n  };\n\n  ResultComponent.displayName = options.displayName || view.name;\n\n  // If a shorthand prop is defined, create a factory for the component.\n  // TODO: This shouldn't be a concern of createComponent.. factoryOptions should just be forwarded.\n  //       Need to weigh creating default factories on component creation vs. memoizing them on use in slots.tsx.\n  if (defaultProp) {\n    (ResultComponent as ISlotCreator<TComponentProps, any>).create = createFactory(ResultComponent, { defaultProp });\n  }\n\n  assign(ResultComponent, options.statics);\n\n  // Later versions of TypeSript should allow us to merge objects in a type safe way and avoid this cast.\n  return ResultComponent as React.FunctionComponent<TComponentProps> & TStatics;\n}\n\n/**\n * Resolve all styles functions with both props and tokens and flatten results along with all styles objects.\n */\nfunction _resolveStyles<TProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>>(\n  props: TProps,\n  theme: ITheme,\n  tokens: TTokens,\n  ...allStyles: (IStylesFunctionOrObject<TProps, TTokens, TStyleSet> | undefined)[]\n): ReturnType<typeof concatStyleSets> {\n  return concatStyleSets(\n    ...allStyles.map((styles: IStylesFunctionOrObject<TProps, TTokens, TStyleSet> | undefined) =>\n      typeof styles === 'function' ? styles(props, theme, tokens) : styles,\n    ),\n  );\n}\n\n/**\n * Resolve all tokens functions with props flatten results along with all tokens objects.\n */\nfunction _resolveTokens<TViewProps, TTokens>(\n  props: TViewProps,\n  theme: ITheme,\n  ...allTokens: (IToken<TViewProps, TTokens> | false | null | undefined)[]\n): TTokens {\n  const tokens = {};\n\n  for (let currentTokens of allTokens) {\n    if (currentTokens) {\n      // TODO: why is this cast needed? TS seems to think there is a (TToken | Function) union from somewhere.\n      currentTokens =\n        typeof currentTokens === 'function'\n          ? (currentTokens as ITokenFunction<TViewProps, TTokens>)(props, theme)\n          : currentTokens;\n\n      if (Array.isArray(currentTokens)) {\n        currentTokens = _resolveTokens(props, theme, ...currentTokens);\n      }\n\n      assign(tokens, currentTokens);\n    }\n  }\n\n  return tokens as TTokens;\n}\n\n/**\n * Helper function for calling Customizations.getSettings falling back to default fields.\n *\n * @param displayName Displayable name for component.\n * @param context React context passed to component containing contextual settings.\n * @param fields Optional list of properties to grab from global store and context.\n */\nfunction _getCustomizations<TViewProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>>(\n  displayName: string | undefined,\n  context: ICustomizerContext,\n  fields?: string[],\n): ICustomizationProps<TViewProps, TTokens, TStyleSet> {\n  // TODO: do we want field props? should fields be part of IComponent and used here?\n  // TODO: should we centrally define DefaultFields? (not exported from styling)\n  // TODO: tie this array to ICustomizationProps, such that each array element is keyof ICustomizationProps\n  const DefaultFields = ['theme', 'styles', 'tokens'];\n  return Customizations.getSettings(fields || DefaultFields, displayName, context.customizations);\n}\n"]}
{"version":3,"file":"ISlots.js","sourceRoot":"../src/","sources":["ISlots.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { IStyle, ITheme } from '@fluentui/style-utilities';\nimport { IComponentStyles } from './IComponent';\n\n/**\n * Signature of components that have component factories.\n */\nexport interface ISlotCreator<TProps extends ValidProps, TShorthandProp extends ValidShorthand> {\n  create?: ISlotFactory<TProps, TShorthandProp>;\n}\n\n/**\n * Slottable version of React.ComponentType.\n */\nexport type ISlottableComponentType<\n  TProps extends ValidProps,\n  TShorthandProp extends ValidShorthand\n> = React.ComponentType<TProps> & ISlotCreator<TProps, TShorthandProp>;\n\n/**\n * Slottable version of React.ReactType.\n */\nexport type ISlottableReactType<\n  TProps extends ValidProps,\n  TShorthandProp extends ValidShorthand\n> = React.ElementType<TProps> & ISlotCreator<TProps, TShorthandProp>;\n\n/**\n * Props generated by Foundation.\n */\nexport interface IProcessedSlotProps {\n  className?: string;\n}\n\n/**\n * An interface for defining slots. Each key in TSlot must point to an ISlottableType.\n */\nexport type ISlotDefinition<TSlots> = { [slot in keyof TSlots]: React.ElementType<ExtractProps<TSlots[slot]>> };\n\n/**\n * Created Slot structure used for rendering by components.\n */\nexport interface ISlot<TProps> {\n  (componentProps: React.PropsWithChildren<TProps> | undefined | null): ReturnType<React.FunctionComponent>;\n  isSlot?: boolean;\n}\n\n/**\n * Interface for a slot factory that consumes both component and user slot prop and generates rendered output.\n */\nexport type ISlotFactory<TProps extends ValidProps, TShorthandProp extends ValidShorthand> = (\n  componentProps: TProps & IProcessedSlotProps,\n  userProps: ISlotProp<TProps, TShorthandProp>,\n  slotOptions: ISlotOptions<TProps> | undefined,\n  defaultStyles: IStyle,\n  theme?: ITheme,\n) => ReturnType<React.FunctionComponent<TProps>>;\n\n/**\n * Defines valid shorthand prop types. These should match the defaultProp type provided to createComponent.\n */\nexport type ValidShorthand = string | number | boolean;\n\n/**\n * Defines valid prop types.\n */\n// We can constrain TProps more clearly (notably also exclude Functions) once this TS PR is merged:\n// https://github.com/Microsoft/TypeScript/pull/29317\nexport type ValidProps = object;\n\n/**\n * Extracts props type from ISlotProp definition.\n */\nexport type ExtractProps<TUnion> = TUnion extends ISlotProp<infer TProps> ? TProps : never;\n\n/**\n * Extracts shorthand type from union of ValidShorthand types.\n */\nexport type ExtractShorthand<TUnion> = TUnion extends boolean\n  ? boolean\n  : TUnion extends number\n  ? number\n  : TUnion extends string\n  ? string\n  : never;\n\n/**\n * Interface for aggregated slots objects used internally by components. Extract the TProps type passed\n * into ISlotProp<TProps> to define the ISlot using TProps.\n */\nexport type ISlots<TSlots> = { [slot in keyof TSlots]: ISlot<ExtractProps<TSlots[slot]>> };\n\n/**\n * Automatically defines 'slots' prop based on TSlots props.\n */\nexport type ISlottableProps<TSlots> = TSlots & {\n  slots?: { [key in keyof TSlots]+?: ISlotOptions<ExtractProps<TSlots[key]>> };\n};\n\n/**\n * Defines user properties that are automatically applied by Slot utilities using slot name.\n */\nexport interface IDefaultSlotProps<TSlots> {\n  _defaultStyles: IComponentStyles<TSlots>;\n}\n\n/**\n * Defines the primary slot prop interface components should use to define their slot props.\n */\n// TODO: Constrain TProps more clearly (notably also exclude Functions) once this TS PR is merged:\n// https://github.com/Microsoft/TypeScript/pull/29317\nexport type ISlotProp<TProps extends ValidProps, TShorthandProp extends ValidShorthand = never> =\n  | TShorthandProp\n  | TProps;\n\n/**\n * Defines the slot options object for all slot props:\n *    1. ISlotRender function.\n *    2. React component with TProps interface.\n */\n\n// TODO: create mutually exclusive type for component & render, but only if it's a readable error for users.\nexport interface ISlotOptions<TProps> {\n  component?: React.ElementType<TProps>;\n  render?: ISlotRender<TProps>;\n}\n\n/**\n * Content rendering provided by component.\n */\nexport type ISlotRender<TProps> = (\n  props: React.PropsWithChildren<TProps>,\n  defaultComponent: React.ComponentType<TProps>,\n) => ReturnType<React.FunctionComponent<TProps>>;\n"]}
{"version":3,"file":"slots.js","sourceRoot":"../src/","sources":["slots.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { mergeCss } from '@fluentui/merge-styles';\nimport { IStyle, ITheme } from '@fluentui/style-utilities';\nimport { getRTL, memoizeFunction } from '@fluentui/utilities';\nimport { assign } from './utilities';\nimport { IFactoryOptions } from './IComponent';\nimport {\n  ISlottableReactType,\n  ISlot,\n  ISlots,\n  ISlotDefinition,\n  ISlotFactory,\n  ISlotProp,\n  ISlottableProps,\n  ISlotOptions,\n  IDefaultSlotProps,\n  IProcessedSlotProps,\n  ValidProps,\n  ValidShorthand,\n} from './ISlots';\n\n/**\n * This function is required for any module that uses slots.\n *\n * This function is a slot resolver that automatically evaluates slot functions to generate React elements.\n * A byproduct of this resolver is that it removes slots from the React hierarchy by bypassing React.createElement.\n *\n * To use this function on a per-file basis, use the jsx directive targeting withSlots.\n * This directive must be the FIRST LINE in the file to work correctly.\n * Usage of this pragma also requires withSlots import statement.\n *\n * See React.createElement\n */\n// Can't use typeof on React.createElement since it's overloaded. Approximate createElement's signature for now\n// and widen as needed.\nexport function withSlots<P>(\n  type: ISlot<P> | React.FunctionComponent<P> | string,\n  props?: (React.Attributes & P) | null,\n  ...children: React.ReactNode[]\n): ReturnType<React.FunctionComponent<P>> {\n  const slotType = type as ISlot<P>;\n  if (slotType.isSlot) {\n    // Since we are bypassing createElement, use React.Children.toArray to make sure children are\n    // properly assigned keys.\n    // TODO: should this be mutating? does React mutate children subprop with createElement?\n    // TODO: will toArray clobber existing keys?\n    // TODO: React generates warnings because it doesn't detect hidden member _store that is set in createElement.\n    //        Even children passed to createElement without keys don't generate this warning.\n    //        Is there a better way to prevent slots from appearing in hierarchy? toArray doesn't address root issue.\n    children = React.Children.toArray(children);\n\n    // TODO: There is something weird going on here with children embedded in props vs. rest args.\n    // Comment out these lines to see. Make sure this function is doing the right things.\n    if (children.length === 0) {\n      return slotType(props);\n    }\n\n    return slotType({ ...(props as any), children });\n  } else {\n    // TODO: Are there some cases where children should NOT be spread? Also, spreading reraises perf question.\n    //        Children had to be spread to avoid breaking KeytipData in Toggle.view:\n    //        react-dom.development.js:18931 Uncaught TypeError: children is not a function\n    //        Without spread, function child is a child array of one element\n    // TODO: is there a reason this can't be:\n    // return React.createElement.apply(this, arguments);\n    return React.createElement(type, props, ...children);\n  }\n}\n\n/**\n * This function creates factories that render ouput depending on the user ISlotProp props passed in.\n * @param DefaultComponent - Base component to render when not overridden by user props.\n * @param options - Factory options, including defaultProp value for shorthand prop mapping.\n * @returns ISlotFactory function used for rendering slots.\n */\nexport function createFactory<TProps extends ValidProps, TShorthandProp extends ValidShorthand = never>(\n  DefaultComponent: React.ComponentType<TProps>,\n  options: IFactoryOptions<TProps> = {},\n): ISlotFactory<TProps, TShorthandProp> {\n  const { defaultProp = 'children' } = options;\n\n  const result: ISlotFactory<TProps, TShorthandProp> = (\n    componentProps,\n    userProps,\n    userSlotOptions,\n    defaultStyles,\n    theme,\n  ) => {\n    // If they passed in raw JSX, just return that.\n    if (React.isValidElement(userProps)) {\n      return userProps;\n    }\n\n    const flattenedUserProps: TProps | undefined = _translateShorthand(defaultProp as string, userProps);\n    const finalProps = _constructFinalProps(defaultStyles, theme, componentProps, flattenedUserProps);\n\n    if (userSlotOptions) {\n      if (userSlotOptions.component) {\n        // TODO: Remove cast if possible. This cast is needed because TS errors on the intrinsic portion of ReactType.\n        // return <userSlotOptions.component {...finalProps} />;\n        const UserComponent = userSlotOptions.component as React.ComponentType<TProps>;\n        return <UserComponent {...finalProps} />;\n      }\n\n      if (userSlotOptions.render) {\n        return userSlotOptions.render(finalProps, DefaultComponent);\n      }\n    }\n\n    return <DefaultComponent {...finalProps} />;\n  };\n\n  return result;\n}\n\n/**\n * Default factory for components without explicit factories.\n */\nconst defaultFactory = memoizeFunction(type => createFactory(type));\n\n/**\n * This function generates slots that can be used in JSX given a definition of slots and their corresponding types.\n * @param userProps - Props as pass to component.\n * @param slots - Slot definition object defining the default slot component for each slot.\n * @returns A set of created slots that components can render in JSX.\n */\nexport function getSlots<TComponentProps extends ISlottableProps<TComponentSlots>, TComponentSlots>(\n  userProps: TComponentProps,\n  slots: ISlotDefinition<Required<TComponentSlots>>,\n): ISlots<Required<TComponentSlots>> {\n  const result: ISlots<Required<TComponentSlots>> = {} as ISlots<Required<TComponentSlots>>;\n\n  // userProps already has default props mixed in by createComponent. Recast here to gain typing for this function.\n  const mixedProps = userProps as TComponentProps & IDefaultSlotProps<TComponentSlots>;\n\n  for (const name in slots) {\n    if (slots.hasOwnProperty(name)) {\n      // This closure method requires the use of withSlots to prevent unnecessary rerenders. This is because React\n      // detects each closure as a different component (since it is a new instance) from the previous one and then\n      // forces a rerender of the entire slot subtree. For now, the only way to avoid this is to use withSlots, which\n      // bypasses the call to React.createElement.\n      const slot: ISlots<Required<TComponentSlots>>[keyof TComponentSlots] = (componentProps, ...args: any[]) => {\n        if (args.length > 0) {\n          // If React.createElement is being incorrectly used with slots, there will be additional arguments.\n          // We can detect these additional arguments and error on their presence.\n          throw new Error('Any module using getSlots must use withSlots. Please see withSlots javadoc for more info.');\n        }\n        // TODO: having TS infer types here seems to cause infinite loop.\n        //   use explicit types or casting to preserve typing if possible.\n        // TODO: this should be a lookup on TProps property instead of being TProps directly, which is probably\n        //   causing the infinite loop\n        return _renderSlot<any, any, any>(\n          slots[name],\n          // TODO: this cast to any is hiding a relationship issue between the first two args\n          componentProps as any,\n          mixedProps[name],\n          mixedProps.slots && mixedProps.slots[name],\n          // _defaultStyles should always be present, but a check for existence is added to make view tests\n          // easier to use.\n          mixedProps._defaultStyles && mixedProps._defaultStyles[name],\n          (mixedProps as any).theme,\n        );\n      };\n      slot.isSlot = true;\n      result[name] = slot;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Helper function that translates shorthand as needed.\n * @param defaultProp\n * @param slotProps\n */\nfunction _translateShorthand<TProps extends ValidProps, TShorthandProp extends ValidShorthand>(\n  defaultProp: string,\n  slotProps: ISlotProp<TProps, TShorthandProp>,\n): TProps | undefined {\n  let transformedProps: TProps | undefined;\n\n  if (typeof slotProps === 'string' || typeof slotProps === 'number' || typeof slotProps === 'boolean') {\n    transformedProps = {\n      [defaultProp]: slotProps as any,\n    } as TProps;\n  } else {\n    transformedProps = slotProps as TProps;\n  }\n\n  return transformedProps;\n}\n\n/**\n * Helper function that constructs final styles and props given a series of props ordered by increasing priority.\n */\nfunction _constructFinalProps<TProps extends IProcessedSlotProps>(\n  defaultStyles: IStyle,\n  theme?: ITheme,\n  ...allProps: (TProps | undefined)[]\n): TProps {\n  const finalProps: TProps = {} as any;\n  const classNames: (string | undefined)[] = [];\n\n  for (const props of allProps) {\n    classNames.push(props && props.className);\n    assign(finalProps, props);\n  }\n\n  finalProps.className = mergeCss([defaultStyles, classNames], { rtl: getRTL(theme) });\n\n  return finalProps;\n}\n\n/**\n * Render a slot given component and user props. Uses component factory if available, otherwise falls back\n * to default factory.\n * @param ComponentType Factory component type.\n * @param componentProps The properties passed into slot from within the component.\n * @param userProps The user properties passed in from outside of the component.\n */\nfunction _renderSlot<\n  TSlotComponent extends ISlottableReactType<TSlotProps, TSlotShorthand>,\n  TSlotProps extends ValidProps,\n  TSlotShorthand extends ValidShorthand\n>(\n  ComponentType: TSlotComponent,\n  componentProps: TSlotProps,\n  userProps: ISlotProp<TSlotProps, TSlotShorthand>,\n  slotOptions: ISlotOptions<TSlotProps> | undefined,\n  defaultStyles: IStyle,\n  theme?: ITheme,\n): ReturnType<React.FunctionComponent> {\n  if (ComponentType.create !== undefined) {\n    return ComponentType.create(componentProps, userProps, slotOptions, defaultStyles);\n  } else {\n    // TODO: need to resolve typing / generic issues passing through memoizeFunction. for now, cast to 'unknown'\n    return ((defaultFactory(ComponentType) as unknown) as ISlotFactory<TSlotProps, TSlotShorthand>)(\n      componentProps,\n      userProps,\n      slotOptions,\n      defaultStyles,\n      theme,\n    );\n  }\n}\n"]}
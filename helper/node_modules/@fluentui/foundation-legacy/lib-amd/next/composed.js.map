{"version":3,"file":"composed.js","sourceRoot":"../src/","sources":["next/composed.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { mergeStyles } from '@fluentui/merge-styles';\nimport { concatStyleSets, IStyleSet, ITheme } from '@fluentui/style-utilities';\nimport { Customizations, CustomizerContext, ICustomizerContext } from '@fluentui/utilities';\nimport { createFactory, getSlots } from '../slots';\nimport { assign } from '../utilities';\nimport {\n  ICustomizationProps,\n  IStyleableComponentProps,\n  IStylesFunctionOrObject,\n  IToken,\n  ITokenFunction,\n} from '../IComponent';\nimport { IComponentOptions, IPartialSlotComponent, IRecompositionComponentOptions, ISlotComponent } from './IComponent';\nimport { IDefaultSlotProps, ValidProps, ISlottableProps, ISlotCreator, ISlotDefinition } from '../ISlots';\nimport { IFoundationComponent } from './ISlots';\n\ninterface IClassNamesMapNode {\n  className?: string;\n  map: IClassNamesMap;\n}\n\ninterface IClassNamesMap {\n  [key: string]: IClassNamesMapNode;\n}\n\nconst memoizedClassNamesMap: IClassNamesMap = {};\n\n/**\n * Assembles a higher order component based on the following: styles, theme, view, and state.\n * Imposes a separation of concern and centralizes styling processing to increase ease of use and robustness\n * in how components use and apply styling and theming.\n *\n * Automatically merges and applies themes and styles with theme / styleprops having the highest priority.\n * State component, if provided, is passed in props for processing. Props from state / user are automatically processed\n * and styled before finally being passed to view.\n *\n * State components should contain all stateful behavior and should not generate any JSX, but rather simply call\n * the view prop.\n *\n * Views should simply be stateless pure functions that receive all props needed for rendering their output.\n *\n * State component is optional. If state is not provided, created component is essentially a functional\n * stateless component.\n *\n * @param options - component Component options. See IComponentOptions for more detail.\n */\nexport function composed<\n  TComponentProps extends ValidProps & ISlottableProps<TComponentSlots>,\n  TTokens,\n  TStyleSet extends IStyleSet<TStyleSet>,\n  TViewProps extends TComponentProps = TComponentProps,\n  TComponentSlots = {},\n  TStatics = {}\n>(\n  options: IComponentOptions<TComponentProps, TTokens, TStyleSet, TViewProps, TComponentSlots, TStatics>,\n): IFoundationComponent<TComponentProps, TTokens, TStyleSet, TViewProps, TComponentSlots, TStatics> & TStatics;\n\n/**\n * Recomposes a functional component based on a base component and the following set of options: styles, theme, view,\n * and state. Imposes a separation of concern and centralizes styling processing to increase ease of use and robustness\n * in how components use and apply styling and theming.\n *\n * Automatically merges and applies themes and styles with theme / styleprops having the highest priority.\n * State component, if provided, is passed in props for processing. Props from state / user are automatically processed\n * and styled before finally being passed to view.\n *\n * State components should contain all stateful behavior and should not generate any JSX, but rather simply call\n * the view prop.\n *\n * Views should simply be stateless pure functions that receive all props needed for rendering their output.\n *\n * State component is optional. If state is not provided, created component is essentially a functional\n * stateless component.\n *\n * @param baseComponent - base component to recompose\n * @param options - component Component recomposition options. See IComponentOptions for more detail.\n */\nexport function composed<\n  TComponentProps extends ValidProps & ISlottableProps<TComponentSlots>,\n  TTokens,\n  TStyleSet extends IStyleSet<TStyleSet>,\n  TViewProps extends TComponentProps = TComponentProps,\n  TComponentSlots = {},\n  TStatics = {}\n>(\n  baseComponent: React.FunctionComponent,\n  options: IRecompositionComponentOptions<TComponentProps, TTokens, TStyleSet, TViewProps, TComponentSlots, TStatics>,\n): IFoundationComponent<TComponentProps, TTokens, TStyleSet, TViewProps, TComponentSlots, TStatics> & TStatics;\n\n/**\n * Assembles a higher order component based on a set of options or recomposes a functional component based on a\n * base component and the a set of options. This set of options is comprised by: styles, theme, view, and state.\n *\n * Imposes a separation of concern and centralizes styling processing to increase ease of use and robustness\n * in how components use and apply styling and theming.\n *\n * Automatically merges and applies themes and styles with theme / styleprops having the highest priority.\n * State component, if provided, is passed in props for processing. Props from state / user are automatically processed\n * and styled before finally being passed to view.\n *\n * State components should contain all stateful behavior and should not generate any JSX, but rather simply call\n * the view prop.\n *\n * Views should simply be stateless pure functions that receive all props needed for rendering their output.\n *\n * State component is optional. If state is not provided, created component is essentially a functional\n * stateless component.\n *\n * @param baseComponentOrOptions - base component to recompose or component Component options to compose an HOC.\n * See IComponentOptions for more detail.\n * @param recompositionOptions - component Component recomposition options. See IComponentOptions for more detail.\n */\nexport function composed<\n  TComponentProps extends ValidProps & ISlottableProps<TComponentSlots>,\n  TTokens,\n  TStyleSet extends IStyleSet<TStyleSet>,\n  TViewProps extends TComponentProps = TComponentProps,\n  TComponentSlots = {},\n  TStatics = {}\n>(\n  baseComponentOrOptions:\n    | IFoundationComponent<TComponentProps, TTokens, TStyleSet, TViewProps, TComponentSlots, TStatics>\n    | IComponentOptions<TComponentProps, TTokens, TStyleSet, TViewProps, TComponentSlots, TStatics> = {},\n  recompositionOptions?: IRecompositionComponentOptions<\n    TComponentProps,\n    TTokens,\n    TStyleSet,\n    TViewProps,\n    TComponentSlots,\n    TStatics\n  >,\n): IFoundationComponent<TComponentProps, TTokens, TStyleSet, TViewProps, TComponentSlots, TStatics> & TStatics {\n  // Check if we are composing or recomposing.\n  let options: IComponentOptions<TComponentProps, TTokens, TStyleSet, TViewProps, TComponentSlots, TStatics>;\n  if (typeof baseComponentOrOptions === 'function' && baseComponentOrOptions.__options) {\n    const baseComponentOptions = baseComponentOrOptions.__options;\n    const recompositionSlots = recompositionOptions ? recompositionOptions.slots : undefined;\n\n    options = {\n      ...baseComponentOptions,\n      ...recompositionOptions,\n      slots: props => ({\n        ...resolveSlots(baseComponentOptions.slots, props),\n        ...resolveSlots(recompositionSlots, props),\n      }),\n    };\n  } else {\n    options = baseComponentOrOptions;\n  }\n\n  const { factoryOptions = {}, view } = options;\n  const { defaultProp } = factoryOptions;\n\n  const ResultComponent: IFoundationComponent<\n    TComponentProps,\n    TTokens,\n    TStyleSet,\n    TViewProps,\n    TComponentSlots,\n    TStatics\n  > = (\n    componentProps: TViewProps &\n      IStyleableComponentProps<TViewProps, TTokens, TStyleSet> & { children?: React.ReactNode },\n  ) => {\n    const settings: ICustomizationProps<TViewProps, TTokens, TStyleSet> = _getCustomizations(\n      options.displayName,\n      React.useContext(CustomizerContext),\n      options.fields,\n    );\n\n    const stateReducer = options.state;\n\n    if (stateReducer) {\n      // Don't assume state will return all props, so spread useState result over component props.\n      componentProps = {\n        ...componentProps,\n        ...stateReducer(componentProps),\n      };\n    }\n\n    const theme = componentProps.theme || settings.theme;\n    const tokens = _resolveTokens(componentProps, theme, options.tokens, settings.tokens, componentProps.tokens) as any;\n    let styles;\n\n    const finalStyles: { [key: string]: string | undefined } = {};\n\n    // We get the entry in the memoized classNamesMap for the current component or create one if it doesn't exist.\n    const displayName = options.displayName;\n\n    // If no displayName has been specified, then do not use caching.\n    if (displayName) {\n      if (!memoizedClassNamesMap.hasOwnProperty(displayName)) {\n        memoizedClassNamesMap[displayName] = { map: {} };\n      }\n\n      let current = memoizedClassNamesMap[displayName];\n\n      // Memoize based on the tokens definition.\n      const tokenKeys = Object.keys(tokens).sort();\n      for (const key of tokenKeys) {\n        let nextToken = tokens[key];\n        if (nextToken === undefined) {\n          nextToken = '__undefined__';\n        }\n        if (!current.map.hasOwnProperty(nextToken)) {\n          current.map[nextToken] = { map: {} };\n        }\n        current = current.map[nextToken];\n      }\n\n      // Memoize the slots so we only have to get Object.keys once.\n      let slots = (memoizedClassNamesMap[displayName] as any).slots;\n      let defaultStyles;\n      if (!slots) {\n        defaultStyles = _resolveStyles(componentProps, theme, tokens, options.styles, settings.styles);\n        (memoizedClassNamesMap[displayName] as any).slots = Object.keys(defaultStyles);\n        slots = (memoizedClassNamesMap[displayName] as any).slots;\n      }\n\n      // Memoize based on the base styling of the component (i.e. without user specified props).\n      for (const key of slots) {\n        if (!current.map.hasOwnProperty(key)) {\n          // Get default styles once if we didn't get them before.\n          if (!defaultStyles) {\n            defaultStyles = _resolveStyles(componentProps, theme, tokens, options.styles, settings.styles);\n          }\n          current.map[key] = { className: mergeStyles(defaultStyles[key]), map: {} };\n        }\n        finalStyles[key] = current.map[key].className;\n      }\n\n      if (componentProps.styles) {\n        const userStyles: any =\n          typeof componentProps.styles === 'function'\n            ? componentProps.styles(componentProps as TViewProps, theme, tokens)\n            : componentProps.styles;\n        styles = concatStyleSets(styles, userStyles);\n        if (userStyles) {\n          const userStyleKeys = Object.keys(userStyles);\n          for (const key of userStyleKeys) {\n            if (finalStyles.hasOwnProperty(key)) {\n              finalStyles[key] = mergeStyles([current.map[key].className], userStyles[key]);\n            } else {\n              finalStyles[key] = mergeStyles(userStyles[key]);\n            }\n          }\n        }\n      }\n    } else {\n      styles = _resolveStyles(componentProps, theme, tokens, options.styles, settings.styles, componentProps.styles);\n    }\n\n    const viewProps = {\n      ...componentProps,\n      styles,\n      tokens,\n      _defaultStyles: displayName ? finalStyles : styles,\n    } as TViewProps & IDefaultSlotProps<any>;\n\n    if (!options.slots) {\n      throw new Error(`Component ${options.displayName || (view && view.name) || ''} is missing slot definitions.`);\n    }\n\n    const Slots =\n      typeof options.slots === 'function'\n        ? getSlots(viewProps, options.slots(viewProps))\n        : getSlots(viewProps, options.slots);\n\n    return view ? view(viewProps, Slots) : null;\n  };\n\n  ResultComponent.displayName = options.displayName || (view && view.name);\n\n  // If a shorthand prop is defined, create a factory for the component.\n  // TODO: This shouldn't be a concern of createComponent.. factoryOptions should just be forwarded.\n  //       Need to weigh creating default factories on component creation vs. memoizing them on use in slots.tsx.\n  if (defaultProp) {\n    (ResultComponent as ISlotCreator<TComponentProps, any>).create = createFactory(ResultComponent, { defaultProp });\n  }\n\n  ResultComponent.__options = options;\n\n  assign(ResultComponent, options.statics);\n\n  // Later versions of TypeSript should allow us to merge objects in a type safe way and avoid this cast.\n  return ResultComponent as IFoundationComponent<\n    TComponentProps,\n    TTokens,\n    TStyleSet,\n    TViewProps,\n    TComponentSlots,\n    TStatics\n  > &\n    TStatics;\n}\n\n/**\n * Resolve the passed slots as a function or an object.\n *\n * @param slots - Slots that need to be resolved as a function or an object.\n * @param data - Data to pass to resolve if the first argument was a function.\n */\nexport function resolveSlots<TComponentProps extends ISlottableProps<TComponentSlots>, TComponentSlots>(\n  slots:\n    | IPartialSlotComponent<TComponentProps, TComponentSlots>\n    | ISlotComponent<TComponentProps, TComponentSlots>\n    | undefined,\n  data: TComponentProps,\n): ISlotDefinition<Required<TComponentSlots>> {\n  const resolvedSlots = slots ? (typeof slots === 'function' ? slots(data) : slots) : {};\n  return resolvedSlots as ISlotDefinition<Required<TComponentSlots>>;\n}\n\n/**\n * Resolve all styles functions with both props and tokens and flatten results along with all styles objects.\n */\nfunction _resolveStyles<TProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>>(\n  props: TProps,\n  theme: ITheme,\n  tokens: TTokens,\n  ...allStyles: (IStylesFunctionOrObject<TProps, TTokens, TStyleSet> | undefined)[]\n): ReturnType<typeof concatStyleSets> {\n  return concatStyleSets(\n    ...allStyles.map((styles: IStylesFunctionOrObject<TProps, TTokens, TStyleSet> | undefined) =>\n      typeof styles === 'function' ? styles(props, theme, tokens) : styles,\n    ),\n  );\n}\n\n/**\n * Resolve all tokens functions with props flatten results along with all tokens objects.\n */\nfunction _resolveTokens<TViewProps, TTokens>(\n  props: TViewProps,\n  theme: ITheme,\n  ...allTokens: (IToken<TViewProps, TTokens> | false | null | undefined)[]\n): TTokens {\n  const tokens = {};\n\n  for (let currentTokens of allTokens) {\n    if (currentTokens) {\n      // TODO: why is this cast needed? TS seems to think there is a (TToken | Function) union from somewhere.\n      currentTokens =\n        typeof currentTokens === 'function'\n          ? (currentTokens as ITokenFunction<TViewProps, TTokens>)(props, theme)\n          : currentTokens;\n\n      if (Array.isArray(currentTokens)) {\n        currentTokens = _resolveTokens(props, theme, ...currentTokens);\n      }\n\n      assign(tokens, currentTokens);\n    }\n  }\n\n  return tokens as TTokens;\n}\n\n/**\n * Helper function for calling Customizations.getSettings falling back to default fields.\n *\n * @param displayName Displayable name for component.\n * @param context React context passed to component containing contextual settings.\n * @param fields Optional list of properties to grab from global store and context.\n */\nfunction _getCustomizations<TViewProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>>(\n  displayName: string | undefined,\n  context: ICustomizerContext,\n  fields?: string[],\n): ICustomizationProps<TViewProps, TTokens, TStyleSet> {\n  // TODO: do we want field props? should fields be part of IComponent and used here?\n  // TODO: should we centrally define DefaultFields? (not exported from styling)\n  // TODO: tie this array to ICustomizationProps, such that each array element is keyof ICustomizationProps\n  const DefaultFields = ['theme', 'styles', 'tokens'];\n  return Customizations.getSettings(fields || DefaultFields, displayName, context.customizations);\n}\n"]}
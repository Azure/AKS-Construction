{"version":3,"file":"IComponent.js","sourceRoot":"../src/","sources":["IComponent.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { IStyle, IStyleSet, ITheme } from '@fluentui/style-utilities';\n\n// TODO: Known TypeScript issue is widening return type checks when using function type declarations.\n//        Effect is that mistyped property keys on returned style objects will not generate errors.\n//        This affects lookup types used as functional decorations on IComponent and IStatelessComponent, e.g.:\n//        export const styles: IStackComponent['styles'] = props => {\n//        Existing issue: https://github.com/Microsoft/TypeScript/issues/241\n\n/**\n * Helper interface for accessing user props children.\n * @deprecated Use React.PropsWithChildren.\n */\nexport type IPropsWithChildren<TProps> = React.PropsWithChildren<TProps>;\n\n/**\n * Helper type defining style sections, one for each component slot.\n */\nexport type IComponentStyles<TSlots> = { [key in keyof TSlots]?: IStyle };\n\n/**\n * Function declaration for component styles functions.\n */\nexport type IStylesFunction<TViewProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>> = (\n  props: TViewProps,\n  theme: ITheme,\n  tokens: TTokens,\n) => TStyleSet;\n\n/**\n * Composite type for component styles functions and objects.\n */\nexport type IStylesFunctionOrObject<TViewProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>> =\n  | IStylesFunction<TViewProps, TTokens, TStyleSet>\n  | TStyleSet;\n\n/**\n * Tokens can be defined as an object, function, or an array of objects and functions.\n */\nexport type IToken<TViewProps, TTokens> = ITokenBase<TViewProps, TTokens> | ITokenBaseArray<TViewProps, TTokens>;\n\n/**\n * Function declaration for component token functions.\n */\nexport type ITokenFunction<TViewProps, TTokens> = (props: TViewProps, theme: ITheme) => IToken<TViewProps, TTokens>;\n\n/**\n * Composite type for component token functions and objects.\n */\nexport type ITokenFunctionOrObject<TViewProps, TTokens> = ITokenFunction<TViewProps, TTokens> | TTokens;\n\n/**\n * Composite base type that includes all possible resolutions of token functions in an array.\n */\nexport type ITokenBase<TViewProps, TTokens> = ITokenFunctionOrObject<TViewProps, TTokens> | false | null | undefined;\n\n/**\n * Composite token base array type allowing for token objects, functions, and function resolutions.\n */\nexport interface ITokenBaseArray<TViewProps, TTokens> extends Array<IToken<TViewProps, TTokens>> {}\n\n/**\n * Optional props for styleable components. If these props are present, they will automatically be\n * used by Foundation when applying theming and styling.\n */\nexport interface IStyleableComponentProps<TViewProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>> {\n  className?: string;\n  styles?: IStylesFunctionOrObject<TViewProps, TTokens, TStyleSet>;\n  theme?: ITheme;\n  tokens?: ITokenFunctionOrObject<TViewProps, TTokens>;\n}\n\nexport type ICustomizationProps<TViewProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>> = IStyleableComponentProps<\n  TViewProps,\n  TTokens,\n  TStyleSet\n> &\n  Required<Pick<IStyleableComponentProps<TViewProps, TTokens, TStyleSet>, 'theme'>>;\n\n/**\n * Defines the contract for state components.\n */\nexport type IStateComponentType<TComponentProps, TViewProps> = (props: Readonly<TComponentProps>) => TViewProps;\n\n/**\n * Defines the contract for view components.\n */\nexport type IViewComponent<TViewProps> = (\n  props: React.PropsWithChildren<TViewProps>,\n) => ReturnType<React.FunctionComponent>;\n\n/**\n * Component options used by foundation to tie elements together.\n *\n * * TComponentProps: A styleable props interface for the created component.\n * * TTokens: The type for tokens props.\n * * TStyleSet: The type for styles properties.\n * * TViewProps: The props specific to the view, including processed properties outputted by optional state component.\n * If state component is not provided, TComponentProps is the same as TViewProps.\n * * TStatics: Static type for statics applied to created component object.\n */\nexport interface IComponentOptions<\n  TComponentProps,\n  TTokens,\n  TStyleSet extends IStyleSet<TStyleSet>,\n  TViewProps = TComponentProps,\n  TStatics = {}\n> {\n  /**\n   * Display name to identify component in React hierarchy. This parameter is required for targeted component styling\n   * via theming.\n   */\n  displayName?: string;\n  /**\n   * List of fields which can be customized.\n   */\n  fields?: string[];\n  /**\n   * Styles prop to pass into component.\n   */\n  styles?: IStylesFunctionOrObject<TViewProps, TTokens, TStyleSet>;\n  /**\n   * Optional state component that processes TComponentProps into TViewProps.\n   */\n  state?: IStateComponentType<TComponentProps, TViewProps>;\n  /**\n   * Optional static object to assign to constructed component.\n   */\n  statics?: TStatics;\n  /**\n   * Tokens prop to pass into component.\n   */\n  tokens?: ITokenFunctionOrObject<TViewProps, TTokens>;\n  /**\n   * Default prop for which to map primitive values.\n   */\n  factoryOptions?: IFactoryOptions<TComponentProps>;\n}\n\n/**\n * Component helper that defines options as required for ease of use by component consumers.\n */\nexport type IComponent<\n  TComponentProps,\n  TTokens,\n  TStyleSet extends IStyleSet<TStyleSet>,\n  TViewProps = TComponentProps,\n  TStatics = {}\n> = Required<IComponentOptions<TComponentProps, TTokens, TStyleSet, TViewProps, TStatics>> & {\n  /**\n   * Component that generates view output.\n   */\n  view: IViewComponent<TViewProps>;\n};\n\n/**\n * Factory options for creating component.\n */\nexport interface IFactoryOptions<TProps> {\n  /**\n   * Default prop for which to map primitive values.\n   */\n  defaultProp?: keyof TProps | 'children';\n}\n"]}
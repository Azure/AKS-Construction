{"version":3,"file":"dateMath.js","sourceRoot":"../src/","sources":["dateMath/dateMath.ts"],"names":[],"mappings":"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","sourcesContent":["import { DayOfWeek, MonthOfYear, FirstWeekOfYear, DateRangeType } from '../dateValues/dateValues';\nimport { TimeConstants } from '../dateValues/timeConstants';\n\n/**\n * Returns a date offset from the given date by the specified number of days.\n * @param date - The origin date\n * @param days - The number of days to offset. 'days' can be negative.\n * @returns A new Date object offset from the origin date by the given number of days\n */\nexport function addDays(date: Date, days: number): Date {\n  const result = new Date(date.getTime());\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\n/**\n * Returns a date offset from the given date by the specified number of weeks.\n * @param date - The origin date\n * @param weeks - The number of weeks to offset. 'weeks' can be negative.\n * @returns A new Date object offset from the origin date by the given number of weeks\n */\nexport function addWeeks(date: Date, weeks: number): Date {\n  return addDays(date, weeks * TimeConstants.DaysInOneWeek);\n}\n\n/**\n * Returns a date offset from the given date by the specified number of months.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param months - The number of months to offset. 'months' can be negative.\n * @returns A new Date object offset from the origin date by the given number of months\n */\nexport function addMonths(date: Date, months: number): Date {\n  let result = new Date(date.getTime());\n  const newMonth = result.getMonth() + months;\n  result.setMonth(newMonth);\n\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n  if (\n    result.getMonth() !==\n    ((newMonth % TimeConstants.MonthInOneYear) + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear\n  ) {\n    result = addDays(result, -result.getDate());\n  }\n  return result;\n}\n\n/**\n * Returns a date offset from the given date by the specified number of years.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param years - The number of years to offset. 'years' can be negative.\n * @returns A new Date object offset from the origin date by the given number of years\n */\nexport function addYears(date: Date, years: number): Date {\n  let result = new Date(date.getTime());\n  result.setFullYear(date.getFullYear() + years);\n\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n  if (\n    result.getMonth() !==\n    ((date.getMonth() % TimeConstants.MonthInOneYear) + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear\n  ) {\n    result = addDays(result, -result.getDate());\n  }\n  return result;\n}\n\n/**\n * Returns a date that is the first day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the month.\n */\nexport function getMonthStart(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the last day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the month.\n */\nexport function getMonthEnd(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the first day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the year.\n */\nexport function getYearStart(date: Date): Date {\n  return new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the last day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the year.\n */\nexport function getYearEnd(date: Date): Date {\n  return new Date(date.getFullYear() + 1, 0, 0, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is a copy of the given date, aside from the month changing to the given month.\n *  The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param month - The 0-based index of the month to set on the date.\n * @returns A new Date object with the given month set.\n */\nexport function setMonth(date: Date, month: number): Date {\n  return addMonths(date, month - date.getMonth());\n}\n\n/**\n * Compares two dates, and returns true if the two dates (not accounting for time-of-day) are equal.\n * @returns True if the two dates represent the same date (regardless of time-of-day), false otherwise.\n */\nexport function compareDates(date1: Date, date2: Date): boolean {\n  if (!date1 && !date2) {\n    return true;\n  } else if (!date1 || !date2) {\n    return false;\n  } else {\n    return (\n      date1.getFullYear() === date2.getFullYear() &&\n      date1.getMonth() === date2.getMonth() &&\n      date1.getDate() === date2.getDate()\n    );\n  }\n}\n\n/**\n * Compare the date parts of two dates\n * @param date1 - The first date to compare\n * @param date2 - The second date to compare\n * @returns A negative value if date1 is earlier than date2, 0 if the dates are equal, or a positive value\n * if date1 is later than date2.\n */\nexport function compareDatePart(date1: Date, date2: Date): Number {\n  return getDatePartHashValue(date1) - getDatePartHashValue(date2);\n}\n\n/**\n * Gets the date range array including the specified date. The date range array is calculated as the list\n * of dates accounting for the specified first day of the week and date range type.\n * @param date - The input date\n * @param dateRangeType - The desired date range type, i.e., day, week, month, etc.\n * @param firstDayOfWeek - The first day of the week.\n * @param workWeekDays - The allowed days in work week. If not provided, assumes all days are allowed.\n * @param daysToSelectInDayView - The number of days to include when using dateRangeType === DateRangeType.Day\n * for multiday view. Defaults to 1\n * @returns An array of dates representing the date range containing the specified date.\n */\nexport function getDateRangeArray(\n  date: Date,\n  dateRangeType: DateRangeType,\n  firstDayOfWeek: DayOfWeek,\n  workWeekDays?: DayOfWeek[],\n  daysToSelectInDayView: number = 1,\n): Date[] {\n  const datesArray: Date[] = [];\n  let startDate: Date;\n  let endDate = null;\n\n  if (!workWeekDays) {\n    workWeekDays = [DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday];\n  }\n\n  daysToSelectInDayView = Math.max(daysToSelectInDayView, 1);\n\n  switch (dateRangeType) {\n    case DateRangeType.Day:\n      startDate = getDatePart(date);\n      endDate = addDays(startDate, daysToSelectInDayView);\n      break;\n\n    case DateRangeType.Week:\n    case DateRangeType.WorkWeek:\n      startDate = getStartDateOfWeek(getDatePart(date), firstDayOfWeek);\n      endDate = addDays(startDate, TimeConstants.DaysInOneWeek);\n      break;\n\n    case DateRangeType.Month:\n      startDate = new Date(date.getFullYear(), date.getMonth(), 1);\n      endDate = addMonths(startDate, 1);\n      break;\n\n    default:\n      throw new Error('Unexpected object: ' + dateRangeType);\n  }\n\n  // Populate the dates array with the dates in range\n  let nextDate = startDate;\n\n  do {\n    if (dateRangeType !== DateRangeType.WorkWeek) {\n      // push all days not in work week view\n      datesArray.push(nextDate);\n    } else if (workWeekDays.indexOf(nextDate.getDay()) !== -1) {\n      datesArray.push(nextDate);\n    }\n    nextDate = addDays(nextDate, 1);\n  } while (!compareDates(nextDate, endDate));\n\n  return datesArray;\n}\n\n/**\n * Checks whether the specified date is in the given date range.\n * @param date - The origin date\n * @param dateRange - An array of dates to do the lookup on\n * @returns True if the date matches one of the dates in the specified array, false otherwise.\n */\nexport function isInDateRangeArray(date: Date, dateRange: Date[]): boolean {\n  for (const dateInRange of dateRange) {\n    if (compareDates(date, dateInRange)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param navigatedDate - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The weeks number array for the current month.\n */\nexport function getWeekNumbersInMonth(\n  weeksInMonth: number,\n  firstDayOfWeek: DayOfWeek,\n  firstWeekOfYear: FirstWeekOfYear,\n  navigatedDate: Date,\n): number[] {\n  const selectedYear = navigatedDate.getFullYear();\n  const selectedMonth = navigatedDate.getMonth();\n  let dayOfMonth = 1;\n  const fistDayOfMonth = new Date(selectedYear, selectedMonth, dayOfMonth);\n  const endOfFirstWeek =\n    dayOfMonth +\n    (firstDayOfWeek + TimeConstants.DaysInOneWeek - 1) -\n    adjustWeekDay(firstDayOfWeek, fistDayOfMonth.getDay());\n  let endOfWeekRange = new Date(selectedYear, selectedMonth, endOfFirstWeek);\n  dayOfMonth = endOfWeekRange.getDate();\n\n  const weeksArray = [];\n  for (let i = 0; i < weeksInMonth; i++) {\n    // Get week number for end of week\n    weeksArray.push(getWeekNumber(endOfWeekRange, firstDayOfWeek, firstWeekOfYear));\n    dayOfMonth += TimeConstants.DaysInOneWeek;\n    endOfWeekRange = new Date(selectedYear, selectedMonth, dayOfMonth);\n  }\n  return weeksArray;\n}\n\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param date - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The week's number in the year.\n */\nexport function getWeekNumber(date: Date, firstDayOfWeek: DayOfWeek, firstWeekOfYear: FirstWeekOfYear): number {\n  // First four-day week of the year - minumum days count\n  const fourDayWeek = 4;\n\n  switch (firstWeekOfYear) {\n    case FirstWeekOfYear.FirstFullWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, TimeConstants.DaysInOneWeek);\n\n    case FirstWeekOfYear.FirstFourDayWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, fourDayWeek);\n\n    default:\n      return getFirstDayWeekOfYear(date, firstDayOfWeek);\n  }\n}\n\n/**\n * Gets the date for the first day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\nexport function getStartDateOfWeek(date: Date, firstDayOfWeek: DayOfWeek): Date {\n  let daysOffset = firstDayOfWeek - date.getDay();\n  if (daysOffset > 0) {\n    // If first day of week is > date, go 1 week back, to ensure resulting date is in the past.\n    daysOffset -= TimeConstants.DaysInOneWeek;\n  }\n  return addDays(date, daysOffset);\n}\n\n/**\n * Gets the date for the last day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\nexport function getEndDateOfWeek(date: Date, firstDayOfWeek: DayOfWeek): Date {\n  const lastDayOfWeek = firstDayOfWeek - 1 >= 0 ? firstDayOfWeek - 1 : TimeConstants.DaysInOneWeek - 1;\n  let daysOffset = lastDayOfWeek - date.getDay();\n  if (daysOffset < 0) {\n    // If last day of week is < date, go 1 week forward, to ensure resulting date is in the future.\n    daysOffset += TimeConstants.DaysInOneWeek;\n  }\n  return addDays(date, daysOffset);\n}\n\n/**\n * Gets a new date with the time portion zeroed out, i.e., set to midnight\n * @param date - The origin date\n * @returns A new date with the time set to midnight\n */\nfunction getDatePart(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n}\n\n/**\n * Helper function to assist in date comparisons\n */\nexport function getDatePartHashValue(date: Date): number {\n  // Generate date hash value created as sum of Date (up to 31 = 5 bits), Month (up to 11 = 4 bits) and Year.\n  // eslint-disable-next-line no-bitwise\n  return date.getDate() + (date.getMonth() << 5) + (date.getFullYear() << 9);\n}\n\n/**\n * Helper function for `getWeekNumber`.\n * Returns week number for a date.\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param numberOfFullDays - week settings.\n * @returns The week's number in the year.\n */\nfunction getWeekOfYearFullDays(date: Date, firstDayOfWeek: DayOfWeek, numberOfFullDays: number): number {\n  const dayOfYear = getDayOfYear(date) - 1;\n  let num = date.getDay() - (dayOfYear % TimeConstants.DaysInOneWeek);\n\n  const lastDayOfPrevYear = new Date(date.getFullYear() - 1, MonthOfYear.December, 31);\n  const daysInYear = getDayOfYear(lastDayOfPrevYear) - 1;\n\n  let num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n  if (num2 !== 0 && num2 >= numberOfFullDays) {\n    num2 -= TimeConstants.DaysInOneWeek;\n  }\n\n  let num3 = dayOfYear - num2;\n  if (num3 < 0) {\n    num -= daysInYear % TimeConstants.DaysInOneWeek;\n    num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n    if (num2 !== 0 && num2 + 1 >= numberOfFullDays) {\n      num2 -= TimeConstants.DaysInOneWeek;\n    }\n\n    num3 = daysInYear - num2;\n  }\n\n  return Math.floor(num3 / TimeConstants.DaysInOneWeek + 1);\n}\n\n/**\n * Helper function for `getWeekNumber`.\n * Returns week number for a date.\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @returns The week's number in the year.\n */\nfunction getFirstDayWeekOfYear(date: Date, firstDayOfWeek: number): number {\n  const num = getDayOfYear(date) - 1;\n  const num2 = date.getDay() - (num % TimeConstants.DaysInOneWeek);\n  const num3 = (num2 - firstDayOfWeek + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n\n  return Math.floor((num + num3) / TimeConstants.DaysInOneWeek + 1);\n}\n\n/**\n * Helper function for `getWeekNumber`.\n * Returns adjusted week day number when `firstDayOfWeek` is other than Sunday.\n * For Week Day Number comparison checks\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param dateWeekDay - shifts number forward to 1 week in case passed as true\n * @returns The day of week adjusted to `firstDayOfWeek`; e.g. when `firstDayOfWeek` is Monday (1),\n * Sunday becomes 7.\n */\nfunction adjustWeekDay(firstDayOfWeek: DayOfWeek, dateWeekDay: DayOfWeek): number {\n  return firstDayOfWeek !== DayOfWeek.Sunday && dateWeekDay < firstDayOfWeek\n    ? dateWeekDay + TimeConstants.DaysInOneWeek\n    : dateWeekDay;\n}\n\n/**\n * Returns the day number for a date in a year:\n * the number of days since January 1st in the particular year.\n * @param date - A date to find the day number for.\n * @returns The day's number in the year.\n */\nfunction getDayOfYear(date: Date): number {\n  const month = date.getMonth();\n  const year = date.getFullYear();\n  let daysUntilDate = 0;\n\n  for (let i = 0; i < month; i++) {\n    daysUntilDate += daysInMonth(i + 1, year);\n  }\n\n  daysUntilDate += date.getDate();\n\n  return daysUntilDate;\n}\n\n/**\n * Returns the number of days in the month\n * @param month - The month number to target (months 1-12).\n * @param year - The year to target.\n * @returns The number of days in the month.\n */\nfunction daysInMonth(month: number, year: number): number {\n  return new Date(year, month, 0).getDate();\n}\n"]}
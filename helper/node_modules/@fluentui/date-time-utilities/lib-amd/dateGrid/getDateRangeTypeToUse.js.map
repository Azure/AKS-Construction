{"version":3,"file":"getDateRangeTypeToUse.js","sourceRoot":"../src/","sources":["dateGrid/getDateRangeTypeToUse.ts"],"names":[],"mappings":";;;;IAEA;;;;;;OAMG;IACI,IAAM,qBAAqB,GAAG,UACnC,aAA4B,EAC5B,YAAqC,EACrC,cAAyB;QAEzB,IAAI,YAAY,IAAI,aAAa,KAAK,0BAAa,CAAC,QAAQ,EAAE;YAC5D,IAAI,CAAC,2BAAY,CAAC,YAAY,EAAE,IAAI,EAAE,cAAc,CAAC,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;gBAClF,OAAO,0BAAa,CAAC,IAAI,CAAC;aAC3B;SACF;QAED,OAAO,aAAa,CAAC;IACvB,CAAC,CAAC;IAZW,QAAA,qBAAqB,yBAYhC","sourcesContent":["import { DateRangeType, DayOfWeek } from '../dateValues/dateValues';\nimport { isContiguous } from './isContiguous';\n/**\n * Return corrected date range type, given `dateRangeType` and list of working days.\n * For non-contiguous working days and working week range type, returns general week range type.\n * For other cases returns input date range type.\n * @param dateRangeType - input type of range\n * @param workWeekDays - list of working days in a week\n */\nexport const getDateRangeTypeToUse = (\n  dateRangeType: DateRangeType,\n  workWeekDays: DayOfWeek[] | undefined,\n  firstDayOfWeek: DayOfWeek,\n): DateRangeType => {\n  if (workWeekDays && dateRangeType === DateRangeType.WorkWeek) {\n    if (!isContiguous(workWeekDays, true, firstDayOfWeek) || workWeekDays.length === 0) {\n      return DateRangeType.Week;\n    }\n  }\n\n  return dateRangeType;\n};\n"]}
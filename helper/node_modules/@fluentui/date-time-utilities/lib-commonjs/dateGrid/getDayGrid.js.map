{"version":3,"file":"getDayGrid.js","sourceRoot":"../src/","sources":["dateGrid/getDayGrid.ts"],"names":[],"mappings":"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","sourcesContent":["import { addDays, compareDates, getDateRangeArray, isInDateRangeArray } from '../dateMath/dateMath';\nimport { DAYS_IN_WEEK } from '../dateValues/dateValues';\nimport { IDay, IDayGridOptions } from './dateGrid.types';\nimport { getDateRangeTypeToUse } from './getDateRangeTypeToUse';\nimport { getBoundedDateRange } from './getBoundedDateRange';\nimport { isRestrictedDate } from './isRestrictedDate';\n\n/**\n * Generates a grid of days, given the `options`.\n * Returns one additional week at the begining from the previous range\n * and one at the end from the future range\n * @param options - parameters to specify date related restrictions for the resulting grid\n */\nexport const getDayGrid = (options: IDayGridOptions): IDay[][] => {\n  const {\n    selectedDate,\n    dateRangeType,\n    firstDayOfWeek,\n    today,\n    minDate,\n    maxDate,\n    weeksToShow,\n    workWeekDays,\n    daysToSelectInDayView,\n    restrictedDates,\n    markedDays,\n  } = options;\n  const restrictedDateOptions = { minDate, maxDate, restrictedDates };\n\n  const todaysDate = today || new Date();\n\n  const navigatedDate = options.navigatedDate ? options.navigatedDate : todaysDate;\n\n  let date;\n  if (weeksToShow && weeksToShow <= 4) {\n    // if showing less than a full month, just use date == navigatedDate\n    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), navigatedDate.getDate());\n  } else {\n    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), 1);\n  }\n  const weeks: IDay[][] = [];\n\n  // Cycle the date backwards to get to the first day of the week.\n  while (date.getDay() !== firstDayOfWeek) {\n    date.setDate(date.getDate() - 1);\n  }\n\n  // add the transition week as last week of previous range\n  date = addDays(date, -DAYS_IN_WEEK);\n\n  // a flag to indicate whether all days of the week are outside the month\n  let isAllDaysOfWeekOutOfMonth = false;\n\n  // in work week view if the days aren't contiguous we use week view instead\n  const selectedDateRangeType = getDateRangeTypeToUse(dateRangeType, workWeekDays, firstDayOfWeek);\n\n  let selectedDates: Date[] = [];\n\n  if (selectedDate) {\n    selectedDates = getDateRangeArray(\n      selectedDate,\n      selectedDateRangeType,\n      firstDayOfWeek,\n      workWeekDays,\n      daysToSelectInDayView,\n    );\n    selectedDates = getBoundedDateRange(selectedDates, minDate, maxDate);\n  }\n\n  let shouldGetWeeks = true;\n\n  for (let weekIndex = 0; shouldGetWeeks; weekIndex++) {\n    const week: IDay[] = [];\n\n    isAllDaysOfWeekOutOfMonth = true;\n\n    for (let dayIndex = 0; dayIndex < DAYS_IN_WEEK; dayIndex++) {\n      const originalDate = new Date(date.getTime());\n      const dayInfo: IDay = {\n        key: date.toString(),\n        date: date.getDate().toString(),\n        originalDate: originalDate,\n        isInMonth: date.getMonth() === navigatedDate.getMonth(),\n        isToday: compareDates(todaysDate, date),\n        isSelected: isInDateRangeArray(date, selectedDates),\n        isInBounds: !isRestrictedDate(date, restrictedDateOptions),\n        isMarked: markedDays?.some(markedDay => compareDates(originalDate, markedDay)) || false,\n      };\n\n      week.push(dayInfo);\n\n      if (dayInfo.isInMonth) {\n        isAllDaysOfWeekOutOfMonth = false;\n      }\n\n      date.setDate(date.getDate() + 1);\n    }\n\n    // We append the condition of the loop depending upon the showSixWeeksByDefault prop.\n    shouldGetWeeks = weeksToShow ? weekIndex < weeksToShow + 1 : !isAllDaysOfWeekOutOfMonth || weekIndex === 0;\n\n    // we don't check shouldGetWeeks before pushing because we want to add one extra week for transition state\n    weeks.push(week);\n  }\n\n  return weeks;\n};\n"]}
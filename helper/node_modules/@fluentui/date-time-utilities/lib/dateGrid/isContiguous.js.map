{"version":3,"file":"isContiguous.js","sourceRoot":"../src/","sources":["dateGrid/isContiguous.ts"],"names":[],"mappings":"AAEA;;;;;GAKG;AACH,MAAM,CAAC,IAAM,YAAY,GAAG,UAAC,IAAiB,EAAE,YAAqB,EAAE,cAAyB;IAC9F,IAAM,MAAM,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;IAC7B,IAAI,mBAAmB,GAAG,CAAC,CAAC;IAC5B,KAAkB,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI,EAAE;QAAnB,IAAM,GAAG,aAAA;QACZ,IAAM,OAAO,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,YAAY,IAAI,cAAc,KAAK,OAAO,CAAC,CAAC,EAAE;YAC3E,mBAAmB,EAAE,CAAC;SACvB;KACF;IAED,kEAAkE;IAClE,oDAAoD;IACpD,OAAO,mBAAmB,GAAG,CAAC,CAAC;AACjC,CAAC,CAAC","sourcesContent":["import { DayOfWeek } from '../dateValues/dateValues';\n\n/**\n * Returns whether provided week days are contiguous.\n * @param days - list of days in a week\n * @param isSingleWeek - decides whether the contiguous logic applies across week boundaries or not\n * @param firstDayOfWeek - decides which day of week is the first one in the order.\n */\nexport const isContiguous = (days: DayOfWeek[], isSingleWeek: boolean, firstDayOfWeek: DayOfWeek): boolean => {\n  const daySet = new Set(days);\n  let amountOfNoNeighbors = 0;\n  for (const day of days) {\n    const nextDay = (day + 1) % 7;\n    if (!(daySet.has(nextDay) && (!isSingleWeek || firstDayOfWeek !== nextDay))) {\n      amountOfNoNeighbors++;\n    }\n  }\n\n  // In case the full week is provided, then each day has a neighbor\n  //, otherwise the last day does not have a neighbor.\n  return amountOfNoNeighbors < 2;\n};\n"]}
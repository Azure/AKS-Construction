{"version":3,"file":"icons.js","sourceRoot":"../src/","sources":["utilities/icons.ts"],"names":[],"mappings":"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","sourcesContent":["import { GlobalSettings, warn } from '@fluentui/utilities';\nimport { fontFace, mergeStyles, Stylesheet } from '@fluentui/merge-styles';\nimport type { IRawStyle, IFontFace } from '@fluentui/merge-styles';\n\nexport interface IIconSubset {\n  fontFace?: IFontFace;\n  icons: {\n    [key: string]: string | JSX.Element;\n  };\n\n  style?: IRawStyle;\n  /**\n   * Indicates to the icon renderer that it is safe to merge any props on the original `Icon` element\n   * onto the child content element registered for the icon which are valid for HTML images.\n   */\n  mergeImageProps?: boolean;\n}\n\nexport interface IIconSubsetRecord extends IIconSubset {\n  isRegistered?: boolean;\n  className?: string;\n}\n\nexport interface IIconRecord {\n  code: string | undefined;\n  subset: IIconSubsetRecord;\n}\n\nexport interface IIconOptions {\n  /**\n   * By default, registering the same set of icons will generate a console warning per duplicate icon\n   * registered, because this scenario can create unexpected consequences.\n   *\n   * Some scenarios include:\n   *\n   * Icon set was previously registered using a different base url.\n   * Icon set was previously registered but a different version was provided.\n   * Icons in a previous registered set overlap with a new set.\n   *\n   * To simply ignore previously registered icons, you can specify to disable warnings. This means\n   * that if an icon which was previous registered is registered again, it will be silently ignored.\n   * However, consider whether the problems listed above will cause issues.\n   **/\n  disableWarnings: boolean;\n\n  /**\n   * @deprecated Use `disableWarnings` instead.\n   */\n  warnOnMissingIcons?: boolean;\n}\n\nexport interface IIconRecords {\n  __options: IIconOptions;\n  __remapped: { [key: string]: string };\n  [key: string]: IIconRecord | {};\n}\n\nconst ICON_SETTING_NAME = 'icons';\n\nconst _iconSettings = GlobalSettings.getValue<IIconRecords>(ICON_SETTING_NAME, {\n  __options: {\n    disableWarnings: false,\n    warnOnMissingIcons: true,\n  },\n  __remapped: {},\n});\n\n// Reset icon registration on stylesheet resets.\nconst stylesheet = Stylesheet.getInstance();\n\nif (stylesheet && stylesheet.onReset) {\n  stylesheet.onReset(() => {\n    for (const name in _iconSettings) {\n      if (_iconSettings.hasOwnProperty(name) && !!(_iconSettings[name] as IIconRecord).subset) {\n        (_iconSettings[name] as IIconRecord).subset.className = undefined;\n      }\n    }\n  });\n}\n\n/**\n * Normalizes an icon name for consistent mapping.\n * Current implementation is to convert the icon name to lower case.\n *\n * @param name - Icon name to normalize.\n * @returns {string} Normalized icon name to use for indexing and mapping.\n */\nconst normalizeIconName = (name: string): string => name.toLowerCase();\n\n/**\n * Registers a given subset of icons.\n *\n * @param iconSubset - the icon subset definition.\n */\nexport function registerIcons(iconSubset: IIconSubset, options?: Partial<IIconOptions>): void {\n  let subset = {\n    ...iconSubset,\n    isRegistered: false,\n    className: undefined,\n  };\n  let { icons } = iconSubset;\n\n  // Grab options, optionally mix user provided ones on top.\n  options = options ? { ..._iconSettings.__options, ...options } : _iconSettings.__options;\n\n  for (const iconName in icons) {\n    if (icons.hasOwnProperty(iconName)) {\n      const code = icons[iconName];\n      const normalizedIconName = normalizeIconName(iconName);\n\n      if (_iconSettings[normalizedIconName]) {\n        _warnDuplicateIcon(iconName);\n      } else {\n        _iconSettings[normalizedIconName] = {\n          code,\n          subset,\n        } as IIconRecord;\n      }\n    }\n  }\n}\n\n/**\n * Unregisters icons by name.\n *\n * @param iconNames - List of icons to unregister.\n */\nexport function unregisterIcons(iconNames: string[]): void {\n  const options = _iconSettings.__options;\n\n  for (const iconName of iconNames) {\n    const normalizedIconName = normalizeIconName(iconName);\n    if (_iconSettings[normalizedIconName]) {\n      delete _iconSettings[normalizedIconName];\n    } else {\n      // Warn that we are trying to delete an icon that doesn't exist\n      if (!options.disableWarnings) {\n        warn(`The icon \"${iconName}\" tried to unregister but was not registered.`);\n      }\n    }\n\n    // Delete any aliases for this iconName\n    if (_iconSettings.__remapped[normalizedIconName]) {\n      delete _iconSettings.__remapped[normalizedIconName];\n    }\n\n    // Delete any items that were an alias for this iconName\n    Object.keys(_iconSettings.__remapped).forEach((key: string) => {\n      if (_iconSettings.__remapped[key] === normalizedIconName) {\n        delete _iconSettings.__remapped[key];\n      }\n    });\n  }\n}\n\n/**\n * Remaps one icon name to another.\n */\nexport function registerIconAlias(iconName: string, mappedToName: string): void {\n  _iconSettings.__remapped[normalizeIconName(iconName)] = normalizeIconName(mappedToName);\n}\n\n/**\n * Gets an icon definition. If an icon is requested but the subset has yet to be registered,\n * it will get registered immediately.\n *\n * @public\n * @param name - Name of icon.\n */\nexport function getIcon(name?: string): IIconRecord | undefined {\n  let icon: IIconRecord | undefined = undefined;\n  const options = _iconSettings.__options;\n\n  name = name ? normalizeIconName(name) : '';\n  name = _iconSettings.__remapped[name] || name;\n\n  if (name) {\n    icon = _iconSettings[name!] as IIconRecord;\n\n    if (icon) {\n      let { subset } = icon;\n      if (subset && subset.fontFace) {\n        if (!subset.isRegistered) {\n          fontFace(subset.fontFace);\n          subset.isRegistered = true;\n        }\n\n        if (!subset.className) {\n          subset.className = mergeStyles(subset.style, {\n            fontFamily: subset.fontFace.fontFamily,\n            fontWeight: subset.fontFace.fontWeight || 'normal',\n            fontStyle: subset.fontFace.fontStyle || 'normal',\n          });\n        }\n      }\n    } else {\n      // eslint-disable-next-line deprecation/deprecation\n      if (!options.disableWarnings && options.warnOnMissingIcons) {\n        warn(\n          `The icon \"${name}\" was used but not registered. See https://github.com/microsoft/fluentui/wiki/Using-icons for more information.`,\n        );\n      }\n    }\n  }\n\n  return icon;\n}\n\n/**\n * Sets the icon options.\n *\n * @public\n */\nexport function setIconOptions(options: Partial<IIconOptions>): void {\n  _iconSettings.__options = {\n    ..._iconSettings.__options,\n    ...options,\n  };\n}\n\nlet _missingIcons: string[] = [];\nlet _missingIconsTimer: number | undefined = undefined;\n\nfunction _warnDuplicateIcon(iconName: string): void {\n  const options = _iconSettings.__options;\n  const warningDelay = 2000;\n  const maxIconsInMessage = 10;\n\n  if (!options.disableWarnings) {\n    _missingIcons.push(iconName);\n    if (_missingIconsTimer === undefined) {\n      _missingIconsTimer = setTimeout(() => {\n        warn(\n          `Some icons were re-registered. Applications should only call registerIcons for any given ` +\n            `icon once. Redefining what an icon is may have unintended consequences. Duplicates ` +\n            `include: \\n` +\n            _missingIcons.slice(0, maxIconsInMessage).join(', ') +\n            (_missingIcons.length > maxIconsInMessage ? ` (+ ${_missingIcons.length - maxIconsInMessage} more)` : ''),\n        );\n        _missingIconsTimer = undefined;\n        _missingIcons = [];\n      }, warningDelay);\n    }\n  }\n}\n"]}
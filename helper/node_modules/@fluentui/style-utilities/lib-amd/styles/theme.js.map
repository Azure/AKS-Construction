{"version":3,"file":"theme.js","sourceRoot":"../src/","sources":["styles/theme.ts"],"names":[],"mappings":"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","sourcesContent":["import { Customizations, getWindow } from '@fluentui/utilities';\nimport { loadTheme as legacyLoadTheme } from '@microsoft/load-themed-styles';\nimport { createTheme } from '@fluentui/theme';\nimport type { ITheme, IPartialTheme, IFontStyles } from '../interfaces/index';\nimport type { IRawStyle } from '@fluentui/merge-styles';\n\nexport { createTheme } from '@fluentui/theme';\n\nlet _theme: ITheme = createTheme({});\nlet _onThemeChangeCallbacks: Array<(theme: ITheme) => void> = [];\n\nexport const ThemeSettingName = 'theme';\n\nexport function initializeThemeInCustomizations(): void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const win: any = getWindow();\n\n  if (win?.FabricConfig?.legacyTheme) {\n    // does everything the `else` clause does and more, such as invoke legacy theming\n    loadTheme(win.FabricConfig.legacyTheme);\n  } else if (!Customizations.getSettings([ThemeSettingName]).theme) {\n    if (win?.FabricConfig?.theme) {\n      _theme = createTheme(win.FabricConfig.theme);\n    }\n\n    // Set the default theme.\n    Customizations.applySettings({ [ThemeSettingName]: _theme });\n  }\n}\n\ninitializeThemeInCustomizations();\n\n/**\n * Gets the theme object\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nexport function getTheme(depComments: boolean = false): ITheme {\n  if (depComments === true) {\n    _theme = createTheme({}, depComments);\n  }\n  return _theme;\n}\n\n/**\n * Registers a callback that gets called whenever the theme changes.\n * This should only be used when the component cannot automatically get theme changes through its state.\n * This will not register duplicate callbacks.\n */\nexport function registerOnThemeChangeCallback(callback: (theme: ITheme) => void): void {\n  if (_onThemeChangeCallbacks.indexOf(callback) === -1) {\n    _onThemeChangeCallbacks.push(callback);\n  }\n}\n\n/**\n * See registerOnThemeChangeCallback().\n * Removes previously registered callbacks.\n */\nexport function removeOnThemeChangeCallback(callback: (theme: ITheme) => void): void {\n  const i = _onThemeChangeCallbacks.indexOf(callback);\n  if (i === -1) {\n    return;\n  }\n\n  _onThemeChangeCallbacks.splice(i, 1);\n}\n\n/**\n * Applies the theme, while filling in missing slots.\n * @param theme - Partial theme object.\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nexport function loadTheme(theme: IPartialTheme, depComments: boolean = false): ITheme {\n  _theme = createTheme(theme, depComments);\n\n  // Invoke the legacy method of theming the page as well.\n  legacyLoadTheme({ ..._theme.palette, ..._theme.semanticColors, ..._theme.effects, ..._loadFonts(_theme) });\n\n  Customizations.applySettings({ [ThemeSettingName]: _theme });\n\n  _onThemeChangeCallbacks.forEach((callback: (theme: ITheme) => void) => {\n    try {\n      callback(_theme);\n    } catch (e) {\n      // don't let a bad callback break everything else\n    }\n  });\n\n  return _theme;\n}\n\n/**\n * Loads font variables into a JSON object.\n * @param theme - The theme object\n */\nfunction _loadFonts(theme: ITheme): { [name: string]: string } {\n  const lines: { [key: string]: string } = {};\n\n  for (const fontName of Object.keys(theme.fonts)) {\n    const font: IRawStyle = theme.fonts[fontName as keyof IFontStyles];\n\n    for (const propName of Object.keys(font)) {\n      const name: string = fontName + propName.charAt(0).toUpperCase() + propName.slice(1);\n      let value = font[propName as keyof IRawStyle] as string;\n\n      if (propName === 'fontSize' && typeof value === 'number') {\n        // if it's a number, convert it to px by default like our theming system does\n        value = value + 'px';\n      }\n      lines[name] = value;\n    }\n  }\n  return lines;\n}\n"]}
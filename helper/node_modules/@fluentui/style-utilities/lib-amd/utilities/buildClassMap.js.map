{"version":3,"file":"buildClassMap.js","sourceRoot":"../src/","sources":["utilities/buildClassMap.ts"],"names":[],"mappings":";;;;IAEA;;;;;OAKG;IACH,SAAgB,aAAa,CAAmB,MAAS;QACvD,IAAI,OAAO,GAAkC,EAAE,CAAC;gCAEvC,SAAS;YAChB,IAAI,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;gBACpC,IAAI,WAAiB,CAAC;gBAEtB,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,SAAS,EAAE;oBACxC,GAAG,EAAE;wBACH,IAAI,WAAS,KAAK,SAAS,EAAE;4BAC3B,8DAA8D;4BAC9D,WAAS,GAAG,yBAAW,CAAC,MAAM,CAAC,SAAS,CAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;yBAC9D;wBACD,OAAO,WAAS,CAAC;oBACnB,CAAC;oBACD,UAAU,EAAE,IAAI;oBAChB,YAAY,EAAE,IAAI;iBACnB,CAAC,CAAC;aACJ;;QAfH,KAAK,IAAI,SAAS,IAAI,MAAM;oBAAnB,SAAS;SAgBjB;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAtBD,sCAsBC","sourcesContent":["import { mergeStyles } from '../MergeStyles';\n\n/**\n * Builds a class names object from a given map.\n *\n * @param styles - Map of unprocessed styles.\n * @returns Map of property name to class name.\n */\nexport function buildClassMap<T extends Object>(styles: T): { [key in keyof T]?: string } {\n  let classes: { [key in keyof T]?: string } = {};\n\n  for (let styleName in styles) {\n    if (styles.hasOwnProperty(styleName)) {\n      let className: string;\n\n      Object.defineProperty(classes, styleName, {\n        get: (): string => {\n          if (className === undefined) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            className = mergeStyles(styles[styleName] as any).toString();\n          }\n          return className;\n        },\n        enumerable: true,\n        configurable: true,\n      });\n    }\n  }\n\n  return classes;\n}\n"]}
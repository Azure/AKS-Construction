{"version":3,"file":"Theme.js","sourceRoot":"../src/","sources":["types/Theme.ts"],"names":[],"mappings":"","sourcesContent":["import type { IRawStyle } from '@fluentui/merge-styles';\nimport type { IStyleFunctionOrObject } from '@fluentui/utilities';\nimport type { IPalette } from './IPalette';\nimport type { IFontStyles } from './IFontStyles';\nimport type { ISemanticColors } from './ISemanticColors';\nimport type { ISpacing } from './ISpacing';\nimport type { IEffects } from './IEffects';\nimport type { IScheme, ISchemeNames } from './IScheme';\n\n/**\n * {@docCategory Theme}\n * Component-level styles and variants.\n */\nexport interface ComponentStyles {\n  /**\n   * styles prop for a component.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  styles?: IStyleFunctionOrObject<any, any>;\n}\n\n/**\n * {@docCategory Theme}\n * Component-level styles and token set.\n */\nexport type ComponentsStyles = {\n  [componentName: string]: ComponentStyles;\n};\n\n/**\n * {@docCategory Theme}\n * A prepared (fully expanded) theme object.\n */\nexport interface Theme extends IScheme {\n  /**\n   * Component-level styles and token set.\n   * This is still in an experimental phase and is only applied by `ThemeProvider`.\n   */\n  components?: ComponentsStyles;\n\n  /**\n   * User defined identifier for the theme.\n   * @example \"monokai\"\n   */\n  name?: string;\n\n  /**\n   * @internal\n   * Id of the theme. This is for internal use only.\n   */\n  id?: string;\n\n  /**\n   * @internal\n   * The schemes property is still in an experimental phase. The intent is to have it work\n   * in conjunction with new 'schemes' prop that any component making use of Foundation can use.\n   * Alternative themes that can be referred to by name.\n   */\n  schemes?: { [P in ISchemeNames]?: IScheme };\n}\n\n/**\n * {@docCategory Theme}\n * A partial theme.\n */\nexport interface PartialTheme {\n  components?: ComponentsStyles;\n\n  palette?: Partial<IPalette>;\n  fonts?: Partial<IFontStyles>;\n  semanticColors?: Partial<ISemanticColors>;\n  isInverted?: boolean;\n  disableGlobalClassNames?: boolean;\n  rtl?: boolean;\n  spacing?: Partial<ISpacing>;\n  effects?: Partial<IEffects>;\n\n  /**\n   * Use this property to specify font property defaults.\n   */\n  defaultFontStyle?: IRawStyle;\n\n  /**\n   * @internal\n   * The schemes property is still in an experimental phase. The intent is to have it work\n   * in conjunction with new 'schemes' prop that any component making use of Foundation can use.\n   * Alternative themes that can be referred to by name.\n   */\n  schemes?: { [P in ISchemeNames]?: IScheme };\n}\n"]}
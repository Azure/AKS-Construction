{"version":3,"sources":["container/TreeContainer/OrderedMap.js","../../src/container/TreeContainer/OrderedMap.ts"],"names":["Object","defineProperty","exports","value","default","_Base","_interopRequireDefault","require","_TreeIterator","_throwError","obj","__esModule","OrderedMapIterator","TreeIterator","pointer","this","_node","_header","throwIteratorAccessError","self","Proxy","get","_","props","_key","_value","set","newValue","TypeError","copy","iteratorType","OrderedMap","TreeContainer","constructor","container","cmp","enableIndex","super","forEach","el","setElement","X","curNode","undefined","_iterationFunc","_left","_right","begin","end","rBegin","rEnd","front","_length","minNode","back","maxNode","lowerBound","key","resNode","_lowerBound","_root","upperBound","_upperBound","reverseLowerBound","_reverseLowerBound","reverseUpperBound","_reverseUpperBound","hint","_set","find","_findElementNode","getElementByKey","union","other","Symbol","iterator","_default"],"mappings":"AAAA;;AAEAA,OAAOC,eAAeC,SAAS,KAAc;IAC3CC,OAAO;;;AAETD,QAAQE,eAAe;;ACLvB,IAAAC,QAAAC,uBAAAC,QAAA;;AACA,IAAAC,gBAAAF,uBAAAC,QAAA;;AAGA,IAAAE,cAAAF,QAAA;;AAA8D,SAAAD,uBAAAI;IAAA,OAAAA,KAAAA,EAAAC,IAAAD,IAAA;QAAAN,SAAAM;;AAAA;;AAE9D,MAAME,2BAAiCC,cAAAA;IACjCC;QACF,IAAIC,KAAKC,MAAUD,KAAKE,GAAS;aAC/B,GAAAC,YAAAA;ADFE;QCIJ,MAAMC,IAAOJ;QACb,OAAO,IAAIK,MAAuB,IAAI;YACpCC,IAAIC,GAAGC;gBACL,IAAIA,MAAU,KAAK,OAAOJ,EAAKH,EAAMQ,QAChC,IAAID,MAAU,KAAK,OAAOJ,EAAKH,EAAMS;ADAtC;YCENC,IAAIJ,GAAGC,GAAYI;gBACjB,IAAIJ,MAAU,KAAK;oBACjB,MAAM,IAAIK,UAAU;ADAd;gBCERT,EAAKH,EAAMS,IAASE;gBACpB,OAAO;ADAH;;AAER;ICEFE;QACE,OAAO,IAAIjB,mBAAmBG,KAAKC,GAAOD,KAAKE,GAASF,KAAKe;ADA7D;;;ACQJ,MAAMC,mBAAyBC,MAAAA;IAW7BC,YACEC,IAAmC,IACnCC,GACAC;QAEAC,MAAMF,GAAKC;QACX,MAAMjB,IAAOJ;QACbmB,EAAUI,SAAQ,SAAUC;YAC1BpB,EAAKqB,WAAWD,EAAG,IAAIA,EAAG;ADTxB;AACJ;ICcME,IACNC;QAEA,IAAIA,MAAYC,WAAW;eACnB5B,KAAK6B,EAAeF,EAAQG;cACtB,EAACH,EAAQlB,GAAMkB,EAAQjB;eAC7BV,KAAK6B,EAAeF,EAAQI;ADVpC;ICYFC;QACE,OAAO,IAAInC,mBAAmBG,KAAKE,EAAQ4B,KAAS9B,KAAKE,GAASF,KAAKE;ADVvE;ICYF+B;QACE,OAAO,IAAIpC,mBAAmBG,KAAKE,GAASF,KAAKE;ADVjD;ICYFgC;QACE,OAAO,IAAIrC,mBACTG,KAAKE,EAAQ6B,KAAU/B,KAAKE,GAC5BF,KAAKE,GAAO;ADZd;ICgBFiC;QACE,OAAO,IAAItC,mBAAmBG,KAAKE,GAASF,KAAKE,GAAO;ADdxD;ICgBFkC;QACE,IAAIpC,KAAKqC,MAAY,GAAG;QACxB,MAAMC,IAAUtC,KAAKE,EAAQ4B;QAC7B,OAAe,EAACQ,EAAQ7B,GAAM6B,EAAQ5B;ADbtC;ICeF6B;QACE,IAAIvC,KAAKqC,MAAY,GAAG;QACxB,MAAMG,IAAUxC,KAAKE,EAAQ6B;QAC7B,OAAe,EAACS,EAAQ/B,GAAM+B,EAAQ9B;ADZtC;ICcF+B,WAAWC;QACT,MAAMC,IAAU3C,KAAK4C,EAAY5C,KAAK6C,IAAOH;QAC7C,OAAO,IAAI7C,mBAAmB8C,GAAS3C,KAAKE;ADZ5C;ICcF4C,WAAWJ;QACT,MAAMC,IAAU3C,KAAK+C,GAAY/C,KAAK6C,IAAOH;QAC7C,OAAO,IAAI7C,mBAAmB8C,GAAS3C,KAAKE;ADZ5C;ICcF8C,kBAAkBN;QAChB,MAAMC,IAAU3C,KAAKiD,GAAmBjD,KAAK6C,IAAOH;QACpD,OAAO,IAAI7C,mBAAmB8C,GAAS3C,KAAKE;ADZ5C;ICcFgD,kBAAkBR;QAChB,MAAMC,IAAU3C,KAAKmD,GAAmBnD,KAAK6C,IAAOH;QACpD,OAAO,IAAI7C,mBAAmB8C,GAAS3C,KAAKE;ADZ5C;IC0BFuB,WAAWiB,GAAQtD,GAAUgE;QAC3B,OAAOpD,KAAKqD,EAAKX,GAAKtD,GAAOgE;ADZ7B;ICcFE,KAAKZ;QACH,MAAMf,IAAU3B,KAAKuD,EAAiBvD,KAAK6C,IAAOH;QAClD,OAAO,IAAI7C,mBAAmB8B,GAAS3B,KAAKE;ADZ5C;ICoBFsD,gBAAgBd;QACd,MAAMf,IAAU3B,KAAKuD,EAAiBvD,KAAK6C,IAAOH;QAClD,OAAOf,EAAQjB;ADZf;ICcF+C,MAAMC;QACJ,MAAMtD,IAAOJ;QACb0D,EAAMnC,SAAQ,SAAUC;YACtBpB,EAAKqB,WAAWD,EAAG,IAAIA,EAAG;ADZxB;QCcJ,OAAOxB,KAAKqC;ADZZ;ICcF,CAACsB,OAAOC;QACN,OAAO5D,KAAK6B,EAAe7B,KAAK6C;ADZhC;;;ACoBH,IAAAgB,WAEc7C;;AAAU7B,QAAAE,UAAAwE","file":"OrderedMap.js","sourcesContent":["import TreeContainer from './Base';\nimport TreeIterator from './Base/TreeIterator';\nimport { throwIteratorAccessError } from \"../../utils/throwError\";\nclass OrderedMapIterator extends TreeIterator {\n    get pointer() {\n        if (this._node === this._header) {\n            throwIteratorAccessError();\n        }\n        const self = this;\n        return new Proxy([], {\n            get(_, props) {\n                if (props === '0')\n                    return self._node._key;\n                else if (props === '1')\n                    return self._node._value;\n            },\n            set(_, props, newValue) {\n                if (props !== '1') {\n                    throw new TypeError('props must be 1');\n                }\n                self._node._value = newValue;\n                return true;\n            }\n        });\n    }\n    copy() {\n        return new OrderedMapIterator(this._node, this._header, this.iteratorType);\n    }\n}\nclass OrderedMap extends TreeContainer {\n    /**\n     * @param container - The initialization container.\n     * @param cmp - The compare function.\n     * @param enableIndex - Whether to enable iterator indexing function.\n     * @example\n     * new OrderedMap();\n     * new OrderedMap([[0, 1], [2, 1]]);\n     * new OrderedMap([[0, 1], [2, 1]], (x, y) => x - y);\n     * new OrderedMap([[0, 1], [2, 1]], (x, y) => x - y, true);\n     */\n    constructor(container = [], cmp, enableIndex) {\n        super(cmp, enableIndex);\n        const self = this;\n        container.forEach(function (el) {\n            self.setElement(el[0], el[1]);\n        });\n    }\n    /**\n     * @internal\n     */\n    *_iterationFunc(curNode) {\n        if (curNode === undefined)\n            return;\n        yield* this._iterationFunc(curNode._left);\n        yield [curNode._key, curNode._value];\n        yield* this._iterationFunc(curNode._right);\n    }\n    begin() {\n        return new OrderedMapIterator(this._header._left || this._header, this._header);\n    }\n    end() {\n        return new OrderedMapIterator(this._header, this._header);\n    }\n    rBegin() {\n        return new OrderedMapIterator(this._header._right || this._header, this._header, 1 /* IteratorType.REVERSE */);\n    }\n    rEnd() {\n        return new OrderedMapIterator(this._header, this._header, 1 /* IteratorType.REVERSE */);\n    }\n    front() {\n        if (this._length === 0)\n            return;\n        const minNode = this._header._left;\n        return [minNode._key, minNode._value];\n    }\n    back() {\n        if (this._length === 0)\n            return;\n        const maxNode = this._header._right;\n        return [maxNode._key, maxNode._value];\n    }\n    lowerBound(key) {\n        const resNode = this._lowerBound(this._root, key);\n        return new OrderedMapIterator(resNode, this._header);\n    }\n    upperBound(key) {\n        const resNode = this._upperBound(this._root, key);\n        return new OrderedMapIterator(resNode, this._header);\n    }\n    reverseLowerBound(key) {\n        const resNode = this._reverseLowerBound(this._root, key);\n        return new OrderedMapIterator(resNode, this._header);\n    }\n    reverseUpperBound(key) {\n        const resNode = this._reverseUpperBound(this._root, key);\n        return new OrderedMapIterator(resNode, this._header);\n    }\n    /**\n     * @description Insert a key-value pair or set value by the given key.\n     * @param key - The key want to insert.\n     * @param value - The value want to set.\n     * @param hint - You can give an iterator hint to improve insertion efficiency.\n     * @return The size of container after setting.\n     * @example\n     * const mp = new OrderedMap([[2, 0], [4, 0], [5, 0]]);\n     * const iter = mp.begin();\n     * mp.setElement(1, 0);\n     * mp.setElement(3, 0, iter);  // give a hint will be faster.\n     */\n    setElement(key, value, hint) {\n        return this._set(key, value, hint);\n    }\n    find(key) {\n        const curNode = this._findElementNode(this._root, key);\n        return new OrderedMapIterator(curNode, this._header);\n    }\n    /**\n     * @description Get the value of the element of the specified key.\n     * @param key - The specified key you want to get.\n     * @example\n     * const val = container.getElementByKey(1);\n     */\n    getElementByKey(key) {\n        const curNode = this._findElementNode(this._root, key);\n        return curNode._value;\n    }\n    union(other) {\n        const self = this;\n        other.forEach(function (el) {\n            self.setElement(el[0], el[1]);\n        });\n        return this._length;\n    }\n    [Symbol.iterator]() {\n        return this._iterationFunc(this._root);\n    }\n}\nexport default OrderedMap;\n","import TreeContainer from './Base';\nimport TreeIterator from './Base/TreeIterator';\nimport { TreeNode } from './Base/TreeNode';\nimport { initContainer, IteratorType } from '@/container/ContainerBase';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\nclass OrderedMapIterator<K, V> extends TreeIterator<K, V> {\n  get pointer() {\n    if (this._node === this._header) {\n      throwIteratorAccessError();\n    }\n    const self = this;\n    return new Proxy(<[K, V]><unknown>[], {\n      get(_, props: '0' | '1') {\n        if (props === '0') return self._node._key;\n        else if (props === '1') return self._node._value;\n      },\n      set(_, props: '1', newValue: V) {\n        if (props !== '1') {\n          throw new TypeError('props must be 1');\n        }\n        self._node._value = newValue;\n        return true;\n      }\n    });\n  }\n  copy() {\n    return new OrderedMapIterator(this._node, this._header, this.iteratorType);\n  }\n  // @ts-ignore\n  equals(iter: OrderedMapIterator<K, V>): boolean;\n}\n\nexport type { OrderedMapIterator };\n\nclass OrderedMap<K, V> extends TreeContainer<K, V> {\n  /**\n   * @param container - The initialization container.\n   * @param cmp - The compare function.\n   * @param enableIndex - Whether to enable iterator indexing function.\n   * @example\n   * new OrderedMap();\n   * new OrderedMap([[0, 1], [2, 1]]);\n   * new OrderedMap([[0, 1], [2, 1]], (x, y) => x - y);\n   * new OrderedMap([[0, 1], [2, 1]], (x, y) => x - y, true);\n   */\n  constructor(\n    container: initContainer<[K, V]> = [],\n    cmp?: (x: K, y: K) => number,\n    enableIndex?: boolean\n  ) {\n    super(cmp, enableIndex);\n    const self = this;\n    container.forEach(function (el) {\n      self.setElement(el[0], el[1]);\n    });\n  }\n  /**\n   * @internal\n   */\n  private * _iterationFunc(\n    curNode: TreeNode<K, V> | undefined\n  ): Generator<[K, V], void> {\n    if (curNode === undefined) return;\n    yield * this._iterationFunc(curNode._left);\n    yield <[K, V]>[curNode._key, curNode._value];\n    yield * this._iterationFunc(curNode._right);\n  }\n  begin() {\n    return new OrderedMapIterator(this._header._left || this._header, this._header);\n  }\n  end() {\n    return new OrderedMapIterator(this._header, this._header);\n  }\n  rBegin() {\n    return new OrderedMapIterator(\n      this._header._right || this._header,\n      this._header,\n      IteratorType.REVERSE\n    );\n  }\n  rEnd() {\n    return new OrderedMapIterator(this._header, this._header, IteratorType.REVERSE);\n  }\n  front() {\n    if (this._length === 0) return;\n    const minNode = this._header._left!;\n    return <[K, V]>[minNode._key, minNode._value];\n  }\n  back() {\n    if (this._length === 0) return;\n    const maxNode = this._header._right!;\n    return <[K, V]>[maxNode._key, maxNode._value];\n  }\n  lowerBound(key: K) {\n    const resNode = this._lowerBound(this._root, key);\n    return new OrderedMapIterator(resNode, this._header);\n  }\n  upperBound(key: K) {\n    const resNode = this._upperBound(this._root, key);\n    return new OrderedMapIterator(resNode, this._header);\n  }\n  reverseLowerBound(key: K) {\n    const resNode = this._reverseLowerBound(this._root, key);\n    return new OrderedMapIterator(resNode, this._header);\n  }\n  reverseUpperBound(key: K) {\n    const resNode = this._reverseUpperBound(this._root, key);\n    return new OrderedMapIterator(resNode, this._header);\n  }\n  /**\n   * @description Insert a key-value pair or set value by the given key.\n   * @param key - The key want to insert.\n   * @param value - The value want to set.\n   * @param hint - You can give an iterator hint to improve insertion efficiency.\n   * @return The size of container after setting.\n   * @example\n   * const mp = new OrderedMap([[2, 0], [4, 0], [5, 0]]);\n   * const iter = mp.begin();\n   * mp.setElement(1, 0);\n   * mp.setElement(3, 0, iter);  // give a hint will be faster.\n   */\n  setElement(key: K, value: V, hint?: OrderedMapIterator<K, V>) {\n    return this._set(key, value, hint);\n  }\n  find(key: K) {\n    const curNode = this._findElementNode(this._root, key);\n    return new OrderedMapIterator(curNode, this._header);\n  }\n  /**\n   * @description Get the value of the element of the specified key.\n   * @param key - The specified key you want to get.\n   * @example\n   * const val = container.getElementByKey(1);\n   */\n  getElementByKey(key: K) {\n    const curNode = this._findElementNode(this._root, key);\n    return curNode._value;\n  }\n  union(other: OrderedMap<K, V>) {\n    const self = this;\n    other.forEach(function (el) {\n      self.setElement(el[0], el[1]);\n    });\n    return this._length;\n  }\n  [Symbol.iterator]() {\n    return this._iterationFunc(this._root);\n  }\n  // @ts-ignore\n  eraseElementByIterator(iter: OrderedMapIterator<K, V>): OrderedMapIterator<K, V>;\n  // @ts-ignore\n  forEach(callback: (element: [K, V], index: number, map: OrderedMap<K, V>) => void): void;\n  // @ts-ignore\n  getElementByPos(pos: number): [K, V];\n}\n\nexport default OrderedMap;\n"]}
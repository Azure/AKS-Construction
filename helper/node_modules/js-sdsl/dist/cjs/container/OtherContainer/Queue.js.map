{"version":3,"sources":["container/OtherContainer/Queue.js","../../src/container/OtherContainer/Queue.ts"],"names":["Object","defineProperty","exports","value","default","_ContainerBase","require","_Deque","_interopRequireDefault","obj","__esModule","Queue","Base","constructor","container","super","this","_queue","Deque","_length","size","clear","push","element","pushBack","pop","popFront","front","_default"],"mappings":"AAAA;;AAEAA,OAAOC,eAAeC,SAAS,KAAc;IAC3CC,OAAO;;;AAETD,QAAQE,eAAe;;ACLvB,IAAAC,iBAAAC,QAAA;;AACA,IAAAC,SAAAC,uBAAAF,QAAA;;AAA0D,SAAAE,uBAAAC;IAAA,OAAAA,KAAAA,EAAAC,IAAAD,IAAA;QAAAL,SAAAK;;AAAA;;AAE1D,MAAME,cAAiBC,eAAAA;IAKrBC,YAAYC,IAA8B;QACxCC;QACAC,KAAKC,IAAS,IAAIC,OAAAA,QAAMJ;QACxBE,KAAKG,IAAUH,KAAKC,EAAOG;ADJ3B;ICMFC;QACEL,KAAKC,EAAOI;QACZL,KAAKG,IAAU;ADJf;ICWFG,KAAKC;QACHP,KAAKC,EAAOO,SAASD;QACrBP,KAAKG,KAAW;QAChB,OAAOH,KAAKG;ADJZ;ICUFM;QACE,IAAIT,KAAKG,MAAY,GAAG;QACxBH,KAAKG,KAAW;QAChB,OAAOH,KAAKC,EAAOS;ADHnB;ICSFC;QACE,OAAOX,KAAKC,EAAOU;ADHnB;;;ACKH,IAAAC,WAEcjB;;AAAKT,QAAAE,UAAAwB","file":"Queue.js","sourcesContent":["import { Base } from \"../ContainerBase\";\nimport Deque from \"../SequentialContainer/Deque\";\nclass Queue extends Base {\n    constructor(container = []) {\n        super();\n        this._queue = new Deque(container);\n        this._length = this._queue.size();\n    }\n    clear() {\n        this._queue.clear();\n        this._length = 0;\n    }\n    /**\n     * @description Inserts element to queue's end.\n     * @param element - The element you want to push to the front.\n     * @returns The container length after pushing.\n     */\n    push(element) {\n        this._queue.pushBack(element);\n        this._length += 1;\n        return this._length;\n    }\n    /**\n     * @description Removes the first element.\n     * @returns The element you popped.\n     */\n    pop() {\n        if (this._length === 0)\n            return;\n        this._length -= 1;\n        return this._queue.popFront();\n    }\n    /**\n     * @description Access the first element.\n     * @returns The first element.\n     */\n    front() {\n        return this._queue.front();\n    }\n}\nexport default Queue;\n","import { Base, initContainer } from '@/container/ContainerBase';\nimport Deque from '@/container/SequentialContainer/Deque';\n\nclass Queue<T> extends Base {\n  /**\n   * @internal\n   */\n  private _queue: Deque<T>;\n  constructor(container: initContainer<T> = []) {\n    super();\n    this._queue = new Deque(container);\n    this._length = this._queue.size();\n  }\n  clear() {\n    this._queue.clear();\n    this._length = 0;\n  }\n  /**\n   * @description Inserts element to queue's end.\n   * @param element - The element you want to push to the front.\n   * @returns The container length after pushing.\n   */\n  push(element: T) {\n    this._queue.pushBack(element);\n    this._length += 1;\n    return this._length;\n  }\n  /**\n   * @description Removes the first element.\n   * @returns The element you popped.\n   */\n  pop() {\n    if (this._length === 0) return;\n    this._length -= 1;\n    return this._queue.popFront();\n  }\n  /**\n   * @description Access the first element.\n   * @returns The first element.\n   */\n  front() {\n    return this._queue.front();\n  }\n}\n\nexport default Queue;\n"]}
{"version":3,"sources":["container/SequentialContainer/Base/RandomIterator.js","../../src/container/SequentialContainer/Base/RandomIterator.ts"],"names":["Object","defineProperty","exports","value","RandomIterator","_ContainerBase","require","_throwError","ContainerIterator","constructor","index","size","getElementByPos","setElementByPos","iteratorType","super","this","_node","_size","_getElementByPos","_setElementByPos","pre","throwIteratorAccessError","next","pointer","RangeError","newValue"],"mappings":"AAAA;;AAEAA,OAAOC,eAAeC,SAAS,KAAc;IAC3CC,OAAO;;;AAETD,QAAQE,sBAAsB;;ACL9B,IAAAC,iBAAAC,QAAA;;AAEA,IAAAC,cAAAD,QAAA;;AAEM,MAAgBF,uBAA0BI,eAAAA;IAoB9CC,YACEC,GACAC,GACAC,GACAC,GACAC;QAEAC,MAAMD;QACNE,KAAKC,IAAQP;QACbM,KAAKE,IAAQP;QACbK,KAAKG,IAAmBP;QACxBI,KAAKI,IAAmBP;QACxB,IAAIG,KAAKF,iBAAY,GAA0B;YAC7CE,KAAKK,MAAM;gBACT,IAAIL,KAAKC,MAAU,GAAG;qBACpB,GAAAK,YAAAA;ADtBM;gBCwBRN,KAAKC,KAAS;gBACd,OAAOD;ADtBH;YCwBNA,KAAKO,OAAO;gBACV,IAAIP,KAAKC,MAAUD,KAAKE,KAAS;qBAC/B,GAAAI,YAAAA;ADtBM;gBCwBRN,KAAKC,KAAS;gBACd,OAAOD;ADtBH;AACJ,eCuBG;YACLA,KAAKK,MAAM;gBACT,IAAIL,KAAKC,MAAUD,KAAKE,MAAU,GAAG;qBACnC,GAAAI,YAAAA;ADrBM;gBCuBRN,KAAKC,KAAS;gBACd,OAAOD;ADrBH;YCuBNA,KAAKO,OAAO;gBACV,IAAIP,KAAKC,OAAW,GAAG;qBACrB,GAAAK,YAAAA;ADrBM;gBCuBRN,KAAKC,KAAS;gBACd,OAAOD;ADrBH;AACJ;AACJ;ICuBEQ;QDrBE,ICsBsBR,KAAKC,IAAK,KAAVD,KAAKC,IAAUD,KAAKE,MAAO,GAzDhD;YAAG,MAAS,IAAIO;ADqCjB;QCqBJ,OAAOT,KAAKG,EAAiBH,KAAKC;ADjBlC;ICmBEO,YAAQE;QDjBN,ICkBsBV,KAAKC,IAAK,KAAVD,KAAKC,IAAUD,KAAKE,MAAO,GA7DhD;YAAG,MAAS,IAAIO;AD6CjB;QCiBJT,KAAKI,EAAiBJ,KAAKC,GAAOS;ADblC;;;ACmBHxB,QAAAE,iBAAAA","file":"RandomIterator.js","sourcesContent":["import { ContainerIterator } from \"../../ContainerBase\";\nimport $checkWithinAccessParams from \"../../../utils/checkParams.macro\";\nimport { throwIteratorAccessError } from \"../../../utils/throwError\";\nexport class RandomIterator extends ContainerIterator {\n    /**\n     * @internal\n     */\n    constructor(index, size, getElementByPos, setElementByPos, iteratorType) {\n        super(iteratorType);\n        this._node = index;\n        this._size = size;\n        this._getElementByPos = getElementByPos;\n        this._setElementByPos = setElementByPos;\n        if (this.iteratorType === 0 /* IteratorType.NORMAL */) {\n            this.pre = function () {\n                if (this._node === 0) {\n                    throwIteratorAccessError();\n                }\n                this._node -= 1;\n                return this;\n            };\n            this.next = function () {\n                if (this._node === this._size()) {\n                    throwIteratorAccessError();\n                }\n                this._node += 1;\n                return this;\n            };\n        }\n        else {\n            this.pre = function () {\n                if (this._node === this._size() - 1) {\n                    throwIteratorAccessError();\n                }\n                this._node += 1;\n                return this;\n            };\n            this.next = function () {\n                if (this._node === -1) {\n                    throwIteratorAccessError();\n                }\n                this._node -= 1;\n                return this;\n            };\n        }\n    }\n    get pointer() {\n        if (this._node < 0 || this._node > this._size() - 1) {\n            throw new RangeError();\n        } /**\n         * @internal\n         */\n        return this._getElementByPos(this._node);\n    }\n    set pointer(newValue) {\n        if (this._node < 0 || this._node > this._size() - 1) {\n            throw new RangeError();\n        } /**\n         * @internal\n         */\n        this._setElementByPos(this._node, newValue);\n    }\n}\n","import { ContainerIterator, IteratorType } from '@/container/ContainerBase';\nimport $checkWithinAccessParams from '@/utils/checkParams.macro';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\nexport abstract class RandomIterator<T> extends ContainerIterator<T> {\n  /**\n   * @internal\n   */\n  _node: number;\n  /**\n   * @internal\n   */\n  protected readonly _size: () => number;\n  /**\n   * @internal\n   */\n  protected readonly _getElementByPos: (pos: number) => T;\n  /**\n   * @internal\n   */\n  protected readonly _setElementByPos: (pos: number, element: T) => void;\n  /**\n   * @internal\n   */\n  constructor(\n    index: number,\n    size: () => number,\n    getElementByPos: (pos: number) => T,\n    setElementByPos: (pos: number, element: T) => void,\n    iteratorType?: IteratorType\n  ) {\n    super(iteratorType);\n    this._node = index;\n    this._size = size;\n    this._getElementByPos = getElementByPos;\n    this._setElementByPos = setElementByPos;\n    if (this.iteratorType === IteratorType.NORMAL) {\n      this.pre = function () {\n        if (this._node === 0) {\n          throwIteratorAccessError();\n        }\n        this._node -= 1;\n        return this;\n      };\n      this.next = function () {\n        if (this._node === this._size()) {\n          throwIteratorAccessError();\n        }\n        this._node += 1;\n        return this;\n      };\n    } else {\n      this.pre = function () {\n        if (this._node === this._size() - 1) {\n          throwIteratorAccessError();\n        }\n        this._node += 1;\n        return this;\n      };\n      this.next = function () {\n        if (this._node === -1) {\n          throwIteratorAccessError();\n        }\n        this._node -= 1;\n        return this;\n      };\n    }\n  }\n  get pointer() {\n    $checkWithinAccessParams!(this._node, 0, this._size() - 1);\n    return this._getElementByPos(this._node);\n  }\n  set pointer(newValue: T) {\n    $checkWithinAccessParams!(this._node, 0, this._size() - 1);\n    this._setElementByPos(this._node, newValue);\n  }\n  // @ts-ignore\n  pre(): this;\n  // @ts-ignore\n  next(): this;\n}\n"]}